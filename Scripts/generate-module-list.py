from os import listdir
from os.path import isfile, join
from urllib.request import urlopen
import json
from datetime import datetime
import re

hardwareIgnoreList = ['Reference', 'lib']
moduleNames = listdir('./Hardware')
repoowner = 'LetsBuildRockets'
reponame = 'Modular-Payload-System'
modules = []

class Module:
    def __init__(self, number):
        self.number = number
        self.title = '-'
        self.revision = '-'
        self.datasheet = '-'
        self.release = '-'
        self.assemblies = []

moduleNames = [x.upper() for x in moduleNames]
for ig in hardwareIgnoreList:
    while ig.upper() in moduleNames: moduleNames.remove(ig.upper())

githubtags = json.load(urlopen('https://api.github.com/repos/'+repoowner+'/'+reponame+'/tags'))

for modulename in moduleNames:
    module = Module(modulename)
    PrjPcbPath = './Hardware/'+modulename+'/'+modulename+'.PrjPcb'
    if isfile(PrjPcbPath):
        PrjPcb = []
        for line in open(PrjPcbPath, "r"):
            PrjPcb.append(line)
        if 'name=projectrevision' in [x.lower().rstrip() for x in PrjPcb]:
            module.revision = (PrjPcb[[x.lower().rstrip() for x in PrjPcb].index('name=projectrevision')+1][6:]).rstrip()
            for tag in githubtags:
                if tag['name'] == module.number+'-'+module.revision:
                    module.release = 'https://github.com/'+repoowner+'/'+reponame+'/releases/tag/'+tag['name']
        if 'name=projecttitle' in [x.lower().rstrip() for x in PrjPcb]:
            module.title = (PrjPcb[[x.lower().rstrip() for x in PrjPcb].index('name=projecttitle')+1][6:]).rstrip()

        variantLocs = [i for i, x in enumerate(PrjPcb) if x[:15] == "[ProjectVariant"]
        if len(variantLocs) > 0:
            module.assemblies = []
            linebrLocs = [i for i, x in enumerate(PrjPcb) if x == "\n"]
            for variantNum, variantLoc in enumerate(variantLocs):
                start = variantLoc
                paracount = int(PrjPcb[start+4][15:])
                end = linebrLocs[next(end for end, linenum in enumerate(linebrLocs) if linenum > start)+paracount]
                #print('Variant: ', variantNum)
                for line in PrjPcb[start:end]:
                    #print(line)
                    if line.lower().startswith('description='):
                        module.assemblies.append(line[12:].rstrip())
                        #print(line[12:].rstrip())
                if 'name=variantlongdescription' in [x.lower().rstrip() for x in PrjPcb[start:end]]:
                    module.assemblies[-1] = module.assemblies[-1]+' - '+(PrjPcb[start:end][[x.lower().rstrip() for x in PrjPcb[start:end]].index('name=variantlongdescription')+1][6:]).rstrip()
                #print()
                
                        
    datasheetpath = PrjPcbPath = './Hardware/'+modulename+'/docs/datasheet.md'
    if isfile(datasheetpath):
        module.datasheet='https://github.com/'+repoowner+'/'+reponame+'/blob/master/Hardware/'+modulename+'/docs/datasheet.md'
        
    modules.append(module)


def make_markdown_table(array):

    markdown = "\n" + str("| ")

    for e in array[0]:
        to_add = " " + str(e) + str(" |")
        markdown += to_add
    markdown += "\n"

    markdown += '|'
    for i in range(len(array[0])):
        markdown += str("-------------- | ")
    markdown += "\n"

    for entry in array[1:]:
        markdown += str("| ")
        for e in entry:
            to_add = str(e) + str(" | ")
            markdown += to_add
        markdown += "\n"

    return markdown + "\n"

moduleList = [['Module', 'Revision', 'Datasheet']]
for module in modules:
    if module.release != '-':
        module.revision = '['+module.revision+']('+module.release+')'
    else:
        if module.revision != '-':
            module.revision = module.revision+' (draft)'

    if module.title != '-':
        module.number = module.number + ' - ' + module.title
    
    if module.datasheet != '-':
        module.datasheet = '[datasheet]('+module.datasheet+')'

    if len(module.assemblies) > 0 :
        #module.number = module.number + '<br/>' + 'Assemblies:'
        for assem in module.assemblies:
            module.number = module.number + '<br/>-   ' + assem
        
    moduleList.append([module.number,module.revision,module.datasheet])


with open('./ModuleList.md', "r+") as f:
    data = f.read()
    f.seek(0)
    f.write('# Module List')
    f.write(make_markdown_table(moduleList))
    f.write('')
    f.write('This file was autogenerated with /Scripts/generate-module-list.py on ' + datetime.now().strftime("%m/%d/%Y %H:%M:%S"))
    f.truncate()
    
        
