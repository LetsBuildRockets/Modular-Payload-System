
PS-010.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000041a0  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000078  20000000  000041a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000045c  20000078  00004218  00020078  2**2
                  ALLOC
  3 .stack        00001004  200004d4  00004674  00020078  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002db9d  00000000  00000000  000200f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000039ef  00000000  00000000  0004dc96  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00010971  00000000  00000000  00051685  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000ce0  00000000  00000000  00061ff6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000011c8  00000000  00000000  00062cd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00020181  00000000  00000000  00063e9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001508e  00000000  00000000  0008401f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0009eee9  00000000  00000000  000990ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002a94  00000000  00000000  00137f98  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	d8 14 00 20 35 01 00 00 31 01 00 00 31 01 00 00     ... 5...1...1...
	...
      2c:	31 01 00 00 00 00 00 00 00 00 00 00 31 01 00 00     1...........1...
      3c:	31 01 00 00 31 01 00 00 31 01 00 00 31 01 00 00     1...1...1...1...
      4c:	31 01 00 00 31 01 00 00 31 01 00 00 31 01 00 00     1...1...1...1...
      5c:	31 01 00 00 31 01 00 00 31 01 00 00 31 01 00 00     1...1...1...1...
      6c:	31 01 00 00 31 01 00 00 31 01 00 00 31 01 00 00     1...1...1...1...
      7c:	05 0f 00 00 31 01 00 00 31 01 00 00 31 01 00 00     ....1...1...1...
      8c:	31 01 00 00 31 01 00 00 31 01 00 00 31 01 00 00     1...1...1...1...
      9c:	31 01 00 00 31 01 00 00 31 01 00 00 31 01 00 00     1...1...1...1...
      ac:	31 01 00 00 31 01 00 00 31 01 00 00 31 01 00 00     1...1...1...1...

000000bc <__do_global_dtors_aux>:
      bc:	b510      	push	{r4, lr}
      be:	4c06      	ldr	r4, [pc, #24]	; (d8 <__do_global_dtors_aux+0x1c>)
      c0:	7823      	ldrb	r3, [r4, #0]
      c2:	2b00      	cmp	r3, #0
      c4:	d107      	bne.n	d6 <__do_global_dtors_aux+0x1a>
      c6:	4b05      	ldr	r3, [pc, #20]	; (dc <__do_global_dtors_aux+0x20>)
      c8:	2b00      	cmp	r3, #0
      ca:	d002      	beq.n	d2 <__do_global_dtors_aux+0x16>
      cc:	4804      	ldr	r0, [pc, #16]	; (e0 <__do_global_dtors_aux+0x24>)
      ce:	e000      	b.n	d2 <__do_global_dtors_aux+0x16>
      d0:	bf00      	nop
      d2:	2301      	movs	r3, #1
      d4:	7023      	strb	r3, [r4, #0]
      d6:	bd10      	pop	{r4, pc}
      d8:	20000078 	.word	0x20000078
      dc:	00000000 	.word	0x00000000
      e0:	000041a0 	.word	0x000041a0

000000e4 <frame_dummy>:
      e4:	4b08      	ldr	r3, [pc, #32]	; (108 <frame_dummy+0x24>)
      e6:	b510      	push	{r4, lr}
      e8:	2b00      	cmp	r3, #0
      ea:	d003      	beq.n	f4 <frame_dummy+0x10>
      ec:	4907      	ldr	r1, [pc, #28]	; (10c <frame_dummy+0x28>)
      ee:	4808      	ldr	r0, [pc, #32]	; (110 <frame_dummy+0x2c>)
      f0:	e000      	b.n	f4 <frame_dummy+0x10>
      f2:	bf00      	nop
      f4:	4807      	ldr	r0, [pc, #28]	; (114 <frame_dummy+0x30>)
      f6:	6803      	ldr	r3, [r0, #0]
      f8:	2b00      	cmp	r3, #0
      fa:	d100      	bne.n	fe <frame_dummy+0x1a>
      fc:	bd10      	pop	{r4, pc}
      fe:	4b06      	ldr	r3, [pc, #24]	; (118 <frame_dummy+0x34>)
     100:	2b00      	cmp	r3, #0
     102:	d0fb      	beq.n	fc <frame_dummy+0x18>
     104:	4798      	blx	r3
     106:	e7f9      	b.n	fc <frame_dummy+0x18>
     108:	00000000 	.word	0x00000000
     10c:	2000007c 	.word	0x2000007c
     110:	000041a0 	.word	0x000041a0
     114:	000041a0 	.word	0x000041a0
     118:	00000000 	.word	0x00000000

0000011c <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     11c:	b510      	push	{r4, lr}
	system_init();
     11e:	4b02      	ldr	r3, [pc, #8]	; (128 <atmel_start_init+0xc>)
     120:	4798      	blx	r3
	stdio_redirect_init();
     122:	4b02      	ldr	r3, [pc, #8]	; (12c <atmel_start_init+0x10>)
     124:	4798      	blx	r3
}
     126:	bd10      	pop	{r4, pc}
     128:	000005c5 	.word	0x000005c5
     12c:	0000165d 	.word	0x0000165d

00000130 <Dummy_Handler>:
 */
void Dummy_Handler(void)
{
        //while (1) {
        //}
}
     130:	4770      	bx	lr
	...

00000134 <Reset_Handler>:
{
     134:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
     136:	4a17      	ldr	r2, [pc, #92]	; (194 <Reset_Handler+0x60>)
     138:	4b17      	ldr	r3, [pc, #92]	; (198 <Reset_Handler+0x64>)
     13a:	429a      	cmp	r2, r3
     13c:	d011      	beq.n	162 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
     13e:	001a      	movs	r2, r3
     140:	4b16      	ldr	r3, [pc, #88]	; (19c <Reset_Handler+0x68>)
     142:	429a      	cmp	r2, r3
     144:	d20d      	bcs.n	162 <Reset_Handler+0x2e>
     146:	4a16      	ldr	r2, [pc, #88]	; (1a0 <Reset_Handler+0x6c>)
     148:	3303      	adds	r3, #3
     14a:	1a9b      	subs	r3, r3, r2
     14c:	089b      	lsrs	r3, r3, #2
     14e:	3301      	adds	r3, #1
     150:	009b      	lsls	r3, r3, #2
     152:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     154:	4810      	ldr	r0, [pc, #64]	; (198 <Reset_Handler+0x64>)
     156:	490f      	ldr	r1, [pc, #60]	; (194 <Reset_Handler+0x60>)
     158:	588c      	ldr	r4, [r1, r2]
     15a:	5084      	str	r4, [r0, r2]
     15c:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     15e:	429a      	cmp	r2, r3
     160:	d1fa      	bne.n	158 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
     162:	4a10      	ldr	r2, [pc, #64]	; (1a4 <Reset_Handler+0x70>)
     164:	4b10      	ldr	r3, [pc, #64]	; (1a8 <Reset_Handler+0x74>)
     166:	429a      	cmp	r2, r3
     168:	d20a      	bcs.n	180 <Reset_Handler+0x4c>
     16a:	43d3      	mvns	r3, r2
     16c:	490e      	ldr	r1, [pc, #56]	; (1a8 <Reset_Handler+0x74>)
     16e:	185b      	adds	r3, r3, r1
     170:	2103      	movs	r1, #3
     172:	438b      	bics	r3, r1
     174:	3304      	adds	r3, #4
     176:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
     178:	2100      	movs	r1, #0
     17a:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     17c:	4293      	cmp	r3, r2
     17e:	d1fc      	bne.n	17a <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     180:	4a0a      	ldr	r2, [pc, #40]	; (1ac <Reset_Handler+0x78>)
     182:	21ff      	movs	r1, #255	; 0xff
     184:	4b0a      	ldr	r3, [pc, #40]	; (1b0 <Reset_Handler+0x7c>)
     186:	438b      	bics	r3, r1
     188:	6093      	str	r3, [r2, #8]
        __libc_init_array();
     18a:	4b0a      	ldr	r3, [pc, #40]	; (1b4 <Reset_Handler+0x80>)
     18c:	4798      	blx	r3
        main();
     18e:	4b0a      	ldr	r3, [pc, #40]	; (1b8 <Reset_Handler+0x84>)
     190:	4798      	blx	r3
     192:	e7fe      	b.n	192 <Reset_Handler+0x5e>
     194:	000041a0 	.word	0x000041a0
     198:	20000000 	.word	0x20000000
     19c:	20000078 	.word	0x20000078
     1a0:	20000004 	.word	0x20000004
     1a4:	20000078 	.word	0x20000078
     1a8:	200004d4 	.word	0x200004d4
     1ac:	e000ed00 	.word	0xe000ed00
     1b0:	00000000 	.word	0x00000000
     1b4:	00002dad 	.word	0x00002dad
     1b8:	00001481 	.word	0x00001481

000001bc <ADC_0_PORT_init>:
struct usart_sync_descriptor DEBUG_UART;

struct temp_sync_descriptor TEMPERATURE_SENSOR_0;

void ADC_0_PORT_init(void)
{
     1bc:	b5f0      	push	{r4, r5, r6, r7, lr}
     1be:	46de      	mov	lr, fp
     1c0:	4657      	mov	r7, sl
     1c2:	464e      	mov	r6, r9
     1c4:	4645      	mov	r5, r8
     1c6:	b5e0      	push	{r5, r6, r7, lr}
     1c8:	b083      	sub	sp, #12
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     1ca:	24c0      	movs	r4, #192	; 0xc0
     1cc:	05e4      	lsls	r4, r4, #23
     1ce:	2304      	movs	r3, #4
     1d0:	6063      	str	r3, [r4, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     1d2:	2382      	movs	r3, #130	; 0x82
     1d4:	05db      	lsls	r3, r3, #23
     1d6:	4a89      	ldr	r2, [pc, #548]	; (3fc <ADC_0_PORT_init+0x240>)
     1d8:	629a      	str	r2, [r3, #40]	; 0x28
     1da:	20c0      	movs	r0, #192	; 0xc0
     1dc:	0600      	lsls	r0, r0, #24
     1de:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     1e0:	2642      	movs	r6, #66	; 0x42
     1e2:	5d9d      	ldrb	r5, [r3, r6]
	tmp &= ~PORT_PINCFG_PMUXEN;
     1e4:	2101      	movs	r1, #1
     1e6:	438d      	bics	r5, r1
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     1e8:	2201      	movs	r2, #1
     1ea:	4315      	orrs	r5, r2
     1ec:	b2ed      	uxtb	r5, r5
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     1ee:	559d      	strb	r5, [r3, r6]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     1f0:	2531      	movs	r5, #49	; 0x31
     1f2:	5d5e      	ldrb	r6, [r3, r5]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     1f4:	3d22      	subs	r5, #34	; 0x22
     1f6:	46a9      	mov	r9, r5
     1f8:	43ae      	bics	r6, r5
	tmp |= PORT_PMUX_PMUXE(data);
     1fa:	4316      	orrs	r6, r2
     1fc:	b2f6      	uxtb	r6, r6
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     1fe:	3522      	adds	r5, #34	; 0x22
     200:	555e      	strb	r6, [r3, r5]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     202:	2610      	movs	r6, #16
     204:	6066      	str	r6, [r4, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     206:	4e7e      	ldr	r6, [pc, #504]	; (400 <ADC_0_PORT_init+0x244>)
     208:	629e      	str	r6, [r3, #40]	; 0x28
     20a:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     20c:	2744      	movs	r7, #68	; 0x44
     20e:	5dde      	ldrb	r6, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     210:	438e      	bics	r6, r1
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     212:	4316      	orrs	r6, r2
     214:	b2f6      	uxtb	r6, r6
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     216:	55de      	strb	r6, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     218:	3501      	adds	r5, #1
     21a:	46a8      	mov	r8, r5
     21c:	5d5e      	ldrb	r6, [r3, r5]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     21e:	464d      	mov	r5, r9
     220:	43ae      	bics	r6, r5
	tmp |= PORT_PMUX_PMUXE(data);
     222:	4316      	orrs	r6, r2
     224:	b2f6      	uxtb	r6, r6
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     226:	4645      	mov	r5, r8
     228:	555e      	strb	r6, [r3, r5]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     22a:	2620      	movs	r6, #32
     22c:	6066      	str	r6, [r4, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     22e:	4e75      	ldr	r6, [pc, #468]	; (404 <ADC_0_PORT_init+0x248>)
     230:	629e      	str	r6, [r3, #40]	; 0x28
     232:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     234:	3701      	adds	r7, #1
     236:	5dde      	ldrb	r6, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     238:	438e      	bics	r6, r1
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     23a:	4316      	orrs	r6, r2
     23c:	b2f6      	uxtb	r6, r6
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     23e:	55de      	strb	r6, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     240:	5d5e      	ldrb	r6, [r3, r5]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     242:	3f36      	subs	r7, #54	; 0x36
     244:	403e      	ands	r6, r7
	tmp |= PORT_PMUX_PMUXO(data);
     246:	2510      	movs	r5, #16
     248:	46ab      	mov	fp, r5
     24a:	0035      	movs	r5, r6
     24c:	465e      	mov	r6, fp
     24e:	4335      	orrs	r5, r6
     250:	466e      	mov	r6, sp
     252:	71f5      	strb	r5, [r6, #7]
     254:	79f5      	ldrb	r5, [r6, #7]
     256:	46ac      	mov	ip, r5
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     258:	4645      	mov	r5, r8
     25a:	4666      	mov	r6, ip
     25c:	555e      	strb	r6, [r3, r5]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     25e:	350e      	adds	r5, #14
     260:	6065      	str	r5, [r4, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     262:	4d69      	ldr	r5, [pc, #420]	; (408 <ADC_0_PORT_init+0x24c>)
     264:	629d      	str	r5, [r3, #40]	; 0x28
     266:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     268:	2546      	movs	r5, #70	; 0x46
     26a:	46a8      	mov	r8, r5
     26c:	5d5d      	ldrb	r5, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     26e:	438d      	bics	r5, r1
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     270:	4315      	orrs	r5, r2
     272:	466e      	mov	r6, sp
     274:	71f5      	strb	r5, [r6, #7]
     276:	79f5      	ldrb	r5, [r6, #7]
     278:	46ac      	mov	ip, r5
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     27a:	4645      	mov	r5, r8
     27c:	4666      	mov	r6, ip
     27e:	555e      	strb	r6, [r3, r5]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     280:	3d13      	subs	r5, #19
     282:	46a8      	mov	r8, r5
     284:	5d5d      	ldrb	r5, [r3, r5]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     286:	464e      	mov	r6, r9
     288:	43b5      	bics	r5, r6
	tmp |= PORT_PMUX_PMUXE(data);
     28a:	4315      	orrs	r5, r2
     28c:	466e      	mov	r6, sp
     28e:	71f5      	strb	r5, [r6, #7]
     290:	79f5      	ldrb	r5, [r6, #7]
     292:	46ac      	mov	ip, r5
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     294:	4645      	mov	r5, r8
     296:	4666      	mov	r6, ip
     298:	555e      	strb	r6, [r3, r5]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     29a:	354d      	adds	r5, #77	; 0x4d
     29c:	6065      	str	r5, [r4, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     29e:	4d5b      	ldr	r5, [pc, #364]	; (40c <ADC_0_PORT_init+0x250>)
     2a0:	629d      	str	r5, [r3, #40]	; 0x28
     2a2:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     2a4:	2547      	movs	r5, #71	; 0x47
     2a6:	46aa      	mov	sl, r5
     2a8:	5d5d      	ldrb	r5, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     2aa:	438d      	bics	r5, r1
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     2ac:	4315      	orrs	r5, r2
     2ae:	466e      	mov	r6, sp
     2b0:	71f5      	strb	r5, [r6, #7]
     2b2:	79f5      	ldrb	r5, [r6, #7]
     2b4:	46ac      	mov	ip, r5
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     2b6:	4655      	mov	r5, sl
     2b8:	4666      	mov	r6, ip
     2ba:	555e      	strb	r6, [r3, r5]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     2bc:	4645      	mov	r5, r8
     2be:	5d5d      	ldrb	r5, [r3, r5]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     2c0:	403d      	ands	r5, r7
	tmp |= PORT_PMUX_PMUXO(data);
     2c2:	465e      	mov	r6, fp
     2c4:	4335      	orrs	r5, r6
     2c6:	466e      	mov	r6, sp
     2c8:	71f5      	strb	r5, [r6, #7]
     2ca:	79f5      	ldrb	r5, [r6, #7]
     2cc:	46ac      	mov	ip, r5
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     2ce:	4645      	mov	r5, r8
     2d0:	4666      	mov	r6, ip
     2d2:	555e      	strb	r6, [r3, r5]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     2d4:	35cd      	adds	r5, #205	; 0xcd
     2d6:	6065      	str	r5, [r4, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     2d8:	4d4d      	ldr	r5, [pc, #308]	; (410 <ADC_0_PORT_init+0x254>)
     2da:	629d      	str	r5, [r3, #40]	; 0x28
     2dc:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     2de:	2548      	movs	r5, #72	; 0x48
     2e0:	46a8      	mov	r8, r5
     2e2:	5d5d      	ldrb	r5, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     2e4:	438d      	bics	r5, r1
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     2e6:	4315      	orrs	r5, r2
     2e8:	466e      	mov	r6, sp
     2ea:	71f5      	strb	r5, [r6, #7]
     2ec:	79f5      	ldrb	r5, [r6, #7]
     2ee:	46ac      	mov	ip, r5
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     2f0:	4645      	mov	r5, r8
     2f2:	4666      	mov	r6, ip
     2f4:	555e      	strb	r6, [r3, r5]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     2f6:	3d14      	subs	r5, #20
     2f8:	46a8      	mov	r8, r5
     2fa:	5d5d      	ldrb	r5, [r3, r5]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     2fc:	464e      	mov	r6, r9
     2fe:	43b5      	bics	r5, r6
	tmp |= PORT_PMUX_PMUXE(data);
     300:	4315      	orrs	r5, r2
     302:	466e      	mov	r6, sp
     304:	71f5      	strb	r5, [r6, #7]
     306:	79f5      	ldrb	r5, [r6, #7]
     308:	46ac      	mov	ip, r5
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     30a:	4645      	mov	r5, r8
     30c:	4666      	mov	r6, ip
     30e:	555e      	strb	r6, [r3, r5]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     310:	35cd      	adds	r5, #205	; 0xcd
     312:	35ff      	adds	r5, #255	; 0xff
     314:	6065      	str	r5, [r4, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     316:	4d3f      	ldr	r5, [pc, #252]	; (414 <ADC_0_PORT_init+0x258>)
     318:	629d      	str	r5, [r3, #40]	; 0x28
     31a:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     31c:	2549      	movs	r5, #73	; 0x49
     31e:	46aa      	mov	sl, r5
     320:	5d5d      	ldrb	r5, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     322:	438d      	bics	r5, r1
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     324:	4315      	orrs	r5, r2
     326:	466e      	mov	r6, sp
     328:	71f5      	strb	r5, [r6, #7]
     32a:	79f5      	ldrb	r5, [r6, #7]
     32c:	46ac      	mov	ip, r5
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     32e:	4655      	mov	r5, sl
     330:	4666      	mov	r6, ip
     332:	555e      	strb	r6, [r3, r5]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     334:	4645      	mov	r5, r8
     336:	5d5d      	ldrb	r5, [r3, r5]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     338:	403d      	ands	r5, r7
	tmp |= PORT_PMUX_PMUXO(data);
     33a:	465e      	mov	r6, fp
     33c:	4335      	orrs	r5, r6
     33e:	466e      	mov	r6, sp
     340:	71f5      	strb	r5, [r6, #7]
     342:	79f5      	ldrb	r5, [r6, #7]
     344:	46ac      	mov	ip, r5
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     346:	4645      	mov	r5, r8
     348:	4666      	mov	r6, ip
     34a:	555e      	strb	r6, [r3, r5]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     34c:	2580      	movs	r5, #128	; 0x80
     34e:	00ed      	lsls	r5, r5, #3
     350:	6065      	str	r5, [r4, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     352:	4d31      	ldr	r5, [pc, #196]	; (418 <ADC_0_PORT_init+0x25c>)
     354:	629d      	str	r5, [r3, #40]	; 0x28
     356:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     358:	254a      	movs	r5, #74	; 0x4a
     35a:	46a8      	mov	r8, r5
     35c:	5d5d      	ldrb	r5, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     35e:	438d      	bics	r5, r1
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     360:	4315      	orrs	r5, r2
     362:	466e      	mov	r6, sp
     364:	71f5      	strb	r5, [r6, #7]
     366:	79f5      	ldrb	r5, [r6, #7]
     368:	46ac      	mov	ip, r5
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     36a:	4645      	mov	r5, r8
     36c:	4666      	mov	r6, ip
     36e:	555e      	strb	r6, [r3, r5]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     370:	3d15      	subs	r5, #21
     372:	46a8      	mov	r8, r5
     374:	5d5d      	ldrb	r5, [r3, r5]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     376:	464e      	mov	r6, r9
     378:	43b5      	bics	r5, r6
	tmp |= PORT_PMUX_PMUXE(data);
     37a:	4315      	orrs	r5, r2
     37c:	466e      	mov	r6, sp
     37e:	71f5      	strb	r5, [r6, #7]
     380:	79f5      	ldrb	r5, [r6, #7]
     382:	46ac      	mov	ip, r5
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     384:	4645      	mov	r5, r8
     386:	4666      	mov	r6, ip
     388:	555e      	strb	r6, [r3, r5]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     38a:	2580      	movs	r5, #128	; 0x80
     38c:	012d      	lsls	r5, r5, #4
     38e:	6065      	str	r5, [r4, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     390:	4d22      	ldr	r5, [pc, #136]	; (41c <ADC_0_PORT_init+0x260>)
     392:	629d      	str	r5, [r3, #40]	; 0x28
     394:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     396:	254b      	movs	r5, #75	; 0x4b
     398:	46a9      	mov	r9, r5
     39a:	5d5d      	ldrb	r5, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     39c:	438d      	bics	r5, r1
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     39e:	4315      	orrs	r5, r2
     3a0:	466e      	mov	r6, sp
     3a2:	71f5      	strb	r5, [r6, #7]
     3a4:	79f5      	ldrb	r5, [r6, #7]
     3a6:	46ac      	mov	ip, r5
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3a8:	464d      	mov	r5, r9
     3aa:	4666      	mov	r6, ip
     3ac:	555e      	strb	r6, [r3, r5]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3ae:	4645      	mov	r5, r8
     3b0:	5d5d      	ldrb	r5, [r3, r5]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     3b2:	403d      	ands	r5, r7
	tmp |= PORT_PMUX_PMUXO(data);
     3b4:	465e      	mov	r6, fp
     3b6:	4335      	orrs	r5, r6
     3b8:	466e      	mov	r6, sp
     3ba:	71f5      	strb	r5, [r6, #7]
     3bc:	79f5      	ldrb	r5, [r6, #7]
     3be:	46ac      	mov	ip, r5
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3c0:	4645      	mov	r5, r8
     3c2:	4666      	mov	r6, ip
     3c4:	555e      	strb	r6, [r3, r5]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     3c6:	3d2d      	subs	r5, #45	; 0x2d
     3c8:	6065      	str	r5, [r4, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3ca:	4c15      	ldr	r4, [pc, #84]	; (420 <ADC_0_PORT_init+0x264>)
     3cc:	629c      	str	r4, [r3, #40]	; 0x28
     3ce:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3d0:	2443      	movs	r4, #67	; 0x43
     3d2:	5d18      	ldrb	r0, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     3d4:	4388      	bics	r0, r1
     3d6:	0001      	movs	r1, r0
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3d8:	4311      	orrs	r1, r2
     3da:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3dc:	5519      	strb	r1, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3de:	2231      	movs	r2, #49	; 0x31
     3e0:	5c9a      	ldrb	r2, [r3, r2]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     3e2:	403a      	ands	r2, r7
	tmp |= PORT_PMUX_PMUXO(data);
     3e4:	4659      	mov	r1, fp
     3e6:	430a      	orrs	r2, r1
     3e8:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3ea:	2131      	movs	r1, #49	; 0x31
     3ec:	545a      	strb	r2, [r3, r1]

	// Disable digital pin circuitry
	gpio_set_pin_direction(PA03, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(PA03, PINMUX_PA03B_ADC0_VREFP);
}
     3ee:	b003      	add	sp, #12
     3f0:	bc3c      	pop	{r2, r3, r4, r5}
     3f2:	4690      	mov	r8, r2
     3f4:	4699      	mov	r9, r3
     3f6:	46a2      	mov	sl, r4
     3f8:	46ab      	mov	fp, r5
     3fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
     3fc:	40000004 	.word	0x40000004
     400:	40000010 	.word	0x40000010
     404:	40000020 	.word	0x40000020
     408:	40000040 	.word	0x40000040
     40c:	40000080 	.word	0x40000080
     410:	40000100 	.word	0x40000100
     414:	40000200 	.word	0x40000200
     418:	40000400 	.word	0x40000400
     41c:	40000800 	.word	0x40000800
     420:	40000008 	.word	0x40000008

00000424 <ADC_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBCMASK_ADC0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_ADC0;
     424:	4a05      	ldr	r2, [pc, #20]	; (43c <ADC_0_CLOCK_init+0x18>)
     426:	69d1      	ldr	r1, [r2, #28]
     428:	2380      	movs	r3, #128	; 0x80
     42a:	029b      	lsls	r3, r3, #10
     42c:	430b      	orrs	r3, r1
     42e:	61d3      	str	r3, [r2, #28]
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     430:	2141      	movs	r1, #65	; 0x41
     432:	2382      	movs	r3, #130	; 0x82
     434:	005b      	lsls	r3, r3, #1
     436:	4a02      	ldr	r2, [pc, #8]	; (440 <ADC_0_CLOCK_init+0x1c>)
     438:	50d1      	str	r1, [r2, r3]

void ADC_0_CLOCK_init(void)
{
	hri_mclk_set_APBCMASK_ADC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC0_GCLK_ID, CONF_GCLK_ADC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}
     43a:	4770      	bx	lr
     43c:	40000800 	.word	0x40000800
     440:	40001c00 	.word	0x40001c00

00000444 <ADC_0_init>:

void ADC_0_init(void)
{
     444:	b510      	push	{r4, lr}
	ADC_0_CLOCK_init();
     446:	4b06      	ldr	r3, [pc, #24]	; (460 <ADC_0_init+0x1c>)
     448:	4798      	blx	r3
	ADC_0_PORT_init();
     44a:	4b06      	ldr	r3, [pc, #24]	; (464 <ADC_0_init+0x20>)
     44c:	4798      	blx	r3
	adc_sync_init(&ADC_0, ADC0, _adc_get_adc_sync());
     44e:	4b06      	ldr	r3, [pc, #24]	; (468 <ADC_0_init+0x24>)
     450:	4798      	blx	r3
     452:	0002      	movs	r2, r0
     454:	4905      	ldr	r1, [pc, #20]	; (46c <ADC_0_init+0x28>)
     456:	4806      	ldr	r0, [pc, #24]	; (470 <ADC_0_init+0x2c>)
     458:	4b06      	ldr	r3, [pc, #24]	; (474 <ADC_0_init+0x30>)
     45a:	4798      	blx	r3
}
     45c:	bd10      	pop	{r4, pc}
     45e:	46c0      	nop			; (mov r8, r8)
     460:	00000425 	.word	0x00000425
     464:	000001bd 	.word	0x000001bd
     468:	00000de5 	.word	0x00000de5
     46c:	42004400 	.word	0x42004400
     470:	20000100 	.word	0x20000100
     474:	00000761 	.word	0x00000761

00000478 <DEBUG_UART_PORT_init>:

void DEBUG_UART_PORT_init(void)
{
     478:	b530      	push	{r4, r5, lr}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     47a:	2382      	movs	r3, #130	; 0x82
     47c:	05db      	lsls	r3, r3, #23
     47e:	2250      	movs	r2, #80	; 0x50
     480:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     482:	2501      	movs	r5, #1
     484:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     486:	2401      	movs	r4, #1
     488:	4321      	orrs	r1, r4
     48a:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     48c:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     48e:	2038      	movs	r0, #56	; 0x38
     490:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     492:	3a41      	subs	r2, #65	; 0x41
     494:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     496:	3a0c      	subs	r2, #12
     498:	4311      	orrs	r1, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     49a:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     49c:	2151      	movs	r1, #81	; 0x51
     49e:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     4a0:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     4a2:	4322      	orrs	r2, r4
     4a4:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4a6:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4a8:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     4aa:	3942      	subs	r1, #66	; 0x42
     4ac:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     4ae:	3121      	adds	r1, #33	; 0x21
     4b0:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4b2:	541a      	strb	r2, [r3, r0]

	gpio_set_pin_function(PA16, PINMUX_PA16D_SERCOM3_PAD0);

	gpio_set_pin_function(PA17, PINMUX_PA17D_SERCOM3_PAD1);
}
     4b4:	bd30      	pop	{r4, r5, pc}
	...

000004b8 <DEBUG_UART_CLOCK_init>:
     4b8:	4b06      	ldr	r3, [pc, #24]	; (4d4 <DEBUG_UART_CLOCK_init+0x1c>)
     4ba:	2140      	movs	r1, #64	; 0x40
     4bc:	22d8      	movs	r2, #216	; 0xd8
     4be:	5099      	str	r1, [r3, r2]
     4c0:	3102      	adds	r1, #2
     4c2:	3a10      	subs	r2, #16
     4c4:	5099      	str	r1, [r3, r2]
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_SERCOM3;
     4c6:	4a04      	ldr	r2, [pc, #16]	; (4d8 <DEBUG_UART_CLOCK_init+0x20>)
     4c8:	69d3      	ldr	r3, [r2, #28]
     4ca:	3932      	subs	r1, #50	; 0x32
     4cc:	430b      	orrs	r3, r1
     4ce:	61d3      	str	r3, [r2, #28]
void DEBUG_UART_CLOCK_init(void)
{
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM3_GCLK_ID_CORE, CONF_GCLK_SERCOM3_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM3_GCLK_ID_SLOW, CONF_GCLK_SERCOM3_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_mclk_set_APBCMASK_SERCOM3_bit(MCLK);
}
     4d0:	4770      	bx	lr
     4d2:	46c0      	nop			; (mov r8, r8)
     4d4:	40001c00 	.word	0x40001c00
     4d8:	40000800 	.word	0x40000800

000004dc <DEBUG_UART_init>:

void DEBUG_UART_init(void)
{
     4dc:	b510      	push	{r4, lr}
	DEBUG_UART_CLOCK_init();
     4de:	4b05      	ldr	r3, [pc, #20]	; (4f4 <DEBUG_UART_init+0x18>)
     4e0:	4798      	blx	r3
	usart_sync_init(&DEBUG_UART, SERCOM3, (void *)NULL);
     4e2:	2200      	movs	r2, #0
     4e4:	4904      	ldr	r1, [pc, #16]	; (4f8 <DEBUG_UART_init+0x1c>)
     4e6:	4805      	ldr	r0, [pc, #20]	; (4fc <DEBUG_UART_init+0x20>)
     4e8:	4b05      	ldr	r3, [pc, #20]	; (500 <DEBUG_UART_init+0x24>)
     4ea:	4798      	blx	r3
	DEBUG_UART_PORT_init();
     4ec:	4b05      	ldr	r3, [pc, #20]	; (504 <DEBUG_UART_init+0x28>)
     4ee:	4798      	blx	r3
}
     4f0:	bd10      	pop	{r4, pc}
     4f2:	46c0      	nop			; (mov r8, r8)
     4f4:	000004b9 	.word	0x000004b9
     4f8:	42001000 	.word	0x42001000
     4fc:	20000104 	.word	0x20000104
     500:	00000ad1 	.word	0x00000ad1
     504:	00000479 	.word	0x00000479

00000508 <CAN_0_PORT_init>:

void CAN_0_PORT_init(void)
{
     508:	b530      	push	{r4, r5, lr}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     50a:	2382      	movs	r3, #130	; 0x82
     50c:	05db      	lsls	r3, r3, #23
     50e:	22d7      	movs	r2, #215	; 0xd7
     510:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     512:	2501      	movs	r5, #1
     514:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     516:	2401      	movs	r4, #1
     518:	4321      	orrs	r1, r4
     51a:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     51c:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     51e:	20bb      	movs	r0, #187	; 0xbb
     520:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     522:	3ac8      	subs	r2, #200	; 0xc8
     524:	4011      	ands	r1, r2
	tmp |= PORT_PMUX_PMUXO(data);
     526:	3251      	adds	r2, #81	; 0x51
     528:	4311      	orrs	r1, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     52a:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     52c:	21d6      	movs	r1, #214	; 0xd6
     52e:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     530:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     532:	4322      	orrs	r2, r4
     534:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     536:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     538:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     53a:	39c7      	subs	r1, #199	; 0xc7
     53c:	438a      	bics	r2, r1
	tmp |= PORT_PMUX_PMUXE(data);
     53e:	3909      	subs	r1, #9
     540:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     542:	541a      	strb	r2, [r3, r0]

	gpio_set_pin_function(PB23, PINMUX_PB23G_CAN0_RX);

	gpio_set_pin_function(PB22, PINMUX_PB22G_CAN0_TX);
}
     544:	bd30      	pop	{r4, r5, pc}
	...

00000548 <CAN_0_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_0_init(void)
{
     548:	b510      	push	{r4, lr}
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_CAN0;
     54a:	4a08      	ldr	r2, [pc, #32]	; (56c <CAN_0_init+0x24>)
     54c:	6911      	ldr	r1, [r2, #16]
     54e:	2380      	movs	r3, #128	; 0x80
     550:	005b      	lsls	r3, r3, #1
     552:	430b      	orrs	r3, r1
     554:	6113      	str	r3, [r2, #16]
     556:	2143      	movs	r1, #67	; 0x43
     558:	23e8      	movs	r3, #232	; 0xe8
     55a:	4a05      	ldr	r2, [pc, #20]	; (570 <CAN_0_init+0x28>)
     55c:	50d1      	str	r1, [r2, r3]
	hri_mclk_set_AHBMASK_CAN0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, CAN0_GCLK_ID, CONF_GCLK_CAN0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	can_async_init(&CAN_0, CAN0);
     55e:	4905      	ldr	r1, [pc, #20]	; (574 <CAN_0_init+0x2c>)
     560:	4805      	ldr	r0, [pc, #20]	; (578 <CAN_0_init+0x30>)
     562:	4b06      	ldr	r3, [pc, #24]	; (57c <CAN_0_init+0x34>)
     564:	4798      	blx	r3
	CAN_0_PORT_init();
     566:	4b06      	ldr	r3, [pc, #24]	; (580 <CAN_0_init+0x38>)
     568:	4798      	blx	r3
}
     56a:	bd10      	pop	{r4, pc}
     56c:	40000800 	.word	0x40000800
     570:	40001c00 	.word	0x40001c00
     574:	42001c00 	.word	0x42001c00
     578:	200000d4 	.word	0x200000d4
     57c:	000008a5 	.word	0x000008a5
     580:	00000509 	.word	0x00000509

00000584 <TEMPERATURE_SENSOR_0_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TSENS;
     584:	4a05      	ldr	r2, [pc, #20]	; (59c <TEMPERATURE_SENSOR_0_CLOCK_init+0x18>)
     586:	6951      	ldr	r1, [r2, #20]
     588:	2380      	movs	r3, #128	; 0x80
     58a:	015b      	lsls	r3, r3, #5
     58c:	430b      	orrs	r3, r1
     58e:	6153      	str	r3, [r2, #20]
     590:	2141      	movs	r1, #65	; 0x41
     592:	2394      	movs	r3, #148	; 0x94
     594:	4a02      	ldr	r2, [pc, #8]	; (5a0 <TEMPERATURE_SENSOR_0_CLOCK_init+0x1c>)
     596:	50d1      	str	r1, [r2, r3]
void TEMPERATURE_SENSOR_0_CLOCK_init(void)
{
	hri_mclk_set_APBAMASK_TSENS_bit(MCLK);

	hri_gclk_write_PCHCTRL_reg(GCLK, TSENS_GCLK_ID, CONF_GCLK_TSENS_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}
     598:	4770      	bx	lr
     59a:	46c0      	nop			; (mov r8, r8)
     59c:	40000800 	.word	0x40000800
     5a0:	40001c00 	.word	0x40001c00

000005a4 <TEMPERATURE_SENSOR_0_init>:

void TEMPERATURE_SENSOR_0_init(void)
{
     5a4:	b510      	push	{r4, lr}
	TEMPERATURE_SENSOR_0_CLOCK_init();
     5a6:	4b03      	ldr	r3, [pc, #12]	; (5b4 <TEMPERATURE_SENSOR_0_init+0x10>)
     5a8:	4798      	blx	r3
	temp_sync_init(&TEMPERATURE_SENSOR_0, TSENS);
     5aa:	4903      	ldr	r1, [pc, #12]	; (5b8 <TEMPERATURE_SENSOR_0_init+0x14>)
     5ac:	4803      	ldr	r0, [pc, #12]	; (5bc <TEMPERATURE_SENSOR_0_init+0x18>)
     5ae:	4b04      	ldr	r3, [pc, #16]	; (5c0 <TEMPERATURE_SENSOR_0_init+0x1c>)
     5b0:	4798      	blx	r3
}
     5b2:	bd10      	pop	{r4, pc}
     5b4:	00000585 	.word	0x00000585
     5b8:	40003000 	.word	0x40003000
     5bc:	200000fc 	.word	0x200000fc
     5c0:	0000095d 	.word	0x0000095d

000005c4 <system_init>:

void system_init(void)
{
     5c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     5c6:	4b54      	ldr	r3, [pc, #336]	; (718 <system_init+0x154>)
     5c8:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     5ca:	22c0      	movs	r2, #192	; 0xc0
     5cc:	05d2      	lsls	r2, r2, #23
     5ce:	2101      	movs	r1, #1
     5d0:	6051      	str	r1, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     5d2:	2382      	movs	r3, #130	; 0x82
     5d4:	05db      	lsls	r3, r3, #23
     5d6:	4851      	ldr	r0, [pc, #324]	; (71c <system_init+0x158>)
     5d8:	6298      	str	r0, [r3, #40]	; 0x28
     5da:	4f51      	ldr	r7, [pc, #324]	; (720 <system_init+0x15c>)
     5dc:	629f      	str	r7, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     5de:	6051      	str	r1, [r2, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     5e0:	2040      	movs	r0, #64	; 0x40
     5e2:	5c1c      	ldrb	r4, [r3, r0]
     5e4:	2504      	movs	r5, #4
     5e6:	2604      	movs	r6, #4
     5e8:	4334      	orrs	r4, r6
     5ea:	b2e4      	uxtb	r4, r4
     5ec:	541c      	strb	r4, [r3, r0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     5ee:	6151      	str	r1, [r2, #20]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5f0:	5c1c      	ldrb	r4, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     5f2:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5f4:	541c      	strb	r4, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     5f6:	2080      	movs	r0, #128	; 0x80
     5f8:	0140      	lsls	r0, r0, #5
     5fa:	4684      	mov	ip, r0
     5fc:	6050      	str	r0, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     5fe:	4849      	ldr	r0, [pc, #292]	; (724 <system_init+0x160>)
     600:	6298      	str	r0, [r3, #40]	; 0x28
     602:	629f      	str	r7, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     604:	4660      	mov	r0, ip
     606:	6050      	str	r0, [r2, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     608:	204c      	movs	r0, #76	; 0x4c
     60a:	5c1c      	ldrb	r4, [r3, r0]
     60c:	4334      	orrs	r4, r6
     60e:	b2e4      	uxtb	r4, r4
     610:	541c      	strb	r4, [r3, r0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     612:	4664      	mov	r4, ip
     614:	6194      	str	r4, [r2, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     616:	5c1c      	ldrb	r4, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     618:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     61a:	541c      	strb	r4, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     61c:	2080      	movs	r0, #128	; 0x80
     61e:	0180      	lsls	r0, r0, #6
     620:	4684      	mov	ip, r0
     622:	6050      	str	r0, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     624:	4840      	ldr	r0, [pc, #256]	; (728 <system_init+0x164>)
     626:	6298      	str	r0, [r3, #40]	; 0x28
     628:	629f      	str	r7, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     62a:	4660      	mov	r0, ip
     62c:	6050      	str	r0, [r2, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     62e:	244d      	movs	r4, #77	; 0x4d
     630:	5d18      	ldrb	r0, [r3, r4]
     632:	4330      	orrs	r0, r6
     634:	b2c0      	uxtb	r0, r0
     636:	5518      	strb	r0, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     638:	4660      	mov	r0, ip
     63a:	6190      	str	r0, [r2, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     63c:	5d18      	ldrb	r0, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     63e:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     640:	5518      	strb	r0, [r3, r4]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     642:	2080      	movs	r0, #128	; 0x80
     644:	02c0      	lsls	r0, r0, #11
     646:	6050      	str	r0, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     648:	4c38      	ldr	r4, [pc, #224]	; (72c <system_init+0x168>)
     64a:	629c      	str	r4, [r3, #40]	; 0x28
     64c:	4838      	ldr	r0, [pc, #224]	; (730 <system_init+0x16c>)
     64e:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     650:	2052      	movs	r0, #82	; 0x52
     652:	5c1e      	ldrb	r6, [r3, r0]
     654:	43ae      	bics	r6, r5
     656:	541e      	strb	r6, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     658:	5c1e      	ldrb	r6, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     65a:	438e      	bics	r6, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     65c:	541e      	strb	r6, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     65e:	2080      	movs	r0, #128	; 0x80
     660:	0300      	lsls	r0, r0, #12
     662:	6050      	str	r0, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     664:	629c      	str	r4, [r3, #40]	; 0x28
     666:	4833      	ldr	r0, [pc, #204]	; (734 <system_init+0x170>)
     668:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     66a:	2053      	movs	r0, #83	; 0x53
     66c:	5c1e      	ldrb	r6, [r3, r0]
     66e:	43ae      	bics	r6, r5
     670:	541e      	strb	r6, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     672:	5c1e      	ldrb	r6, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     674:	438e      	bics	r6, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     676:	541e      	strb	r6, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     678:	2080      	movs	r0, #128	; 0x80
     67a:	0340      	lsls	r0, r0, #13
     67c:	6050      	str	r0, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     67e:	629c      	str	r4, [r3, #40]	; 0x28
     680:	482d      	ldr	r0, [pc, #180]	; (738 <system_init+0x174>)
     682:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     684:	2054      	movs	r0, #84	; 0x54
     686:	5c1c      	ldrb	r4, [r3, r0]
     688:	43ac      	bics	r4, r5
     68a:	541c      	strb	r4, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     68c:	5c1c      	ldrb	r4, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     68e:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     690:	541c      	strb	r4, [r3, r0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     692:	2080      	movs	r0, #128	; 0x80
     694:	0380      	lsls	r0, r0, #14
     696:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     698:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     69a:	2080      	movs	r0, #128	; 0x80
     69c:	05c0      	lsls	r0, r0, #23
     69e:	6298      	str	r0, [r3, #40]	; 0x28
     6a0:	4c26      	ldr	r4, [pc, #152]	; (73c <system_init+0x178>)
     6a2:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     6a4:	3551      	adds	r5, #81	; 0x51
     6a6:	5d5c      	ldrb	r4, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     6a8:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6aa:	555c      	strb	r4, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     6ac:	2480      	movs	r4, #128	; 0x80
     6ae:	03e4      	lsls	r4, r4, #15
     6b0:	6194      	str	r4, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     6b2:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     6b4:	6298      	str	r0, [r3, #40]	; 0x28
     6b6:	4c22      	ldr	r4, [pc, #136]	; (740 <system_init+0x17c>)
     6b8:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     6ba:	3501      	adds	r5, #1
     6bc:	5d5c      	ldrb	r4, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     6be:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6c0:	555c      	strb	r4, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     6c2:	2480      	movs	r4, #128	; 0x80
     6c4:	0424      	lsls	r4, r4, #16
     6c6:	6154      	str	r4, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     6c8:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     6ca:	6298      	str	r0, [r3, #40]	; 0x28
     6cc:	4c1d      	ldr	r4, [pc, #116]	; (744 <system_init+0x180>)
     6ce:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     6d0:	3501      	adds	r5, #1
     6d2:	5d5c      	ldrb	r4, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     6d4:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6d6:	555c      	strb	r4, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     6d8:	2480      	movs	r4, #128	; 0x80
     6da:	0524      	lsls	r4, r4, #20
     6dc:	6194      	str	r4, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     6de:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     6e0:	6298      	str	r0, [r3, #40]	; 0x28
     6e2:	4c19      	ldr	r4, [pc, #100]	; (748 <system_init+0x184>)
     6e4:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     6e6:	3504      	adds	r5, #4
     6e8:	5d5c      	ldrb	r4, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     6ea:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6ec:	555c      	strb	r4, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     6ee:	2480      	movs	r4, #128	; 0x80
     6f0:	0564      	lsls	r4, r4, #21
     6f2:	6194      	str	r4, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     6f4:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     6f6:	6298      	str	r0, [r3, #40]	; 0x28
     6f8:	4a14      	ldr	r2, [pc, #80]	; (74c <system_init+0x188>)
     6fa:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     6fc:	205c      	movs	r0, #92	; 0x5c
     6fe:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     700:	438a      	bics	r2, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     702:	541a      	strb	r2, [r3, r0]
	// Set pin direction to output
	gpio_set_pin_direction(CAN0_STBY, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(CAN0_STBY, GPIO_PIN_FUNCTION_OFF);

	ADC_0_init();
     704:	4b12      	ldr	r3, [pc, #72]	; (750 <system_init+0x18c>)
     706:	4798      	blx	r3

	DEBUG_UART_init();
     708:	4b12      	ldr	r3, [pc, #72]	; (754 <system_init+0x190>)
     70a:	4798      	blx	r3
	CAN_0_init();
     70c:	4b12      	ldr	r3, [pc, #72]	; (758 <system_init+0x194>)
     70e:	4798      	blx	r3

	TEMPERATURE_SENSOR_0_init();
     710:	4b12      	ldr	r3, [pc, #72]	; (75c <system_init+0x198>)
     712:	4798      	blx	r3
}
     714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     716:	46c0      	nop			; (mov r8, r8)
     718:	00000f71 	.word	0x00000f71
     71c:	40020001 	.word	0x40020001
     720:	c0020000 	.word	0xc0020000
     724:	40021000 	.word	0x40021000
     728:	40022000 	.word	0x40022000
     72c:	40020000 	.word	0x40020000
     730:	c0020004 	.word	0xc0020004
     734:	c0020008 	.word	0xc0020008
     738:	c0020010 	.word	0xc0020010
     73c:	c0000020 	.word	0xc0000020
     740:	c0000040 	.word	0xc0000040
     744:	c0000080 	.word	0xc0000080
     748:	c0000800 	.word	0xc0000800
     74c:	c0001000 	.word	0xc0001000
     750:	00000445 	.word	0x00000445
     754:	000004dd 	.word	0x000004dd
     758:	00000549 	.word	0x00000549
     75c:	000005a5 	.word	0x000005a5

00000760 <adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t adc_sync_init(struct adc_sync_descriptor *const descr, void *const hw, void *const func)
{
     760:	b570      	push	{r4, r5, r6, lr}
     762:	0004      	movs	r4, r0
     764:	000d      	movs	r5, r1
	ASSERT(descr && hw);
     766:	2800      	cmp	r0, #0
     768:	d00c      	beq.n	784 <adc_sync_init+0x24>
     76a:	0008      	movs	r0, r1
     76c:	1e43      	subs	r3, r0, #1
     76e:	4198      	sbcs	r0, r3
     770:	b2c0      	uxtb	r0, r0
     772:	2239      	movs	r2, #57	; 0x39
     774:	4904      	ldr	r1, [pc, #16]	; (788 <adc_sync_init+0x28>)
     776:	4b05      	ldr	r3, [pc, #20]	; (78c <adc_sync_init+0x2c>)
     778:	4798      	blx	r3

	return _adc_sync_init(&descr->device, hw);
     77a:	0029      	movs	r1, r5
     77c:	0020      	movs	r0, r4
     77e:	4b04      	ldr	r3, [pc, #16]	; (790 <adc_sync_init+0x30>)
     780:	4798      	blx	r3
}
     782:	bd70      	pop	{r4, r5, r6, pc}
     784:	2000      	movs	r0, #0
     786:	e7f4      	b.n	772 <adc_sync_init+0x12>
     788:	00003ebc 	.word	0x00003ebc
     78c:	00000b49 	.word	0x00000b49
     790:	00000d29 	.word	0x00000d29

00000794 <adc_sync_enable_channel>:

/**
 * \brief Enable ADC
 */
int32_t adc_sync_enable_channel(struct adc_sync_descriptor *const descr, const uint8_t channel)
{
     794:	b570      	push	{r4, r5, r6, lr}
     796:	0004      	movs	r4, r0
     798:	000d      	movs	r5, r1
	ASSERT(descr);
     79a:	1e43      	subs	r3, r0, #1
     79c:	4198      	sbcs	r0, r3
     79e:	b2c0      	uxtb	r0, r0
     7a0:	224e      	movs	r2, #78	; 0x4e
     7a2:	4904      	ldr	r1, [pc, #16]	; (7b4 <adc_sync_enable_channel+0x20>)
     7a4:	4b04      	ldr	r3, [pc, #16]	; (7b8 <adc_sync_enable_channel+0x24>)
     7a6:	4798      	blx	r3
	_adc_sync_enable_channel(&descr->device, channel);
     7a8:	0029      	movs	r1, r5
     7aa:	0020      	movs	r0, r4
     7ac:	4b03      	ldr	r3, [pc, #12]	; (7bc <adc_sync_enable_channel+0x28>)
     7ae:	4798      	blx	r3

	return ERR_NONE;
}
     7b0:	2000      	movs	r0, #0
     7b2:	bd70      	pop	{r4, r5, r6, pc}
     7b4:	00003ebc 	.word	0x00003ebc
     7b8:	00000b49 	.word	0x00000b49
     7bc:	00000d61 	.word	0x00000d61

000007c0 <adc_sync_read_channel>:
/*
 * \brief Read data from ADC
 */
int32_t adc_sync_read_channel(struct adc_sync_descriptor *const descr, const uint8_t channel, uint8_t *const buffer,
                              const uint16_t length)
{
     7c0:	b5f0      	push	{r4, r5, r6, r7, lr}
     7c2:	46de      	mov	lr, fp
     7c4:	4657      	mov	r7, sl
     7c6:	464e      	mov	r6, r9
     7c8:	4645      	mov	r5, r8
     7ca:	b5e0      	push	{r5, r6, r7, lr}
     7cc:	b083      	sub	sp, #12
     7ce:	0006      	movs	r6, r0
     7d0:	000d      	movs	r5, r1
     7d2:	4691      	mov	r9, r2
     7d4:	9301      	str	r3, [sp, #4]
	uint8_t  data_size;
	uint16_t offset = 0;

	ASSERT(descr && buffer && length);
     7d6:	2800      	cmp	r0, #0
     7d8:	d01e      	beq.n	818 <adc_sync_read_channel+0x58>
     7da:	2a00      	cmp	r2, #0
     7dc:	d01e      	beq.n	81c <adc_sync_read_channel+0x5c>
     7de:	0018      	movs	r0, r3
     7e0:	1e43      	subs	r3, r0, #1
     7e2:	4198      	sbcs	r0, r3
     7e4:	2267      	movs	r2, #103	; 0x67
     7e6:	491f      	ldr	r1, [pc, #124]	; (864 <adc_sync_read_channel+0xa4>)
     7e8:	4f1f      	ldr	r7, [pc, #124]	; (868 <adc_sync_read_channel+0xa8>)
     7ea:	47b8      	blx	r7
	data_size = _adc_sync_get_data_size(&descr->device);
     7ec:	0034      	movs	r4, r6
     7ee:	0030      	movs	r0, r6
     7f0:	4b1e      	ldr	r3, [pc, #120]	; (86c <adc_sync_read_channel+0xac>)
     7f2:	4798      	blx	r3
     7f4:	0001      	movs	r1, r0
     7f6:	4680      	mov	r8, r0
	ASSERT(!(length % data_size));
     7f8:	9801      	ldr	r0, [sp, #4]
     7fa:	4b1d      	ldr	r3, [pc, #116]	; (870 <adc_sync_read_channel+0xb0>)
     7fc:	4798      	blx	r3
     7fe:	4248      	negs	r0, r1
     800:	4148      	adcs	r0, r1
     802:	b2c0      	uxtb	r0, r0
     804:	2269      	movs	r2, #105	; 0x69
     806:	4917      	ldr	r1, [pc, #92]	; (864 <adc_sync_read_channel+0xa4>)
     808:	47b8      	blx	r7
	uint16_t offset = 0;
     80a:	2700      	movs	r7, #0

	do {
		uint16_t result;
		_adc_sync_convert(&descr->device);
     80c:	4b19      	ldr	r3, [pc, #100]	; (874 <adc_sync_read_channel+0xb4>)
     80e:	469b      	mov	fp, r3

		while (!_adc_sync_is_channel_conversion_done(&descr->device, channel))
     810:	4e19      	ldr	r6, [pc, #100]	; (878 <adc_sync_read_channel+0xb8>)
			;

		result         = _adc_sync_read_channel_data(&descr->device, channel);
     812:	4b1a      	ldr	r3, [pc, #104]	; (87c <adc_sync_read_channel+0xbc>)
     814:	469a      	mov	sl, r3
     816:	e008      	b.n	82a <adc_sync_read_channel+0x6a>
	ASSERT(descr && buffer && length);
     818:	2000      	movs	r0, #0
     81a:	e7e3      	b.n	7e4 <adc_sync_read_channel+0x24>
     81c:	2000      	movs	r0, #0
     81e:	e7e1      	b.n	7e4 <adc_sync_read_channel+0x24>
     820:	4447      	add	r7, r8
     822:	b2bf      	uxth	r7, r7
		buffer[offset] = result;
		if (1 < data_size) {
			buffer[offset + 1] = result >> 8;
		}
		offset += data_size;
	} while (offset < length);
     824:	9b01      	ldr	r3, [sp, #4]
     826:	42bb      	cmp	r3, r7
     828:	d913      	bls.n	852 <adc_sync_read_channel+0x92>
		_adc_sync_convert(&descr->device);
     82a:	0020      	movs	r0, r4
     82c:	47d8      	blx	fp
		while (!_adc_sync_is_channel_conversion_done(&descr->device, channel))
     82e:	0029      	movs	r1, r5
     830:	0020      	movs	r0, r4
     832:	47b0      	blx	r6
     834:	2800      	cmp	r0, #0
     836:	d0fa      	beq.n	82e <adc_sync_read_channel+0x6e>
		result         = _adc_sync_read_channel_data(&descr->device, channel);
     838:	0029      	movs	r1, r5
     83a:	0020      	movs	r0, r4
     83c:	47d0      	blx	sl
		buffer[offset] = result;
     83e:	464b      	mov	r3, r9
     840:	55d8      	strb	r0, [r3, r7]
		if (1 < data_size) {
     842:	4643      	mov	r3, r8
     844:	2b01      	cmp	r3, #1
     846:	d9eb      	bls.n	820 <adc_sync_read_channel+0x60>
			buffer[offset + 1] = result >> 8;
     848:	464b      	mov	r3, r9
     84a:	19db      	adds	r3, r3, r7
     84c:	0a00      	lsrs	r0, r0, #8
     84e:	7058      	strb	r0, [r3, #1]
     850:	e7e6      	b.n	820 <adc_sync_read_channel+0x60>

	return offset;
}
     852:	0038      	movs	r0, r7
     854:	b003      	add	sp, #12
     856:	bc3c      	pop	{r2, r3, r4, r5}
     858:	4690      	mov	r8, r2
     85a:	4699      	mov	r9, r3
     85c:	46a2      	mov	sl, r4
     85e:	46ab      	mov	fp, r5
     860:	bdf0      	pop	{r4, r5, r6, r7, pc}
     862:	46c0      	nop			; (mov r8, r8)
     864:	00003ebc 	.word	0x00003ebc
     868:	00000b49 	.word	0x00000b49
     86c:	00000d75 	.word	0x00000d75
     870:	00000ffd 	.word	0x00000ffd
     874:	00000d91 	.word	0x00000d91
     878:	00000d87 	.word	0x00000d87
     87c:	00000da3 	.word	0x00000da3

00000880 <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
     880:	b510      	push	{r4, lr}
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);

	if (descr->cb.tx_done) {
     882:	69c3      	ldr	r3, [r0, #28]
     884:	2b00      	cmp	r3, #0
     886:	d000      	beq.n	88a <can_tx_done+0xa>
		descr->cb.tx_done(descr);
     888:	4798      	blx	r3
	}
}
     88a:	bd10      	pop	{r4, pc}

0000088c <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
     88c:	b510      	push	{r4, lr}
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);

	if (descr->cb.rx_done) {
     88e:	6a03      	ldr	r3, [r0, #32]
     890:	2b00      	cmp	r3, #0
     892:	d000      	beq.n	896 <can_rx_done+0xa>
		descr->cb.rx_done(descr);
     894:	4798      	blx	r3
	}
}
     896:	bd10      	pop	{r4, pc}

00000898 <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
     898:	b510      	push	{r4, lr}
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);

	if (descr->cb.irq_handler) {
     89a:	6a43      	ldr	r3, [r0, #36]	; 0x24
     89c:	2b00      	cmp	r3, #0
     89e:	d000      	beq.n	8a2 <can_irq_handler+0xa>
		descr->cb.irq_handler(descr, type);
     8a0:	4798      	blx	r3
	}
}
     8a2:	bd10      	pop	{r4, pc}

000008a4 <can_async_init>:
{
     8a4:	b570      	push	{r4, r5, r6, lr}
     8a6:	0005      	movs	r5, r0
     8a8:	000c      	movs	r4, r1
	ASSERT(descr && hw);
     8aa:	2800      	cmp	r0, #0
     8ac:	d014      	beq.n	8d8 <can_async_init+0x34>
     8ae:	0008      	movs	r0, r1
     8b0:	1e43      	subs	r3, r0, #1
     8b2:	4198      	sbcs	r0, r3
     8b4:	b2c0      	uxtb	r0, r0
     8b6:	2241      	movs	r2, #65	; 0x41
     8b8:	4908      	ldr	r1, [pc, #32]	; (8dc <can_async_init+0x38>)
     8ba:	4b09      	ldr	r3, [pc, #36]	; (8e0 <can_async_init+0x3c>)
     8bc:	4798      	blx	r3
	rc = _can_async_init(&descr->dev, hw);
     8be:	0021      	movs	r1, r4
     8c0:	0028      	movs	r0, r5
     8c2:	4b08      	ldr	r3, [pc, #32]	; (8e4 <can_async_init+0x40>)
     8c4:	4798      	blx	r3
	if (rc) {
     8c6:	2800      	cmp	r0, #0
     8c8:	d105      	bne.n	8d6 <can_async_init+0x32>
	descr->dev.cb.tx_done     = can_tx_done;
     8ca:	4b07      	ldr	r3, [pc, #28]	; (8e8 <can_async_init+0x44>)
     8cc:	606b      	str	r3, [r5, #4]
	descr->dev.cb.rx_done     = can_rx_done;
     8ce:	4b07      	ldr	r3, [pc, #28]	; (8ec <can_async_init+0x48>)
     8d0:	60ab      	str	r3, [r5, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
     8d2:	4b07      	ldr	r3, [pc, #28]	; (8f0 <can_async_init+0x4c>)
     8d4:	60eb      	str	r3, [r5, #12]
}
     8d6:	bd70      	pop	{r4, r5, r6, pc}
     8d8:	2000      	movs	r0, #0
     8da:	e7ec      	b.n	8b6 <can_async_init+0x12>
     8dc:	00003ed8 	.word	0x00003ed8
     8e0:	00000b49 	.word	0x00000b49
     8e4:	00000de9 	.word	0x00000de9
     8e8:	00000881 	.word	0x00000881
     8ec:	0000088d 	.word	0x0000088d
     8f0:	00000899 	.word	0x00000899

000008f4 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     8f4:	b570      	push	{r4, r5, r6, lr}
     8f6:	0006      	movs	r6, r0
     8f8:	000c      	movs	r4, r1
     8fa:	0015      	movs	r5, r2
	ASSERT(io_descr && buf);
     8fc:	2800      	cmp	r0, #0
     8fe:	d00d      	beq.n	91c <io_write+0x28>
     900:	0008      	movs	r0, r1
     902:	1e43      	subs	r3, r0, #1
     904:	4198      	sbcs	r0, r3
     906:	b2c0      	uxtb	r0, r0
     908:	2234      	movs	r2, #52	; 0x34
     90a:	4905      	ldr	r1, [pc, #20]	; (920 <io_write+0x2c>)
     90c:	4b05      	ldr	r3, [pc, #20]	; (924 <io_write+0x30>)
     90e:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     910:	6833      	ldr	r3, [r6, #0]
     912:	002a      	movs	r2, r5
     914:	0021      	movs	r1, r4
     916:	0030      	movs	r0, r6
     918:	4798      	blx	r3
}
     91a:	bd70      	pop	{r4, r5, r6, pc}
     91c:	2000      	movs	r0, #0
     91e:	e7f3      	b.n	908 <io_write+0x14>
     920:	00003ef4 	.word	0x00003ef4
     924:	00000b49 	.word	0x00000b49

00000928 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     928:	b570      	push	{r4, r5, r6, lr}
     92a:	0006      	movs	r6, r0
     92c:	000c      	movs	r4, r1
     92e:	0015      	movs	r5, r2
	ASSERT(io_descr && buf);
     930:	2800      	cmp	r0, #0
     932:	d00d      	beq.n	950 <io_read+0x28>
     934:	0008      	movs	r0, r1
     936:	1e43      	subs	r3, r0, #1
     938:	4198      	sbcs	r0, r3
     93a:	b2c0      	uxtb	r0, r0
     93c:	223d      	movs	r2, #61	; 0x3d
     93e:	4905      	ldr	r1, [pc, #20]	; (954 <io_read+0x2c>)
     940:	4b05      	ldr	r3, [pc, #20]	; (958 <io_read+0x30>)
     942:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
     944:	6873      	ldr	r3, [r6, #4]
     946:	002a      	movs	r2, r5
     948:	0021      	movs	r1, r4
     94a:	0030      	movs	r0, r6
     94c:	4798      	blx	r3
}
     94e:	bd70      	pop	{r4, r5, r6, pc}
     950:	2000      	movs	r0, #0
     952:	e7f3      	b.n	93c <io_read+0x14>
     954:	00003ef4 	.word	0x00003ef4
     958:	00000b49 	.word	0x00000b49

0000095c <temp_sync_init>:

/**
 * \brief              Initialize Temperature Descriptor
 */
int32_t temp_sync_init(struct temp_sync_descriptor *const descr, void *const hw)
{
     95c:	b570      	push	{r4, r5, r6, lr}
     95e:	0004      	movs	r4, r0
     960:	000d      	movs	r5, r1
	ASSERT(descr && hw);
     962:	2800      	cmp	r0, #0
     964:	d00c      	beq.n	980 <temp_sync_init+0x24>
     966:	0008      	movs	r0, r1
     968:	1e43      	subs	r3, r0, #1
     96a:	4198      	sbcs	r0, r3
     96c:	b2c0      	uxtb	r0, r0
     96e:	222b      	movs	r2, #43	; 0x2b
     970:	4904      	ldr	r1, [pc, #16]	; (984 <temp_sync_init+0x28>)
     972:	4b05      	ldr	r3, [pc, #20]	; (988 <temp_sync_init+0x2c>)
     974:	4798      	blx	r3
	return _temp_sync_init(&descr->dev, hw);
     976:	0029      	movs	r1, r5
     978:	0020      	movs	r0, r4
     97a:	4b04      	ldr	r3, [pc, #16]	; (98c <temp_sync_init+0x30>)
     97c:	4798      	blx	r3
}
     97e:	bd70      	pop	{r4, r5, r6, pc}
     980:	2000      	movs	r0, #0
     982:	e7f4      	b.n	96e <temp_sync_init+0x12>
     984:	00003f08 	.word	0x00003f08
     988:	00000b49 	.word	0x00000b49
     98c:	000012a1 	.word	0x000012a1

00000990 <temp_sync_enable>:

/**
 * \brief              Enable AES
 */
int32_t temp_sync_enable(struct temp_sync_descriptor *const descr)
{
     990:	b510      	push	{r4, lr}
     992:	0004      	movs	r4, r0
	ASSERT(descr);
     994:	1e43      	subs	r3, r0, #1
     996:	4198      	sbcs	r0, r3
     998:	b2c0      	uxtb	r0, r0
     99a:	223d      	movs	r2, #61	; 0x3d
     99c:	4903      	ldr	r1, [pc, #12]	; (9ac <temp_sync_enable+0x1c>)
     99e:	4b04      	ldr	r3, [pc, #16]	; (9b0 <temp_sync_enable+0x20>)
     9a0:	4798      	blx	r3
	return _temp_sync_enable(&descr->dev);
     9a2:	0020      	movs	r0, r4
     9a4:	4b03      	ldr	r3, [pc, #12]	; (9b4 <temp_sync_enable+0x24>)
     9a6:	4798      	blx	r3
}
     9a8:	bd10      	pop	{r4, pc}
     9aa:	46c0      	nop			; (mov r8, r8)
     9ac:	00003f08 	.word	0x00003f08
     9b0:	00000b49 	.word	0x00000b49
     9b4:	00001355 	.word	0x00001355

000009b8 <temp_sync_read>:

/**
 * \brief              Read Temperature Value
 */
int32_t temp_sync_read(struct temp_sync_descriptor *const descr, int32_t *const temp)
{
     9b8:	b570      	push	{r4, r5, r6, lr}
     9ba:	0004      	movs	r4, r0
     9bc:	000d      	movs	r5, r1
	ASSERT(descr && temp);
     9be:	2800      	cmp	r0, #0
     9c0:	d00c      	beq.n	9dc <temp_sync_read+0x24>
     9c2:	0008      	movs	r0, r1
     9c4:	1e43      	subs	r3, r0, #1
     9c6:	4198      	sbcs	r0, r3
     9c8:	b2c0      	uxtb	r0, r0
     9ca:	224f      	movs	r2, #79	; 0x4f
     9cc:	4904      	ldr	r1, [pc, #16]	; (9e0 <temp_sync_read+0x28>)
     9ce:	4b05      	ldr	r3, [pc, #20]	; (9e4 <temp_sync_read+0x2c>)
     9d0:	4798      	blx	r3
	return _temp_sync_read(&descr->dev, temp);
     9d2:	0029      	movs	r1, r5
     9d4:	0020      	movs	r0, r4
     9d6:	4b04      	ldr	r3, [pc, #16]	; (9e8 <temp_sync_read+0x30>)
     9d8:	4798      	blx	r3
}
     9da:	bd70      	pop	{r4, r5, r6, pc}
     9dc:	2000      	movs	r0, #0
     9de:	e7f4      	b.n	9ca <temp_sync_read+0x12>
     9e0:	00003f08 	.word	0x00003f08
     9e4:	00000b49 	.word	0x00000b49
     9e8:	0000136b 	.word	0x0000136b

000009ec <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     9ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     9ee:	46ce      	mov	lr, r9
     9f0:	4647      	mov	r7, r8
     9f2:	b580      	push	{r7, lr}
     9f4:	0004      	movs	r4, r0
     9f6:	000f      	movs	r7, r1
     9f8:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     9fa:	2800      	cmp	r0, #0
     9fc:	d026      	beq.n	a4c <usart_sync_write+0x60>
     9fe:	2900      	cmp	r1, #0
     a00:	d026      	beq.n	a50 <usart_sync_write+0x64>
     a02:	0010      	movs	r0, r2
     a04:	1e43      	subs	r3, r0, #1
     a06:	4198      	sbcs	r0, r3
     a08:	22f1      	movs	r2, #241	; 0xf1
     a0a:	4912      	ldr	r1, [pc, #72]	; (a54 <usart_sync_write+0x68>)
     a0c:	4b12      	ldr	r3, [pc, #72]	; (a58 <usart_sync_write+0x6c>)
     a0e:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
     a10:	3408      	adds	r4, #8
     a12:	4d12      	ldr	r5, [pc, #72]	; (a5c <usart_sync_write+0x70>)
     a14:	0020      	movs	r0, r4
     a16:	47a8      	blx	r5
     a18:	2800      	cmp	r0, #0
     a1a:	d0fb      	beq.n	a14 <usart_sync_write+0x28>
     a1c:	2600      	movs	r6, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
     a1e:	4b10      	ldr	r3, [pc, #64]	; (a60 <usart_sync_write+0x74>)
     a20:	4699      	mov	r9, r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
     a22:	4d0e      	ldr	r5, [pc, #56]	; (a5c <usart_sync_write+0x70>)
		_usart_sync_write_byte(&descr->device, buf[offset]);
     a24:	5db9      	ldrb	r1, [r7, r6]
     a26:	0020      	movs	r0, r4
     a28:	47c8      	blx	r9
		while (!_usart_sync_is_ready_to_send(&descr->device))
     a2a:	0020      	movs	r0, r4
     a2c:	47a8      	blx	r5
     a2e:	2800      	cmp	r0, #0
     a30:	d0fb      	beq.n	a2a <usart_sync_write+0x3e>
			;
	} while (++offset < length);
     a32:	3601      	adds	r6, #1
     a34:	4546      	cmp	r6, r8
     a36:	d3f5      	bcc.n	a24 <usart_sync_write+0x38>
	while (!_usart_sync_is_transmit_done(&descr->device))
     a38:	4d0a      	ldr	r5, [pc, #40]	; (a64 <usart_sync_write+0x78>)
     a3a:	0020      	movs	r0, r4
     a3c:	47a8      	blx	r5
     a3e:	2800      	cmp	r0, #0
     a40:	d0fb      	beq.n	a3a <usart_sync_write+0x4e>
		;
	return (int32_t)offset;
}
     a42:	0030      	movs	r0, r6
     a44:	bc0c      	pop	{r2, r3}
     a46:	4690      	mov	r8, r2
     a48:	4699      	mov	r9, r3
     a4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
     a4c:	2000      	movs	r0, #0
     a4e:	e7db      	b.n	a08 <usart_sync_write+0x1c>
     a50:	2000      	movs	r0, #0
     a52:	e7d9      	b.n	a08 <usart_sync_write+0x1c>
     a54:	00003f24 	.word	0x00003f24
     a58:	00000b49 	.word	0x00000b49
     a5c:	00001281 	.word	0x00001281
     a60:	00001271 	.word	0x00001271
     a64:	0000128b 	.word	0x0000128b

00000a68 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     a6a:	46ce      	mov	lr, r9
     a6c:	4647      	mov	r7, r8
     a6e:	b580      	push	{r7, lr}
     a70:	0004      	movs	r4, r0
     a72:	000f      	movs	r7, r1
     a74:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     a76:	2800      	cmp	r0, #0
     a78:	d01d      	beq.n	ab6 <usart_sync_read+0x4e>
     a7a:	2900      	cmp	r1, #0
     a7c:	d01d      	beq.n	aba <usart_sync_read+0x52>
     a7e:	0010      	movs	r0, r2
     a80:	1e43      	subs	r3, r0, #1
     a82:	4198      	sbcs	r0, r3
     a84:	2286      	movs	r2, #134	; 0x86
     a86:	0052      	lsls	r2, r2, #1
     a88:	490d      	ldr	r1, [pc, #52]	; (ac0 <usart_sync_read+0x58>)
     a8a:	4b0e      	ldr	r3, [pc, #56]	; (ac4 <usart_sync_read+0x5c>)
     a8c:	4798      	blx	r3
	uint32_t                      offset = 0;
     a8e:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
     a90:	3408      	adds	r4, #8
     a92:	4d0d      	ldr	r5, [pc, #52]	; (ac8 <usart_sync_read+0x60>)
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
     a94:	4b0d      	ldr	r3, [pc, #52]	; (acc <usart_sync_read+0x64>)
     a96:	4699      	mov	r9, r3
		while (!_usart_sync_is_byte_received(&descr->device))
     a98:	0020      	movs	r0, r4
     a9a:	47a8      	blx	r5
     a9c:	2800      	cmp	r0, #0
     a9e:	d0fb      	beq.n	a98 <usart_sync_read+0x30>
		buf[offset] = _usart_sync_read_byte(&descr->device);
     aa0:	0020      	movs	r0, r4
     aa2:	47c8      	blx	r9
     aa4:	55b8      	strb	r0, [r7, r6]
	} while (++offset < length);
     aa6:	3601      	adds	r6, #1
     aa8:	4546      	cmp	r6, r8
     aaa:	d3f5      	bcc.n	a98 <usart_sync_read+0x30>

	return (int32_t)offset;
}
     aac:	0030      	movs	r0, r6
     aae:	bc0c      	pop	{r2, r3}
     ab0:	4690      	mov	r8, r2
     ab2:	4699      	mov	r9, r3
     ab4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
     ab6:	2000      	movs	r0, #0
     ab8:	e7e4      	b.n	a84 <usart_sync_read+0x1c>
     aba:	2000      	movs	r0, #0
     abc:	e7e2      	b.n	a84 <usart_sync_read+0x1c>
     abe:	46c0      	nop			; (mov r8, r8)
     ac0:	00003f24 	.word	0x00003f24
     ac4:	00000b49 	.word	0x00000b49
     ac8:	00001295 	.word	0x00001295
     acc:	00001279 	.word	0x00001279

00000ad0 <usart_sync_init>:
{
     ad0:	b570      	push	{r4, r5, r6, lr}
     ad2:	0005      	movs	r5, r0
     ad4:	000c      	movs	r4, r1
	ASSERT(descr && hw);
     ad6:	2800      	cmp	r0, #0
     ad8:	d013      	beq.n	b02 <usart_sync_init+0x32>
     ada:	0008      	movs	r0, r1
     adc:	1e43      	subs	r3, r0, #1
     ade:	4198      	sbcs	r0, r3
     ae0:	b2c0      	uxtb	r0, r0
     ae2:	2234      	movs	r2, #52	; 0x34
     ae4:	4908      	ldr	r1, [pc, #32]	; (b08 <usart_sync_init+0x38>)
     ae6:	4b09      	ldr	r3, [pc, #36]	; (b0c <usart_sync_init+0x3c>)
     ae8:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
     aea:	0028      	movs	r0, r5
     aec:	3008      	adds	r0, #8
     aee:	0021      	movs	r1, r4
     af0:	4b07      	ldr	r3, [pc, #28]	; (b10 <usart_sync_init+0x40>)
     af2:	4798      	blx	r3
	if (init_status) {
     af4:	2800      	cmp	r0, #0
     af6:	d103      	bne.n	b00 <usart_sync_init+0x30>
	descr->io.read  = usart_sync_read;
     af8:	4b06      	ldr	r3, [pc, #24]	; (b14 <usart_sync_init+0x44>)
     afa:	606b      	str	r3, [r5, #4]
	descr->io.write = usart_sync_write;
     afc:	4b06      	ldr	r3, [pc, #24]	; (b18 <usart_sync_init+0x48>)
     afe:	602b      	str	r3, [r5, #0]
}
     b00:	bd70      	pop	{r4, r5, r6, pc}
     b02:	2000      	movs	r0, #0
     b04:	e7ed      	b.n	ae2 <usart_sync_init+0x12>
     b06:	46c0      	nop			; (mov r8, r8)
     b08:	00003f24 	.word	0x00003f24
     b0c:	00000b49 	.word	0x00000b49
     b10:	00001231 	.word	0x00001231
     b14:	00000a69 	.word	0x00000a69
     b18:	000009ed 	.word	0x000009ed

00000b1c <usart_sync_enable>:
{
     b1c:	b510      	push	{r4, lr}
     b1e:	0004      	movs	r4, r0
	ASSERT(descr);
     b20:	1e43      	subs	r3, r0, #1
     b22:	4198      	sbcs	r0, r3
     b24:	b2c0      	uxtb	r0, r0
     b26:	2253      	movs	r2, #83	; 0x53
     b28:	4904      	ldr	r1, [pc, #16]	; (b3c <usart_sync_enable+0x20>)
     b2a:	4b05      	ldr	r3, [pc, #20]	; (b40 <usart_sync_enable+0x24>)
     b2c:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
     b2e:	0020      	movs	r0, r4
     b30:	3008      	adds	r0, #8
     b32:	4b04      	ldr	r3, [pc, #16]	; (b44 <usart_sync_enable+0x28>)
     b34:	4798      	blx	r3
}
     b36:	2000      	movs	r0, #0
     b38:	bd10      	pop	{r4, pc}
     b3a:	46c0      	nop			; (mov r8, r8)
     b3c:	00003f24 	.word	0x00003f24
     b40:	00000b49 	.word	0x00000b49
     b44:	0000125d 	.word	0x0000125d

00000b48 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     b48:	2800      	cmp	r0, #0
     b4a:	d100      	bne.n	b4e <assert+0x6>
		__asm("BKPT #0");
     b4c:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
     b4e:	4770      	bx	lr

00000b50 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
     b50:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
     b52:	4a06      	ldr	r2, [pc, #24]	; (b6c <_sbrk+0x1c>)
     b54:	6812      	ldr	r2, [r2, #0]
     b56:	2a00      	cmp	r2, #0
     b58:	d004      	beq.n	b64 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
     b5a:	4a04      	ldr	r2, [pc, #16]	; (b6c <_sbrk+0x1c>)
     b5c:	6810      	ldr	r0, [r2, #0]

	heap += incr;
     b5e:	18c3      	adds	r3, r0, r3
     b60:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
     b62:	4770      	bx	lr
		heap = (unsigned char *)&_end;
     b64:	4902      	ldr	r1, [pc, #8]	; (b70 <_sbrk+0x20>)
     b66:	4a01      	ldr	r2, [pc, #4]	; (b6c <_sbrk+0x1c>)
     b68:	6011      	str	r1, [r2, #0]
     b6a:	e7f6      	b.n	b5a <_sbrk+0xa>
     b6c:	20000094 	.word	0x20000094
     b70:	200014d8 	.word	0x200014d8

00000b74 <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
     b74:	2001      	movs	r0, #1
     b76:	4240      	negs	r0, r0
     b78:	4770      	bx	lr

00000b7a <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
     b7a:	2380      	movs	r3, #128	; 0x80
     b7c:	019b      	lsls	r3, r3, #6
     b7e:	604b      	str	r3, [r1, #4]

	return 0;
}
     b80:	2000      	movs	r0, #0
     b82:	4770      	bx	lr

00000b84 <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
     b84:	2001      	movs	r0, #1
     b86:	4770      	bx	lr

00000b88 <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
     b88:	2000      	movs	r0, #0
     b8a:	4770      	bx	lr

00000b8c <_adc_init>:
 *
 * \param[in] hw The pointer to hardware instance
 * \param[in] i The number of hardware instance
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{
     b8c:	b510      	push	{r4, lr}
	uint16_t calib_reg = 0;
	if (hw == ADC0) {
     b8e:	4b57      	ldr	r3, [pc, #348]	; (cec <_adc_init+0x160>)
     b90:	4298      	cmp	r0, r3
     b92:	d100      	bne.n	b96 <_adc_init+0xa>
     b94:	e095      	b.n	cc2 <_adc_init+0x136>
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC0_FUSES_BIASREFBUF_ADDR >> ADC0_FUSES_BIASREFBUF_Pos))
		            | ADC_CALIB_BIASCOMP((*(uint32_t *)ADC0_FUSES_BIASCOMP_ADDR >> ADC0_FUSES_BIASCOMP_Pos));
	} else if (hw == ADC1) {
     b96:	4b56      	ldr	r3, [pc, #344]	; (cf0 <_adc_init+0x164>)
	uint16_t calib_reg = 0;
     b98:	2400      	movs	r4, #0
	} else if (hw == ADC1) {
     b9a:	4298      	cmp	r0, r3
     b9c:	d100      	bne.n	ba0 <_adc_init+0x14>
     b9e:	e09a      	b.n	cd6 <_adc_init+0x14a>
	};
}

static inline bool hri_adc_is_syncing(const void *const hw, hri_adc_syncbusy_reg_t reg)
{
	return ((Adc *)hw)->SYNCBUSY.reg & reg;
     ba0:	8c03      	ldrh	r3, [r0, #32]
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC1_FUSES_BIASREFBUF_ADDR >> ADC1_FUSES_BIASREFBUF_Pos))
		            | ADC_CALIB_BIASCOMP((*(uint32_t *)ADC1_FUSES_BIASCOMP_ADDR >> ADC1_FUSES_BIASCOMP_Pos));
	}

	if (!hri_adc_is_syncing(hw, ADC_SYNCBUSY_SWRST)) {
     ba2:	07db      	lsls	r3, r3, #31
     ba4:	d418      	bmi.n	bd8 <_adc_init+0x4c>
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     ba6:	2203      	movs	r2, #3
     ba8:	8c03      	ldrh	r3, [r0, #32]
     baa:	4213      	tst	r3, r2
     bac:	d1fc      	bne.n	ba8 <_adc_init+0x1c>

static inline hri_adc_ctrla_reg_t hri_adc_get_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
	tmp = ((Adc *)hw)->CTRLA.reg;
     bae:	7803      	ldrb	r3, [r0, #0]
		if (hri_adc_get_CTRLA_reg(hw, ADC_CTRLA_ENABLE)) {
     bb0:	079b      	lsls	r3, r3, #30
     bb2:	d50b      	bpl.n	bcc <_adc_init+0x40>
	((Adc *)hw)->CTRLA.reg &= ~ADC_CTRLA_ENABLE;
     bb4:	7803      	ldrb	r3, [r0, #0]
     bb6:	2202      	movs	r2, #2
     bb8:	4393      	bics	r3, r2
     bba:	7003      	strb	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     bbc:	3201      	adds	r2, #1
     bbe:	8c03      	ldrh	r3, [r0, #32]
     bc0:	4213      	tst	r3, r2
     bc2:	d1fc      	bne.n	bbe <_adc_init+0x32>
     bc4:	2202      	movs	r2, #2
     bc6:	8c03      	ldrh	r3, [r0, #32]
     bc8:	4213      	tst	r3, r2
     bca:	d1fc      	bne.n	bc6 <_adc_init+0x3a>
}

static inline void hri_adc_write_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg = data;
     bcc:	2301      	movs	r3, #1
     bce:	7003      	strb	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     bd0:	2203      	movs	r2, #3
     bd2:	8c03      	ldrh	r3, [r0, #32]
     bd4:	4213      	tst	r3, r2
     bd6:	d1fc      	bne.n	bd2 <_adc_init+0x46>
     bd8:	2201      	movs	r2, #1
     bda:	8c03      	ldrh	r3, [r0, #32]
     bdc:	4213      	tst	r3, r2
     bde:	d1fc      	bne.n	bda <_adc_init+0x4e>
}

static inline void hri_adc_write_CALIB_reg(const void *const hw, hri_adc_calib_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CALIB.reg = data;
     be0:	8584      	strh	r4, [r0, #44]	; 0x2c
		hri_adc_write_CTRLA_reg(hw, ADC_CTRLA_SWRST);
	}
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);

	hri_adc_write_CALIB_reg(hw, calib_reg);
	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
     be2:	00ca      	lsls	r2, r1, #3
     be4:	1a52      	subs	r2, r2, r1
     be6:	0092      	lsls	r2, r2, #2
     be8:	4b42      	ldr	r3, [pc, #264]	; (cf4 <_adc_init+0x168>)
     bea:	189b      	adds	r3, r3, r2
     bec:	789a      	ldrb	r2, [r3, #2]
	((Adc *)hw)->CTRLB.reg = data;
     bee:	7042      	strb	r2, [r0, #1]
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
     bf0:	78da      	ldrb	r2, [r3, #3]
	((Adc *)hw)->REFCTRL.reg = data;
     bf2:	7082      	strb	r2, [r0, #2]
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
     bf4:	791a      	ldrb	r2, [r3, #4]
	((Adc *)hw)->EVCTRL.reg = data;
     bf6:	70c2      	strb	r2, [r0, #3]
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
     bf8:	88db      	ldrh	r3, [r3, #6]
	((Adc *)hw)->INPUTCTRL.reg = data;
     bfa:	8103      	strh	r3, [r0, #8]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     bfc:	8c03      	ldrh	r3, [r0, #32]
     bfe:	055b      	lsls	r3, r3, #21
     c00:	d1fc      	bne.n	bfc <_adc_init+0x70>
	hri_adc_write_CTRLC_reg(hw, _adcs[i].ctrl_c);
     c02:	00cb      	lsls	r3, r1, #3
     c04:	1a5b      	subs	r3, r3, r1
     c06:	009b      	lsls	r3, r3, #2
     c08:	4a3a      	ldr	r2, [pc, #232]	; (cf4 <_adc_init+0x168>)
     c0a:	18d3      	adds	r3, r2, r3
     c0c:	891b      	ldrh	r3, [r3, #8]
	((Adc *)hw)->CTRLC.reg = data;
     c0e:	8143      	strh	r3, [r0, #10]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     c10:	8c03      	ldrh	r3, [r0, #32]
     c12:	055b      	lsls	r3, r3, #21
     c14:	d1fc      	bne.n	c10 <_adc_init+0x84>
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
     c16:	00cb      	lsls	r3, r1, #3
     c18:	1a5b      	subs	r3, r3, r1
     c1a:	009b      	lsls	r3, r3, #2
     c1c:	4a35      	ldr	r2, [pc, #212]	; (cf4 <_adc_init+0x168>)
     c1e:	18d3      	adds	r3, r2, r3
     c20:	7a9b      	ldrb	r3, [r3, #10]
	((Adc *)hw)->AVGCTRL.reg = data;
     c22:	7303      	strb	r3, [r0, #12]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     c24:	8c03      	ldrh	r3, [r0, #32]
     c26:	055b      	lsls	r3, r3, #21
     c28:	d1fc      	bne.n	c24 <_adc_init+0x98>
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
     c2a:	00cb      	lsls	r3, r1, #3
     c2c:	1a5b      	subs	r3, r3, r1
     c2e:	009b      	lsls	r3, r3, #2
     c30:	4a30      	ldr	r2, [pc, #192]	; (cf4 <_adc_init+0x168>)
     c32:	18d3      	adds	r3, r2, r3
     c34:	7adb      	ldrb	r3, [r3, #11]
	((Adc *)hw)->SAMPCTRL.reg = data;
     c36:	7343      	strb	r3, [r0, #13]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     c38:	8c03      	ldrh	r3, [r0, #32]
     c3a:	055b      	lsls	r3, r3, #21
     c3c:	d1fc      	bne.n	c38 <_adc_init+0xac>
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
     c3e:	00cb      	lsls	r3, r1, #3
     c40:	1a5b      	subs	r3, r3, r1
     c42:	009b      	lsls	r3, r3, #2
     c44:	4a2b      	ldr	r2, [pc, #172]	; (cf4 <_adc_init+0x168>)
     c46:	18d3      	adds	r3, r2, r3
     c48:	899b      	ldrh	r3, [r3, #12]
	((Adc *)hw)->WINLT.reg = data;
     c4a:	81c3      	strh	r3, [r0, #14]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     c4c:	2240      	movs	r2, #64	; 0x40
     c4e:	8c03      	ldrh	r3, [r0, #32]
     c50:	4213      	tst	r3, r2
     c52:	d1fc      	bne.n	c4e <_adc_init+0xc2>
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
     c54:	00cb      	lsls	r3, r1, #3
     c56:	1a5b      	subs	r3, r3, r1
     c58:	009b      	lsls	r3, r3, #2
     c5a:	4a26      	ldr	r2, [pc, #152]	; (cf4 <_adc_init+0x168>)
     c5c:	18d3      	adds	r3, r2, r3
     c5e:	89db      	ldrh	r3, [r3, #14]
	((Adc *)hw)->WINUT.reg = data;
     c60:	8203      	strh	r3, [r0, #16]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     c62:	2280      	movs	r2, #128	; 0x80
     c64:	8c03      	ldrh	r3, [r0, #32]
     c66:	4213      	tst	r3, r2
     c68:	d1fc      	bne.n	c64 <_adc_init+0xd8>
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
     c6a:	00cb      	lsls	r3, r1, #3
     c6c:	1a5b      	subs	r3, r3, r1
     c6e:	009b      	lsls	r3, r3, #2
     c70:	4a20      	ldr	r2, [pc, #128]	; (cf4 <_adc_init+0x168>)
     c72:	18d3      	adds	r3, r2, r3
     c74:	8a1b      	ldrh	r3, [r3, #16]
	((Adc *)hw)->GAINCORR.reg = data;
     c76:	8243      	strh	r3, [r0, #18]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     c78:	2280      	movs	r2, #128	; 0x80
     c7a:	0052      	lsls	r2, r2, #1
     c7c:	8c03      	ldrh	r3, [r0, #32]
     c7e:	4213      	tst	r3, r2
     c80:	d1fc      	bne.n	c7c <_adc_init+0xf0>
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
     c82:	00cb      	lsls	r3, r1, #3
     c84:	1a5b      	subs	r3, r3, r1
     c86:	009b      	lsls	r3, r3, #2
     c88:	4a1a      	ldr	r2, [pc, #104]	; (cf4 <_adc_init+0x168>)
     c8a:	18d3      	adds	r3, r2, r3
     c8c:	8a5b      	ldrh	r3, [r3, #18]
	((Adc *)hw)->OFFSETCORR.reg = data;
     c8e:	8283      	strh	r3, [r0, #20]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     c90:	2280      	movs	r2, #128	; 0x80
     c92:	0092      	lsls	r2, r2, #2
     c94:	8c03      	ldrh	r3, [r0, #32]
     c96:	4213      	tst	r3, r2
     c98:	d1fc      	bne.n	c94 <_adc_init+0x108>
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
     c9a:	4c16      	ldr	r4, [pc, #88]	; (cf4 <_adc_init+0x168>)
     c9c:	00cb      	lsls	r3, r1, #3
     c9e:	1a5a      	subs	r2, r3, r1
     ca0:	0092      	lsls	r2, r2, #2
     ca2:	18a2      	adds	r2, r4, r2
     ca4:	7d12      	ldrb	r2, [r2, #20]
	((Adc *)hw)->DBGCTRL.reg = data;
     ca6:	7702      	strb	r2, [r0, #28]
	((Adc *)hw)->SEQCTRL.reg = data;
     ca8:	2200      	movs	r2, #0
     caa:	6282      	str	r2, [r0, #40]	; 0x28
	hri_adc_write_SEQCTRL_reg(hw, _adcs[i].seq_ctrl);
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
     cac:	1a59      	subs	r1, r3, r1
     cae:	0089      	lsls	r1, r1, #2
     cb0:	1861      	adds	r1, r4, r1
     cb2:	784b      	ldrb	r3, [r1, #1]
	((Adc *)hw)->CTRLA.reg = data;
     cb4:	7003      	strb	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     cb6:	3203      	adds	r2, #3
     cb8:	8c03      	ldrh	r3, [r0, #32]
     cba:	4213      	tst	r3, r2
     cbc:	d1fc      	bne.n	cb8 <_adc_init+0x12c>

	return ERR_NONE;
}
     cbe:	2000      	movs	r0, #0
     cc0:	bd10      	pop	{r4, pc}
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC0_FUSES_BIASREFBUF_ADDR >> ADC0_FUSES_BIASREFBUF_Pos))
     cc2:	4b0d      	ldr	r3, [pc, #52]	; (cf8 <_adc_init+0x16c>)
     cc4:	681b      	ldr	r3, [r3, #0]
     cc6:	021c      	lsls	r4, r3, #8
     cc8:	22e0      	movs	r2, #224	; 0xe0
     cca:	00d2      	lsls	r2, r2, #3
     ccc:	4014      	ands	r4, r2
		            | ADC_CALIB_BIASCOMP((*(uint32_t *)ADC0_FUSES_BIASCOMP_ADDR >> ADC0_FUSES_BIASCOMP_Pos));
     cce:	069b      	lsls	r3, r3, #26
     cd0:	0f5b      	lsrs	r3, r3, #29
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC0_FUSES_BIASREFBUF_ADDR >> ADC0_FUSES_BIASREFBUF_Pos))
     cd2:	431c      	orrs	r4, r3
     cd4:	e764      	b.n	ba0 <_adc_init+0x14>
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC1_FUSES_BIASREFBUF_ADDR >> ADC1_FUSES_BIASREFBUF_Pos))
     cd6:	4b08      	ldr	r3, [pc, #32]	; (cf8 <_adc_init+0x16c>)
     cd8:	681b      	ldr	r3, [r3, #0]
     cda:	009c      	lsls	r4, r3, #2
     cdc:	22e0      	movs	r2, #224	; 0xe0
     cde:	00d2      	lsls	r2, r2, #3
     ce0:	4014      	ands	r4, r2
		            | ADC_CALIB_BIASCOMP((*(uint32_t *)ADC1_FUSES_BIASCOMP_ADDR >> ADC1_FUSES_BIASCOMP_Pos));
     ce2:	051b      	lsls	r3, r3, #20
     ce4:	0f5b      	lsrs	r3, r3, #29
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC1_FUSES_BIASREFBUF_ADDR >> ADC1_FUSES_BIASREFBUF_Pos))
     ce6:	431c      	orrs	r4, r3
     ce8:	e75a      	b.n	ba0 <_adc_init+0x14>
     cea:	46c0      	nop			; (mov r8, r8)
     cec:	42004400 	.word	0x42004400
     cf0:	42004800 	.word	0x42004800
     cf4:	00003f40 	.word	0x00003f40
     cf8:	00806020 	.word	0x00806020

00000cfc <_adc_get_regs>:
{
     cfc:	b510      	push	{r4, lr}
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
     cfe:	4b07      	ldr	r3, [pc, #28]	; (d1c <_adc_get_regs+0x20>)
     d00:	469c      	mov	ip, r3
     d02:	4460      	add	r0, ip
     d04:	0a80      	lsrs	r0, r0, #10
		if (_adcs[i].number == n) {
     d06:	b2c0      	uxtb	r0, r0
     d08:	2800      	cmp	r0, #0
     d0a:	d004      	beq.n	d16 <_adc_get_regs+0x1a>
	ASSERT(false);
     d0c:	228d      	movs	r2, #141	; 0x8d
     d0e:	4904      	ldr	r1, [pc, #16]	; (d20 <_adc_get_regs+0x24>)
     d10:	2000      	movs	r0, #0
     d12:	4b04      	ldr	r3, [pc, #16]	; (d24 <_adc_get_regs+0x28>)
     d14:	4798      	blx	r3
}
     d16:	2000      	movs	r0, #0
     d18:	bd10      	pop	{r4, pc}
     d1a:	46c0      	nop			; (mov r8, r8)
     d1c:	bdffbc00 	.word	0xbdffbc00
     d20:	00003f5c 	.word	0x00003f5c
     d24:	00000b49 	.word	0x00000b49

00000d28 <_adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_sync_init(struct _adc_sync_device *const device, void *const hw)
{
     d28:	b570      	push	{r4, r5, r6, lr}
     d2a:	0005      	movs	r5, r0
     d2c:	000c      	movs	r4, r1
	ASSERT(device);
     d2e:	1e43      	subs	r3, r0, #1
     d30:	4198      	sbcs	r0, r3
     d32:	b2c0      	uxtb	r0, r0
     d34:	22dd      	movs	r2, #221	; 0xdd
     d36:	4906      	ldr	r1, [pc, #24]	; (d50 <_adc_sync_init+0x28>)
     d38:	4b06      	ldr	r3, [pc, #24]	; (d54 <_adc_sync_init+0x2c>)
     d3a:	4798      	blx	r3

	device->hw = hw;
     d3c:	602c      	str	r4, [r5, #0]

	return _adc_init(hw, _adc_get_regs((uint32_t)hw));
     d3e:	0020      	movs	r0, r4
     d40:	4b05      	ldr	r3, [pc, #20]	; (d58 <_adc_sync_init+0x30>)
     d42:	4798      	blx	r3
     d44:	0001      	movs	r1, r0
     d46:	0020      	movs	r0, r4
     d48:	4b04      	ldr	r3, [pc, #16]	; (d5c <_adc_sync_init+0x34>)
     d4a:	4798      	blx	r3
}
     d4c:	bd70      	pop	{r4, r5, r6, pc}
     d4e:	46c0      	nop			; (mov r8, r8)
     d50:	00003f5c 	.word	0x00003f5c
     d54:	00000b49 	.word	0x00000b49
     d58:	00000cfd 	.word	0x00000cfd
     d5c:	00000b8d 	.word	0x00000b8d

00000d60 <_adc_sync_enable_channel>:
 */
void _adc_sync_enable_channel(struct _adc_sync_device *const device, const uint8_t channel)
{
	(void)channel;

	hri_adc_set_CTRLA_ENABLE_bit(device->hw);
     d60:	6802      	ldr	r2, [r0, #0]
	((Adc *)hw)->CTRLA.reg |= ADC_CTRLA_ENABLE;
     d62:	7813      	ldrb	r3, [r2, #0]
     d64:	2102      	movs	r1, #2
     d66:	430b      	orrs	r3, r1
     d68:	7013      	strb	r3, [r2, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     d6a:	3101      	adds	r1, #1
     d6c:	8c13      	ldrh	r3, [r2, #32]
     d6e:	420b      	tst	r3, r1
     d70:	d1fc      	bne.n	d6c <_adc_sync_enable_channel+0xc>
}
     d72:	4770      	bx	lr

00000d74 <_adc_sync_get_data_size>:
/**
 * \brief Retrieve ADC conversion data size
 */
uint8_t _adc_sync_get_data_size(const struct _adc_sync_device *const device)
{
	return hri_adc_read_CTRLC_RESSEL_bf(device->hw) == ADC_CTRLC_RESSEL_8BIT_Val ? 1 : 2;
     d74:	6803      	ldr	r3, [r0, #0]
	tmp = ((Adc *)hw)->CTRLC.reg;
     d76:	8958      	ldrh	r0, [r3, #10]
	tmp = (tmp & ADC_CTRLC_RESSEL_Msk) >> ADC_CTRLC_RESSEL_Pos;
     d78:	0680      	lsls	r0, r0, #26
     d7a:	0f80      	lsrs	r0, r0, #30
     d7c:	3803      	subs	r0, #3
     d7e:	1e43      	subs	r3, r0, #1
     d80:	4198      	sbcs	r0, r3
     d82:	3001      	adds	r0, #1
}
     d84:	4770      	bx	lr

00000d86 <_adc_sync_is_channel_conversion_done>:
 */
bool _adc_sync_is_channel_conversion_done(const struct _adc_sync_device *const device, const uint8_t channel)
{
	(void)channel;

	return hri_adc_get_interrupt_RESRDY_bit(device->hw);
     d86:	6803      	ldr	r3, [r0, #0]
	return (((Adc *)hw)->INTFLAG.reg & ADC_INTFLAG_RESRDY) >> ADC_INTFLAG_RESRDY_Pos;
     d88:	7998      	ldrb	r0, [r3, #6]
     d8a:	2301      	movs	r3, #1
     d8c:	4018      	ands	r0, r3
}
     d8e:	4770      	bx	lr

00000d90 <_adc_sync_convert>:
/**
 * \brief Make conversion
 */
void _adc_sync_convert(struct _adc_sync_device *const device)
{
	hri_adc_set_SWTRIG_START_bit(device->hw);
     d90:	6802      	ldr	r2, [r0, #0]
	((Adc *)hw)->SWTRIG.reg |= ADC_SWTRIG_START;
     d92:	7e13      	ldrb	r3, [r2, #24]
     d94:	2102      	movs	r1, #2
     d96:	430b      	orrs	r3, r1
     d98:	7613      	strb	r3, [r2, #24]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     d9a:	8c13      	ldrh	r3, [r2, #32]
     d9c:	055b      	lsls	r3, r3, #21
     d9e:	d1fc      	bne.n	d9a <_adc_sync_convert+0xa>
}
     da0:	4770      	bx	lr

00000da2 <_adc_sync_read_channel_data>:
 */
uint16_t _adc_sync_read_channel_data(const struct _adc_sync_device *const device, const uint8_t channel)
{
	(void)channel;

	return hri_adc_read_RESULT_reg(device->hw);
     da2:	6803      	ldr	r3, [r0, #0]
	return ((Adc *)hw)->RESULT.reg;
     da4:	8c98      	ldrh	r0, [r3, #36]	; 0x24
     da6:	b280      	uxth	r0, r0
}
     da8:	4770      	bx	lr
	...

00000dac <_adc_sync_set_inputs>:
/**
 * \brief Set channels input sources
 */
void _adc_sync_set_inputs(struct _adc_sync_device *const device, const adc_pos_input_t pos_input,
                          const adc_neg_input_t neg_input, const uint8_t channel)
{
     dac:	b530      	push	{r4, r5, lr}
	(void)channel;

	hri_adc_write_INPUTCTRL_MUXPOS_bf(device->hw, pos_input);
     dae:	6804      	ldr	r4, [r0, #0]
	tmp = ((Adc *)hw)->INPUTCTRL.reg;
     db0:	8923      	ldrh	r3, [r4, #8]
	tmp &= ~ADC_INPUTCTRL_MUXPOS_Msk;
     db2:	251f      	movs	r5, #31
     db4:	43ab      	bics	r3, r5
	tmp |= ADC_INPUTCTRL_MUXPOS(data);
     db6:	4029      	ands	r1, r5
     db8:	4319      	orrs	r1, r3
	((Adc *)hw)->INPUTCTRL.reg = tmp;
     dba:	8121      	strh	r1, [r4, #8]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     dbc:	8c23      	ldrh	r3, [r4, #32]
     dbe:	055b      	lsls	r3, r3, #21
     dc0:	d1fc      	bne.n	dbc <_adc_sync_set_inputs+0x10>
	hri_adc_write_INPUTCTRL_MUXNEG_bf(device->hw, neg_input);
     dc2:	6801      	ldr	r1, [r0, #0]
	tmp = ((Adc *)hw)->INPUTCTRL.reg;
     dc4:	890b      	ldrh	r3, [r1, #8]
	tmp &= ~ADC_INPUTCTRL_MUXNEG_Msk;
     dc6:	4806      	ldr	r0, [pc, #24]	; (de0 <_adc_sync_set_inputs+0x34>)
     dc8:	4003      	ands	r3, r0
	tmp |= ADC_INPUTCTRL_MUXNEG(data);
     dca:	0212      	lsls	r2, r2, #8
     dcc:	20f8      	movs	r0, #248	; 0xf8
     dce:	0140      	lsls	r0, r0, #5
     dd0:	4002      	ands	r2, r0
     dd2:	431a      	orrs	r2, r3
	((Adc *)hw)->INPUTCTRL.reg = tmp;
     dd4:	810a      	strh	r2, [r1, #8]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     dd6:	8c0b      	ldrh	r3, [r1, #32]
     dd8:	055b      	lsls	r3, r3, #21
     dda:	d1fc      	bne.n	dd6 <_adc_sync_set_inputs+0x2a>
}
     ddc:	bd30      	pop	{r4, r5, pc}
     dde:	46c0      	nop			; (mov r8, r8)
     de0:	ffffe0ff 	.word	0xffffe0ff

00000de4 <_adc_get_adc_sync>:
 * \brief Retrieve ADC sync helper functions
 */
void *_adc_get_adc_sync(void)
{
	return (void *)NULL;
}
     de4:	2000      	movs	r0, #0
     de6:	4770      	bx	lr

00000de8 <_can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t _can_async_init(struct _can_async_device *const dev, void *const hw)
{
     de8:	b5f0      	push	{r4, r5, r6, r7, lr}
	dev->hw = hw;
     dea:	6001      	str	r1, [r0, #0]
}

static inline void hri_can_set_CCCR_INIT_bit(const void *const hw)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
     dec:	698b      	ldr	r3, [r1, #24]
     dee:	2201      	movs	r2, #1
     df0:	4313      	orrs	r3, r2
     df2:	618b      	str	r3, [r1, #24]
	hri_can_set_CCCR_INIT_bit(dev->hw);
	while (hri_can_get_CCCR_INIT_bit(dev->hw) == 0)
     df4:	6802      	ldr	r2, [r0, #0]

static inline bool hri_can_get_CCCR_INIT_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
	tmp = (tmp & CAN_CCCR_INIT) >> CAN_CCCR_INIT_Pos;
     df6:	2401      	movs	r4, #1
	tmp = ((Can *)hw)->CCCR.reg;
     df8:	6993      	ldr	r3, [r2, #24]
     dfa:	421c      	tst	r4, r3
     dfc:	d0fc      	beq.n	df8 <_can_async_init+0x10>
}

static inline void hri_can_set_CCCR_CCE_bit(const void *const hw)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
     dfe:	6993      	ldr	r3, [r2, #24]
     e00:	2402      	movs	r4, #2
     e02:	4323      	orrs	r3, r4
     e04:	6193      	str	r3, [r2, #24]
		;
	hri_can_set_CCCR_CCE_bit(dev->hw);

#ifdef CONF_CAN0_ENABLED
	if (hw == CAN0) {
     e06:	4b37      	ldr	r3, [pc, #220]	; (ee4 <_can_async_init+0xfc>)
     e08:	4299      	cmp	r1, r3
     e0a:	d010      	beq.n	e2e <_can_async_init+0x46>
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

	/* Disable CCE to prevent Configuration Change */
	hri_can_clear_CCCR_CCE_bit(dev->hw);
     e0c:	6802      	ldr	r2, [r0, #0]
}

static inline void hri_can_clear_CCCR_CCE_bit(const void *const hw)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_CCE;
     e0e:	6993      	ldr	r3, [r2, #24]
     e10:	2102      	movs	r1, #2
     e12:	438b      	bics	r3, r1
     e14:	6193      	str	r3, [r2, #24]
	hri_can_clear_CCCR_INIT_bit(dev->hw);
     e16:	6802      	ldr	r2, [r0, #0]
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
     e18:	6993      	ldr	r3, [r2, #24]
     e1a:	3901      	subs	r1, #1
     e1c:	438b      	bics	r3, r1
     e1e:	6193      	str	r3, [r2, #24]
	while (hri_can_get_CCCR_INIT_bit(dev->hw)) {
     e20:	6801      	ldr	r1, [r0, #0]
	tmp = (tmp & CAN_CCCR_INIT) >> CAN_CCCR_INIT_Pos;
     e22:	2201      	movs	r2, #1
	tmp = ((Can *)hw)->CCCR.reg;
     e24:	698b      	ldr	r3, [r1, #24]
     e26:	421a      	tst	r2, r3
     e28:	d1fc      	bne.n	e24 <_can_async_init+0x3c>
	};

	return ERR_NONE;
}
     e2a:	2000      	movs	r0, #0
     e2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_can0_dev    = dev;
     e2e:	4b2e      	ldr	r3, [pc, #184]	; (ee8 <_can_async_init+0x100>)
     e30:	001a      	movs	r2, r3
     e32:	c201      	stmia	r2!, {r0}
		dev->context = (void *)&_can0_context;
     e34:	492d      	ldr	r1, [pc, #180]	; (eec <_can_async_init+0x104>)
     e36:	6181      	str	r1, [r0, #24]
		hri_can_set_CCCR_reg(dev->hw, CONF_CAN0_CCCR_REG);
     e38:	6804      	ldr	r4, [r0, #0]
}

static inline void hri_can_set_CCCR_reg(const void *const hw, hri_can_cccr_reg_t mask)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= mask;
     e3a:	69a5      	ldr	r5, [r4, #24]
     e3c:	21c0      	movs	r1, #192	; 0xc0
     e3e:	0089      	lsls	r1, r1, #2
     e40:	4329      	orrs	r1, r5
     e42:	61a1      	str	r1, [r4, #24]
		hri_can_write_MRCFG_reg(dev->hw, CONF_CAN0_MRCFG_REG);
     e44:	6804      	ldr	r4, [r0, #0]
	((Can *)hw)->MRCFG.reg = data;
     e46:	2100      	movs	r1, #0
     e48:	60a1      	str	r1, [r4, #8]
		hri_can_write_NBTP_reg(dev->hw, CONF_CAN0_BTP_REG);
     e4a:	6804      	ldr	r4, [r0, #0]
}

static inline void hri_can_write_NBTP_reg(const void *const hw, hri_can_nbtp_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->NBTP.reg = data;
     e4c:	4d28      	ldr	r5, [pc, #160]	; (ef0 <_can_async_init+0x108>)
     e4e:	61e5      	str	r5, [r4, #28]
		hri_can_write_DBTP_reg(dev->hw, CONF_CAN0_DBTP_REG);
     e50:	6804      	ldr	r4, [r0, #0]
	((Can *)hw)->DBTP.reg = data;
     e52:	4d28      	ldr	r5, [pc, #160]	; (ef4 <_can_async_init+0x10c>)
     e54:	60e5      	str	r5, [r4, #12]
		hri_can_write_RXF0C_reg(dev->hw, CONF_CAN0_RXF0C_REG | CAN_RXF0C_F0SA((uint32_t)can0_rx_fifo));
     e56:	4c28      	ldr	r4, [pc, #160]	; (ef8 <_can_async_init+0x110>)
     e58:	0424      	lsls	r4, r4, #16
     e5a:	0c24      	lsrs	r4, r4, #16
     e5c:	2580      	movs	r5, #128	; 0x80
     e5e:	036d      	lsls	r5, r5, #13
     e60:	432c      	orrs	r4, r5
}

static inline void hri_can_write_RXF0C_reg(const void *const hw, hri_can_rxf0c_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXF0C.reg = data;
     e62:	25a0      	movs	r5, #160	; 0xa0
     e64:	6806      	ldr	r6, [r0, #0]
     e66:	5174      	str	r4, [r6, r5]
}

static inline void hri_can_write_RXESC_reg(const void *const hw, hri_can_rxesc_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXESC.reg = data;
     e68:	2405      	movs	r4, #5
     e6a:	351c      	adds	r5, #28
     e6c:	6806      	ldr	r6, [r0, #0]
     e6e:	5174      	str	r4, [r6, r5]
}

static inline void hri_can_write_TXESC_reg(const void *const hw, hri_can_txesc_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXESC.reg = data;
     e70:	350c      	adds	r5, #12
     e72:	6806      	ldr	r6, [r0, #0]
     e74:	5174      	str	r4, [r6, r5]
		hri_can_write_TXBC_reg(dev->hw, CONF_CAN0_TXBC_REG | CAN_TXBC_TBSA((uint32_t)can0_tx_fifo));
     e76:	4c21      	ldr	r4, [pc, #132]	; (efc <_can_async_init+0x114>)
     e78:	0424      	lsls	r4, r4, #16
     e7a:	0c24      	lsrs	r4, r4, #16
     e7c:	2580      	movs	r5, #128	; 0x80
     e7e:	052d      	lsls	r5, r5, #20
     e80:	432c      	orrs	r4, r5
	((Can *)hw)->TXBC.reg = data;
     e82:	25c0      	movs	r5, #192	; 0xc0
     e84:	6806      	ldr	r6, [r0, #0]
     e86:	5174      	str	r4, [r6, r5]
		hri_can_write_TXEFC_reg(dev->hw, CONF_CAN0_TXEFC_REG | CAN_TXEFC_EFSA((uint32_t)can0_tx_event_fifo));
     e88:	0412      	lsls	r2, r2, #16
     e8a:	0c12      	lsrs	r2, r2, #16
     e8c:	2480      	movs	r4, #128	; 0x80
     e8e:	02a4      	lsls	r4, r4, #10
     e90:	4322      	orrs	r2, r4
}

static inline void hri_can_write_TXEFC_reg(const void *const hw, hri_can_txefc_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXEFC.reg = data;
     e92:	3530      	adds	r5, #48	; 0x30
     e94:	6806      	ldr	r6, [r0, #0]
     e96:	5172      	str	r2, [r6, r5]
	((Can *)hw)->GFC.reg = data;
     e98:	3d70      	subs	r5, #112	; 0x70
     e9a:	2228      	movs	r2, #40	; 0x28
     e9c:	6806      	ldr	r6, [r0, #0]
     e9e:	5172      	str	r2, [r6, r5]
		hri_can_write_SIDFC_reg(dev->hw, CONF_CAN0_SIDFC_REG | CAN_SIDFC_FLSSA((uint32_t)can0_rx_std_filter));
     ea0:	001a      	movs	r2, r3
     ea2:	3214      	adds	r2, #20
     ea4:	0412      	lsls	r2, r2, #16
     ea6:	0c12      	lsrs	r2, r2, #16
     ea8:	4322      	orrs	r2, r4
	((Can *)hw)->SIDFC.reg = data;
     eaa:	2684      	movs	r6, #132	; 0x84
     eac:	6807      	ldr	r7, [r0, #0]
     eae:	51ba      	str	r2, [r7, r6]
		hri_can_write_XIDFC_reg(dev->hw, CONF_CAN0_XIDFC_REG | CAN_XIDFC_FLESA((uint32_t)can0_rx_ext_filter));
     eb0:	331c      	adds	r3, #28
     eb2:	041b      	lsls	r3, r3, #16
     eb4:	0c1b      	lsrs	r3, r3, #16
     eb6:	4323      	orrs	r3, r4
	((Can *)hw)->XIDFC.reg = data;
     eb8:	2288      	movs	r2, #136	; 0x88
     eba:	6804      	ldr	r4, [r0, #0]
     ebc:	50a3      	str	r3, [r4, r2]
	((Can *)hw)->XIDAM.reg = data;
     ebe:	2390      	movs	r3, #144	; 0x90
     ec0:	6802      	ldr	r2, [r0, #0]
     ec2:	50d1      	str	r1, [r2, r3]
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     ec4:	4b0e      	ldr	r3, [pc, #56]	; (f00 <_can_async_init+0x118>)
     ec6:	2280      	movs	r2, #128	; 0x80
     ec8:	0212      	lsls	r2, r2, #8
     eca:	515a      	str	r2, [r3, r5]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     ecc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     ed0:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     ed4:	3181      	adds	r1, #129	; 0x81
     ed6:	31ff      	adds	r1, #255	; 0xff
     ed8:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     eda:	601a      	str	r2, [r3, #0]
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
     edc:	6803      	ldr	r3, [r0, #0]
	((Can *)hw)->ILE.reg = data;
     ede:	2201      	movs	r2, #1
     ee0:	65da      	str	r2, [r3, #92]	; 0x5c
     ee2:	e793      	b.n	e0c <_can_async_init+0x24>
     ee4:	42001c00 	.word	0x42001c00
     ee8:	20000098 	.word	0x20000098
     eec:	20000000 	.word	0x20000000
     ef0:	02040c01 	.word	0x02040c01
     ef4:	00000501 	.word	0x00000501
     ef8:	20000110 	.word	0x20000110
     efc:	20000390 	.word	0x20000390
     f00:	e000e100 	.word	0xe000e100

00000f04 <CAN0_Handler>:

/*
 * \brief CAN interrupt handler
 */
void CAN0_Handler(void)
{
     f04:	b570      	push	{r4, r5, r6, lr}
	struct _can_async_device *dev = _can0_dev;
     f06:	4b19      	ldr	r3, [pc, #100]	; (f6c <CAN0_Handler+0x68>)
     f08:	681d      	ldr	r5, [r3, #0]
	uint32_t                  ir;
	ir = hri_can_read_IR_reg(dev->hw);
     f0a:	682b      	ldr	r3, [r5, #0]
	return ((Can *)hw)->IR.reg;
     f0c:	6d1c      	ldr	r4, [r3, #80]	; 0x50

	if (ir & CAN_IR_RF0N) {
     f0e:	07e3      	lsls	r3, r4, #31
     f10:	d414      	bmi.n	f3c <CAN0_Handler+0x38>
		dev->cb.rx_done(dev);
	}

	if (ir & CAN_IR_TC) {
     f12:	05a3      	lsls	r3, r4, #22
     f14:	d416      	bmi.n	f44 <CAN0_Handler+0x40>
		dev->cb.tx_done(dev);
	}

	if (ir & CAN_IR_BO) {
     f16:	01a3      	lsls	r3, r4, #6
     f18:	d418      	bmi.n	f4c <CAN0_Handler+0x48>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
	}

	if (ir & CAN_IR_EW) {
     f1a:	01e3      	lsls	r3, r4, #7
     f1c:	d41b      	bmi.n	f56 <CAN0_Handler+0x52>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
	}

	if (ir & CAN_IR_EP) {
     f1e:	0223      	lsls	r3, r4, #8
     f20:	d507      	bpl.n	f32 <CAN0_Handler+0x2e>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
     f22:	682b      	ldr	r3, [r5, #0]
	return (((Can *)hw)->PSR.reg & CAN_PSR_EP) >> CAN_PSR_EP_Pos;
     f24:	6c59      	ldr	r1, [r3, #68]	; 0x44
     f26:	0689      	lsls	r1, r1, #26
     f28:	0fc9      	lsrs	r1, r1, #31
     f2a:	3101      	adds	r1, #1
     f2c:	0028      	movs	r0, r5
     f2e:	68eb      	ldr	r3, [r5, #12]
     f30:	4798      	blx	r3
	}

	if (ir & CAN_IR_RF0L) {
     f32:	0723      	lsls	r3, r4, #28
     f34:	d414      	bmi.n	f60 <CAN0_Handler+0x5c>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
	}

	hri_can_write_IR_reg(dev->hw, ir);
     f36:	682b      	ldr	r3, [r5, #0]
	((Can *)hw)->IR.reg = data;
     f38:	651c      	str	r4, [r3, #80]	; 0x50
}
     f3a:	bd70      	pop	{r4, r5, r6, pc}
		dev->cb.rx_done(dev);
     f3c:	0028      	movs	r0, r5
     f3e:	68ab      	ldr	r3, [r5, #8]
     f40:	4798      	blx	r3
     f42:	e7e6      	b.n	f12 <CAN0_Handler+0xe>
		dev->cb.tx_done(dev);
     f44:	0028      	movs	r0, r5
     f46:	686b      	ldr	r3, [r5, #4]
     f48:	4798      	blx	r3
     f4a:	e7e4      	b.n	f16 <CAN0_Handler+0x12>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
     f4c:	2103      	movs	r1, #3
     f4e:	0028      	movs	r0, r5
     f50:	68eb      	ldr	r3, [r5, #12]
     f52:	4798      	blx	r3
     f54:	e7e1      	b.n	f1a <CAN0_Handler+0x16>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
     f56:	2100      	movs	r1, #0
     f58:	0028      	movs	r0, r5
     f5a:	68eb      	ldr	r3, [r5, #12]
     f5c:	4798      	blx	r3
     f5e:	e7de      	b.n	f1e <CAN0_Handler+0x1a>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
     f60:	2104      	movs	r1, #4
     f62:	0028      	movs	r0, r5
     f64:	68eb      	ldr	r3, [r5, #12]
     f66:	4798      	blx	r3
     f68:	e7e5      	b.n	f36 <CAN0_Handler+0x32>
     f6a:	46c0      	nop			; (mov r8, r8)
     f6c:	20000098 	.word	0x20000098

00000f70 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     f70:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
     f72:	4a0a      	ldr	r2, [pc, #40]	; (f9c <_init_chip+0x2c>)
     f74:	6853      	ldr	r3, [r2, #4]
     f76:	2102      	movs	r1, #2
     f78:	430b      	orrs	r3, r1
     f7a:	6053      	str	r3, [r2, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
     f7c:	4b08      	ldr	r3, [pc, #32]	; (fa0 <_init_chip+0x30>)
     f7e:	4798      	blx	r3
	_oscctrl_init_sources();
     f80:	4b08      	ldr	r3, [pc, #32]	; (fa4 <_init_chip+0x34>)
     f82:	4798      	blx	r3
	_mclk_init();
     f84:	4b08      	ldr	r3, [pc, #32]	; (fa8 <_init_chip+0x38>)
     f86:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
     f88:	2002      	movs	r0, #2
     f8a:	4c08      	ldr	r4, [pc, #32]	; (fac <_init_chip+0x3c>)
     f8c:	47a0      	blx	r4
#endif
	_oscctrl_init_referenced_generators();
     f8e:	4b08      	ldr	r3, [pc, #32]	; (fb0 <_init_chip+0x40>)
     f90:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     f92:	20fd      	movs	r0, #253	; 0xfd
     f94:	47a0      	blx	r4

	_div_init();
     f96:	4b07      	ldr	r3, [pc, #28]	; (fb4 <_init_chip+0x44>)
     f98:	4798      	blx	r3
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
#endif
}
     f9a:	bd10      	pop	{r4, pc}
     f9c:	41004000 	.word	0x41004000
     fa0:	000010e5 	.word	0x000010e5
     fa4:	000010fd 	.word	0x000010fd
     fa8:	000010d9 	.word	0x000010d9
     fac:	0000106d 	.word	0x0000106d
     fb0:	0000111d 	.word	0x0000111d
     fb4:	00000fb9 	.word	0x00000fb9

00000fb8 <_div_init>:

static inline void hri_divas_write_CTRLA_DLZ_bit(const void *const hw, bool value)
{
	uint8_t tmp;
	DIVAS_CRITICAL_SECTION_ENTER();
	tmp = ((Divas *)hw)->CTRLA.reg;
     fb8:	2290      	movs	r2, #144	; 0x90
     fba:	05d2      	lsls	r2, r2, #23
     fbc:	7813      	ldrb	r3, [r2, #0]
	tmp &= ~DIVAS_CTRLA_DLZ;
     fbe:	2102      	movs	r1, #2
     fc0:	438b      	bics	r3, r1
	tmp |= value << DIVAS_CTRLA_DLZ_Pos;
	((Divas *)hw)->CTRLA.reg = tmp;
     fc2:	7013      	strb	r3, [r2, #0]
 * \brief Initialize hardware for division operation
 */
void _div_init(void)
{
	hri_divas_write_CTRLA_DLZ_bit(DIVAS, CONF_DIVAS_DLZ);
}
     fc4:	4770      	bx	lr

00000fc6 <__aeabi_uidiv>:

/**
 * \brief Do unsigned division
 */
uint32_t __aeabi_uidiv(uint32_t numerator, uint32_t denominator)
{
     fc6:	b510      	push	{r4, lr}
     fc8:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     fca:	f3ef 8310 	mrs	r3, PRIMASK
	uint32_t res;
	_DIVAS_CRITICAL_ENTER();
     fce:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
     fd0:	b672      	cpsid	i
	DIVAS->CTRLA.bit.SIGNED = s;
     fd2:	2390      	movs	r3, #144	; 0x90
     fd4:	05db      	lsls	r3, r3, #23
     fd6:	781a      	ldrb	r2, [r3, #0]
     fd8:	2401      	movs	r4, #1
     fda:	43a2      	bics	r2, r4
     fdc:	701a      	strb	r2, [r3, #0]
	DIVAS->DIVIDEND.reg     = n;
     fde:	6098      	str	r0, [r3, #8]
	DIVAS->DIVISOR.reg      = d;
     fe0:	60d9      	str	r1, [r3, #12]
	while (DIVAS->STATUS.bit.BUSY) {
     fe2:	001a      	movs	r2, r3
     fe4:	7913      	ldrb	r3, [r2, #4]
     fe6:	07db      	lsls	r3, r3, #31
     fe8:	d4fc      	bmi.n	fe4 <__aeabi_uidiv+0x1e>
	_divas_div(0, numerator, denominator);
	res = _divas_result32();
     fea:	2390      	movs	r3, #144	; 0x90
     fec:	05db      	lsls	r3, r3, #23
     fee:	6918      	ldr	r0, [r3, #16]
	_DIVAS_CRITICAL_LEAVE();
     ff0:	9b01      	ldr	r3, [sp, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     ff2:	f383 8810 	msr	PRIMASK, r3
	return res;
}
     ff6:	b002      	add	sp, #8
     ff8:	bd10      	pop	{r4, pc}
	...

00000ffc <__aeabi_idivmod>:

/**
 * \brief Do signed division, return result and remainder
 */
uint64_t __aeabi_idivmod(int numerator, int denominator)
{
     ffc:	b510      	push	{r4, lr}
     ffe:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1000:	f3ef 8310 	mrs	r3, PRIMASK
	uint64_t res;
	_DIVAS_CRITICAL_ENTER();
    1004:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    1006:	b672      	cpsid	i
	DIVAS->CTRLA.bit.SIGNED = s;
    1008:	2390      	movs	r3, #144	; 0x90
    100a:	05db      	lsls	r3, r3, #23
    100c:	781a      	ldrb	r2, [r3, #0]
    100e:	2401      	movs	r4, #1
    1010:	4322      	orrs	r2, r4
    1012:	701a      	strb	r2, [r3, #0]
	DIVAS->DIVIDEND.reg     = n;
    1014:	6098      	str	r0, [r3, #8]
	DIVAS->DIVISOR.reg      = d;
    1016:	60d9      	str	r1, [r3, #12]
	while (DIVAS->STATUS.bit.BUSY) {
    1018:	001a      	movs	r2, r3
    101a:	7913      	ldrb	r3, [r2, #4]
    101c:	07db      	lsls	r3, r3, #31
    101e:	d4fc      	bmi.n	101a <STACK_SIZE+0x1a>
	_divas_div(1, numerator, denominator);
	res = _divas_result64();
    1020:	4b03      	ldr	r3, [pc, #12]	; (1030 <STACK_SIZE+0x30>)
    1022:	6818      	ldr	r0, [r3, #0]
    1024:	6859      	ldr	r1, [r3, #4]
	_DIVAS_CRITICAL_LEAVE();
    1026:	9b01      	ldr	r3, [sp, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    1028:	f383 8810 	msr	PRIMASK, r3
	return res;
}
    102c:	b002      	add	sp, #8
    102e:	bd10      	pop	{r4, pc}
    1030:	48000010 	.word	0x48000010

00001034 <__aeabi_uidivmod>:

/**
 * \brief Do unsigned division, return result and remainder
 */
uint64_t __aeabi_uidivmod(unsigned numerator, unsigned denominator)
{
    1034:	b510      	push	{r4, lr}
    1036:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1038:	f3ef 8310 	mrs	r3, PRIMASK
	uint64_t res;
	_DIVAS_CRITICAL_ENTER();
    103c:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    103e:	b672      	cpsid	i
	DIVAS->CTRLA.bit.SIGNED = s;
    1040:	2390      	movs	r3, #144	; 0x90
    1042:	05db      	lsls	r3, r3, #23
    1044:	781a      	ldrb	r2, [r3, #0]
    1046:	2401      	movs	r4, #1
    1048:	43a2      	bics	r2, r4
    104a:	701a      	strb	r2, [r3, #0]
	DIVAS->DIVIDEND.reg     = n;
    104c:	6098      	str	r0, [r3, #8]
	DIVAS->DIVISOR.reg      = d;
    104e:	60d9      	str	r1, [r3, #12]
	while (DIVAS->STATUS.bit.BUSY) {
    1050:	001a      	movs	r2, r3
    1052:	7913      	ldrb	r3, [r2, #4]
    1054:	07db      	lsls	r3, r3, #31
    1056:	d4fc      	bmi.n	1052 <__aeabi_uidivmod+0x1e>
	_divas_div(0, numerator, denominator);
	res = _divas_result64();
    1058:	4b03      	ldr	r3, [pc, #12]	; (1068 <__aeabi_uidivmod+0x34>)
    105a:	6818      	ldr	r0, [r3, #0]
    105c:	6859      	ldr	r1, [r3, #4]
	_DIVAS_CRITICAL_LEAVE();
    105e:	9b01      	ldr	r3, [sp, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    1060:	f383 8810 	msr	PRIMASK, r3
	return res;
}
    1064:	b002      	add	sp, #8
    1066:	bd10      	pop	{r4, pc}
    1068:	48000010 	.word	0x48000010

0000106c <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    106c:	07c3      	lsls	r3, r0, #31
    106e:	d507      	bpl.n	1080 <_gclk_init_generators_by_fref+0x14>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1070:	4a13      	ldr	r2, [pc, #76]	; (10c0 <_gclk_init_generators_by_fref+0x54>)
    1072:	4b14      	ldr	r3, [pc, #80]	; (10c4 <_gclk_init_generators_by_fref+0x58>)
    1074:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1076:	0019      	movs	r1, r3
    1078:	4a13      	ldr	r2, [pc, #76]	; (10c8 <_gclk_init_generators_by_fref+0x5c>)
    107a:	684b      	ldr	r3, [r1, #4]
    107c:	4213      	tst	r3, r2
    107e:	d1fc      	bne.n	107a <_gclk_init_generators_by_fref+0xe>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    1080:	0783      	lsls	r3, r0, #30
    1082:	d507      	bpl.n	1094 <_gclk_init_generators_by_fref+0x28>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1084:	4a11      	ldr	r2, [pc, #68]	; (10cc <_gclk_init_generators_by_fref+0x60>)
    1086:	4b0f      	ldr	r3, [pc, #60]	; (10c4 <_gclk_init_generators_by_fref+0x58>)
    1088:	625a      	str	r2, [r3, #36]	; 0x24
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    108a:	0019      	movs	r1, r3
    108c:	4a0e      	ldr	r2, [pc, #56]	; (10c8 <_gclk_init_generators_by_fref+0x5c>)
    108e:	684b      	ldr	r3, [r1, #4]
    1090:	4213      	tst	r3, r2
    1092:	d1fc      	bne.n	108e <_gclk_init_generators_by_fref+0x22>
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    1094:	0743      	lsls	r3, r0, #29
    1096:	d507      	bpl.n	10a8 <_gclk_init_generators_by_fref+0x3c>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1098:	4a0d      	ldr	r2, [pc, #52]	; (10d0 <_gclk_init_generators_by_fref+0x64>)
    109a:	4b0a      	ldr	r3, [pc, #40]	; (10c4 <_gclk_init_generators_by_fref+0x58>)
    109c:	629a      	str	r2, [r3, #40]	; 0x28
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    109e:	0019      	movs	r1, r3
    10a0:	4a09      	ldr	r2, [pc, #36]	; (10c8 <_gclk_init_generators_by_fref+0x5c>)
    10a2:	684b      	ldr	r3, [r1, #4]
    10a4:	4213      	tst	r3, r2
    10a6:	d1fc      	bne.n	10a2 <_gclk_init_generators_by_fref+0x36>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    10a8:	0703      	lsls	r3, r0, #28
    10aa:	d507      	bpl.n	10bc <_gclk_init_generators_by_fref+0x50>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    10ac:	4a09      	ldr	r2, [pc, #36]	; (10d4 <_gclk_init_generators_by_fref+0x68>)
    10ae:	4b05      	ldr	r3, [pc, #20]	; (10c4 <_gclk_init_generators_by_fref+0x58>)
    10b0:	62da      	str	r2, [r3, #44]	; 0x2c
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    10b2:	0019      	movs	r1, r3
    10b4:	4a04      	ldr	r2, [pc, #16]	; (10c8 <_gclk_init_generators_by_fref+0x5c>)
    10b6:	684b      	ldr	r3, [r1, #4]
    10b8:	4213      	tst	r3, r2
    10ba:	d1fc      	bne.n	10b6 <_gclk_init_generators_by_fref+0x4a>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SOURCE);
	}
#endif
}
    10bc:	4770      	bx	lr
    10be:	46c0      	nop			; (mov r8, r8)
    10c0:	00010100 	.word	0x00010100
    10c4:	40001c00 	.word	0x40001c00
    10c8:	000007fd 	.word	0x000007fd
    10cc:	001e0100 	.word	0x001e0100
    10d0:	000a0100 	.word	0x000a0100
    10d4:	00010107 	.word	0x00010107

000010d8 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    10d8:	2201      	movs	r2, #1
    10da:	4b01      	ldr	r3, [pc, #4]	; (10e0 <_mclk_init+0x8>)
    10dc:	711a      	strb	r2, [r3, #4]
 */
void _mclk_init(void)
{
	void *hw = (void *)MCLK;
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_CPUDIV(CONF_MCLK_CPUDIV));
}
    10de:	4770      	bx	lr
    10e0:	40000800 	.word	0x40000800

000010e4 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    10e4:	4b04      	ldr	r3, [pc, #16]	; (10f8 <_osc32kctrl_init_sources+0x14>)
    10e6:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSC32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSC32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    10e8:	21f8      	movs	r1, #248	; 0xf8
    10ea:	0149      	lsls	r1, r1, #5
    10ec:	400a      	ands	r2, r1
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    10ee:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    10f0:	2201      	movs	r2, #1
    10f2:	611a      	str	r2, [r3, #16]
		;
#endif
#endif
	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
	(void)calib;
}
    10f4:	4770      	bx	lr
    10f6:	46c0      	nop			; (mov r8, r8)
    10f8:	40001400 	.word	0x40001400

000010fc <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, hri_oscctrl_xoscctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL.reg = data;
    10fc:	4b05      	ldr	r3, [pc, #20]	; (1114 <_oscctrl_init_sources+0x18>)
    10fe:	4a06      	ldr	r2, [pc, #24]	; (1118 <_oscctrl_init_sources+0x1c>)
    1100:	821a      	strh	r2, [r3, #16]
}

static inline void hri_oscctrl_write_EVCTRL_reg(const void *const hw, hri_oscctrl_evctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->EVCTRL.reg = data;
    1102:	2200      	movs	r2, #0
    1104:	74da      	strb	r2, [r3, #19]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY) >> OSCCTRL_STATUS_XOSCRDY_Pos;
    1106:	0019      	movs	r1, r3
    1108:	3201      	adds	r2, #1
    110a:	68cb      	ldr	r3, [r1, #12]
	hri_oscctrl_write_OSC48MSTUP_reg(hw, OSCCTRL_OSC48MSTUP_STARTUP(CONF_OSC48M_STARTUP));
#endif

#if CONF_XOSC_CONFIG == 1
#if CONF_XOSC_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY_bit(hw))
    110c:	421a      	tst	r2, r3
    110e:	d0fc      	beq.n	110a <_oscctrl_init_sources+0xe>
#if CONF_OSC48M_ONDEMAND == 1
	hri_oscctrl_set_OSC48MCTRL_ONDEMAND_bit(hw);
#endif
#endif
	(void)hw;
}
    1110:	4770      	bx	lr
    1112:	46c0      	nop			; (mov r8, r8)
    1114:	40001000 	.word	0x40001000
    1118:	ffffc042 	.word	0xffffc042

0000111c <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    111c:	b510      	push	{r4, lr}
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    111e:	2141      	movs	r1, #65	; 0x41
    1120:	2380      	movs	r3, #128	; 0x80
    1122:	4a1a      	ldr	r2, [pc, #104]	; (118c <_oscctrl_init_referenced_generators+0x70>)
    1124:	50d1      	str	r1, [r2, r3]
}

static inline void hri_oscctrl_write_DPLLRATIO_reg(const void *const hw, hri_oscctrl_dpllratio_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DPLLRATIO.reg = data;
    1126:	222f      	movs	r2, #47	; 0x2f
    1128:	4b19      	ldr	r3, [pc, #100]	; (1190 <_oscctrl_init_referenced_generators+0x74>)
    112a:	621a      	str	r2, [r3, #32]
	while (((Oscctrl *)hw)->DPLLSYNCBUSY.reg & reg) {
    112c:	0018      	movs	r0, r3
    112e:	3915      	subs	r1, #21
    1130:	3a21      	subs	r2, #33	; 0x21
    1132:	5c43      	ldrb	r3, [r0, r1]
    1134:	4213      	tst	r3, r2
    1136:	d1fc      	bne.n	1132 <_oscctrl_init_referenced_generators+0x16>
}

static inline void hri_oscctrl_write_DPLLCTRLB_reg(const void *const hw, hri_oscctrl_dpllctrlb_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DPLLCTRLB.reg = data;
    1138:	4b15      	ldr	r3, [pc, #84]	; (1190 <_oscctrl_init_referenced_generators+0x74>)
    113a:	2220      	movs	r2, #32
    113c:	625a      	str	r2, [r3, #36]	; 0x24
}

static inline void hri_oscctrl_write_DPLLPRESC_reg(const void *const hw, hri_oscctrl_dpllpresc_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DPLLPRESC.reg = data;
    113e:	2100      	movs	r1, #0
    1140:	3208      	adds	r2, #8
    1142:	5499      	strb	r1, [r3, r2]
	while (((Oscctrl *)hw)->DPLLSYNCBUSY.reg & reg) {
    1144:	0018      	movs	r0, r3
    1146:	312c      	adds	r1, #44	; 0x2c
    1148:	3a1a      	subs	r2, #26
    114a:	5c43      	ldrb	r3, [r0, r1]
    114c:	4213      	tst	r3, r2
    114e:	d1fc      	bne.n	114a <_oscctrl_init_referenced_generators+0x2e>
	((Oscctrl *)hw)->DPLLCTRLA.reg = data;
    1150:	2202      	movs	r2, #2
    1152:	4b0f      	ldr	r3, [pc, #60]	; (1190 <_oscctrl_init_referenced_generators+0x74>)
    1154:	771a      	strb	r2, [r3, #28]
	while (((Oscctrl *)hw)->DPLLSYNCBUSY.reg & reg) {
    1156:	0018      	movs	r0, r3
    1158:	212c      	movs	r1, #44	; 0x2c
    115a:	5c43      	ldrb	r3, [r0, r1]
    115c:	4213      	tst	r3, r2
    115e:	d1fc      	bne.n	115a <_oscctrl_init_referenced_generators+0x3e>
	return (((Oscctrl *)hw)->DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK) >> OSCCTRL_DPLLSTATUS_LOCK_Pos;
    1160:	4a0b      	ldr	r2, [pc, #44]	; (1190 <_oscctrl_init_referenced_generators+0x74>)
    1162:	2330      	movs	r3, #48	; 0x30
	                                    | (CONF_DPLL_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DPLL_CONFIG == 1
#if CONF_DPLL_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw)))
    1164:	2001      	movs	r0, #1
    1166:	2402      	movs	r4, #2
    1168:	5cd1      	ldrb	r1, [r2, r3]
    116a:	4201      	tst	r1, r0
    116c:	d102      	bne.n	1174 <_oscctrl_init_referenced_generators+0x58>
	return (((Oscctrl *)hw)->DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY) >> OSCCTRL_DPLLSTATUS_CLKRDY_Pos;
    116e:	5cd1      	ldrb	r1, [r2, r3]
    1170:	4221      	tst	r1, r4
    1172:	d0f9      	beq.n	1168 <_oscctrl_init_referenced_generators+0x4c>
	((Oscctrl *)hw)->DPLLCTRLA.reg |= OSCCTRL_DPLLCTRLA_ONDEMAND;
    1174:	4a06      	ldr	r2, [pc, #24]	; (1190 <_oscctrl_init_referenced_generators+0x74>)
    1176:	7f13      	ldrb	r3, [r2, #28]
    1178:	2180      	movs	r1, #128	; 0x80
    117a:	430b      	orrs	r3, r1
    117c:	7713      	strb	r3, [r2, #28]
	while (((Oscctrl *)hw)->DPLLSYNCBUSY.reg & reg) {
    117e:	0010      	movs	r0, r2
    1180:	3954      	subs	r1, #84	; 0x54
    1182:	220e      	movs	r2, #14
    1184:	5c43      	ldrb	r3, [r0, r1]
    1186:	4213      	tst	r3, r2
    1188:	d1fc      	bne.n	1184 <_oscctrl_init_referenced_generators+0x68>
#if CONF_DPLL_ONDEMAND == 1
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw);
#endif
#endif
	(void)hw;
}
    118a:	bd10      	pop	{r4, pc}
    118c:	40001c00 	.word	0x40001c00
    1190:	40001000 	.word	0x40001000

00001194 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
    1194:	b510      	push	{r4, lr}
    1196:	0004      	movs	r4, r0
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    1198:	4b1f      	ldr	r3, [pc, #124]	; (1218 <_usart_init+0x84>)
    119a:	18c3      	adds	r3, r0, r3
    119c:	0a9b      	lsrs	r3, r3, #10
		if (_usarts[i].number == sercom_offset) {
    119e:	b2db      	uxtb	r3, r3
    11a0:	2b03      	cmp	r3, #3
    11a2:	d004      	beq.n	11ae <_usart_init+0x1a>
	ASSERT(false);
    11a4:	4a1d      	ldr	r2, [pc, #116]	; (121c <_usart_init+0x88>)
    11a6:	491e      	ldr	r1, [pc, #120]	; (1220 <_usart_init+0x8c>)
    11a8:	2000      	movs	r0, #0
    11aa:	4b1e      	ldr	r3, [pc, #120]	; (1224 <_usart_init+0x90>)
    11ac:	4798      	blx	r3
	};
}

static inline bool hri_sercomusart_is_syncing(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    11ae:	69e3      	ldr	r3, [r4, #28]
	uint8_t i = _get_sercom_index(hw);

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    11b0:	07db      	lsls	r3, r3, #31
    11b2:	d418      	bmi.n	11e6 <_usart_init+0x52>
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    11b4:	2203      	movs	r2, #3
    11b6:	69e3      	ldr	r3, [r4, #28]
    11b8:	421a      	tst	r2, r3
    11ba:	d1fc      	bne.n	11b6 <_usart_init+0x22>
static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    11bc:	6823      	ldr	r3, [r4, #0]
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    11be:	079b      	lsls	r3, r3, #30
    11c0:	d50b      	bpl.n	11da <_usart_init+0x46>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    11c2:	6823      	ldr	r3, [r4, #0]
    11c4:	2202      	movs	r2, #2
    11c6:	4393      	bics	r3, r2
    11c8:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    11ca:	3201      	adds	r2, #1
    11cc:	69e3      	ldr	r3, [r4, #28]
    11ce:	421a      	tst	r2, r3
    11d0:	d1fc      	bne.n	11cc <_usart_init+0x38>
    11d2:	2202      	movs	r2, #2
    11d4:	69e3      	ldr	r3, [r4, #28]
    11d6:	421a      	tst	r2, r3
    11d8:	d1fc      	bne.n	11d4 <_usart_init+0x40>
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
    11da:	2305      	movs	r3, #5
    11dc:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    11de:	2203      	movs	r2, #3
    11e0:	69e3      	ldr	r3, [r4, #28]
    11e2:	421a      	tst	r2, r3
    11e4:	d1fc      	bne.n	11e0 <_usart_init+0x4c>
    11e6:	2201      	movs	r2, #1
    11e8:	69e3      	ldr	r3, [r4, #28]
    11ea:	421a      	tst	r2, r3
    11ec:	d1fc      	bne.n	11e8 <_usart_init+0x54>
	((Sercom *)hw)->USART.CTRLA.reg = data;
    11ee:	4b0e      	ldr	r3, [pc, #56]	; (1228 <_usart_init+0x94>)
    11f0:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    11f2:	2203      	movs	r2, #3
    11f4:	69e3      	ldr	r3, [r4, #28]
    11f6:	421a      	tst	r2, r3
    11f8:	d1fc      	bne.n	11f4 <_usart_init+0x60>
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
    11fa:	23c0      	movs	r3, #192	; 0xc0
    11fc:	029b      	lsls	r3, r3, #10
    11fe:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1200:	2207      	movs	r2, #7
    1202:	69e3      	ldr	r3, [r4, #28]
    1204:	421a      	tst	r2, r3
    1206:	d1fc      	bne.n	1202 <_usart_init+0x6e>
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
    1208:	4b08      	ldr	r3, [pc, #32]	; (122c <_usart_init+0x98>)
    120a:	81a3      	strh	r3, [r4, #12]
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    120c:	2300      	movs	r3, #0
    120e:	73a3      	strb	r3, [r4, #14]
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    1210:	2230      	movs	r2, #48	; 0x30
    1212:	54a3      	strb	r3, [r4, r2]

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);

	return ERR_NONE;
}
    1214:	2000      	movs	r0, #0
    1216:	bd10      	pop	{r4, pc}
    1218:	bdfffc00 	.word	0xbdfffc00
    121c:	0000023a 	.word	0x0000023a
    1220:	00003f74 	.word	0x00003f74
    1224:	00000b49 	.word	0x00000b49
    1228:	40100004 	.word	0x40100004
    122c:	fffff045 	.word	0xfffff045

00001230 <_usart_sync_init>:
{
    1230:	b570      	push	{r4, r5, r6, lr}
    1232:	0005      	movs	r5, r0
    1234:	000c      	movs	r4, r1
	ASSERT(device);
    1236:	1e43      	subs	r3, r0, #1
    1238:	4198      	sbcs	r0, r3
    123a:	b2c0      	uxtb	r0, r0
    123c:	22b4      	movs	r2, #180	; 0xb4
    123e:	4904      	ldr	r1, [pc, #16]	; (1250 <_usart_sync_init+0x20>)
    1240:	4b04      	ldr	r3, [pc, #16]	; (1254 <_usart_sync_init+0x24>)
    1242:	4798      	blx	r3
	device->hw = hw;
    1244:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
    1246:	0020      	movs	r0, r4
    1248:	4b03      	ldr	r3, [pc, #12]	; (1258 <_usart_sync_init+0x28>)
    124a:	4798      	blx	r3
}
    124c:	bd70      	pop	{r4, r5, r6, pc}
    124e:	46c0      	nop			; (mov r8, r8)
    1250:	00003f74 	.word	0x00003f74
    1254:	00000b49 	.word	0x00000b49
    1258:	00001195 	.word	0x00001195

0000125c <_usart_sync_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    125c:	6802      	ldr	r2, [r0, #0]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    125e:	6813      	ldr	r3, [r2, #0]
    1260:	2102      	movs	r1, #2
    1262:	430b      	orrs	r3, r1
    1264:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1266:	3101      	adds	r1, #1
    1268:	69d3      	ldr	r3, [r2, #28]
    126a:	4219      	tst	r1, r3
    126c:	d1fc      	bne.n	1268 <_usart_sync_enable+0xc>
}
    126e:	4770      	bx	lr

00001270 <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    1270:	6803      	ldr	r3, [r0, #0]
    1272:	b289      	uxth	r1, r1
	((Sercom *)hw)->USART.DATA.reg = data;
    1274:	8519      	strh	r1, [r3, #40]	; 0x28
}
    1276:	4770      	bx	lr

00001278 <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
    1278:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
    127a:	8d18      	ldrh	r0, [r3, #40]	; 0x28
    127c:	b2c0      	uxtb	r0, r0
}
    127e:	4770      	bx	lr

00001280 <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    1280:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    1282:	7e18      	ldrb	r0, [r3, #24]
    1284:	2301      	movs	r3, #1
    1286:	4018      	ands	r0, r3
}
    1288:	4770      	bx	lr

0000128a <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
    128a:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    128c:	7e18      	ldrb	r0, [r3, #24]
    128e:	0780      	lsls	r0, r0, #30
    1290:	0fc0      	lsrs	r0, r0, #31
}
    1292:	4770      	bx	lr

00001294 <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    1294:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    1296:	7e18      	ldrb	r0, [r3, #24]
    1298:	0740      	lsls	r0, r0, #29
    129a:	0fc0      	lsrs	r0, r0, #31
}
    129c:	4770      	bx	lr
	...

000012a0 <_temp_sync_init>:

/**
 * \brief              Initialize Temperature Sensor
 */
int32_t _temp_sync_init(struct _temp_sync_device *const dev, void *const hw)
{
    12a0:	b570      	push	{r4, r5, r6, lr}
    12a2:	0005      	movs	r5, r0
    12a4:	000c      	movs	r4, r1
	};
}

static inline bool hri_tsens_is_syncing(const void *const hw, hri_tsens_syncbusy_reg_t reg)
{
	return ((Tsens *)hw)->SYNCBUSY.reg & reg;
    12a6:	688b      	ldr	r3, [r1, #8]
 *
 * \param[in] dev      The pointer to device instance
 */
static inline int32_t _temp_init_calibration(void *const hw)
{
	if (!hri_tsens_is_syncing(hw, TSENS_SYNCBUSY_SWRST)) {
    12a8:	07db      	lsls	r3, r3, #31
    12aa:	d52d      	bpl.n	1308 <_temp_sync_init+0x68>
	while (((Tsens *)hw)->SYNCBUSY.reg & reg) {
    12ac:	2201      	movs	r2, #1
    12ae:	68a3      	ldr	r3, [r4, #8]
    12b0:	421a      	tst	r2, r3
    12b2:	d1fc      	bne.n	12ae <_temp_sync_init+0xe>
		}
		hri_tsens_write_CTRLA_reg(hw, TSENS_CTRLA_SWRST);
	}
	hri_tsens_wait_for_sync(hw, TSENS_SYNCBUSY_SWRST);

	hri_tsens_write_CAL_reg(hw, TSENS_CAL_TCAL(CONF_TSENS_CAL_TCAL) | TSENS_CAL_FCAL(CONF_TSENS_CAL_FCAL));
    12b4:	4921      	ldr	r1, [pc, #132]	; (133c <_temp_sync_init+0x9c>)
    12b6:	680b      	ldr	r3, [r1, #0]
    12b8:	021a      	lsls	r2, r3, #8
    12ba:	20fc      	movs	r0, #252	; 0xfc
    12bc:	0180      	lsls	r0, r0, #6
    12be:	4002      	ands	r2, r0
    12c0:	051b      	lsls	r3, r3, #20
    12c2:	0e9b      	lsrs	r3, r3, #26
    12c4:	4313      	orrs	r3, r2
}

static inline void hri_tsens_write_CAL_reg(const void *const hw, hri_tsens_cal_reg_t data)
{
	TSENS_CRITICAL_SECTION_ENTER();
	((Tsens *)hw)->CAL.reg = data;
    12c6:	6223      	str	r3, [r4, #32]
	hri_tsens_write_GAIN_reg(hw, CONF_TSENS_CAL_GAIN);
    12c8:	4e1d      	ldr	r6, [pc, #116]	; (1340 <_temp_sync_init+0xa0>)
    12ca:	6833      	ldr	r3, [r6, #0]
    12cc:	0518      	lsls	r0, r3, #20
    12ce:	23f0      	movs	r3, #240	; 0xf0
    12d0:	041b      	lsls	r3, r3, #16
    12d2:	4018      	ands	r0, r3
    12d4:	680b      	ldr	r3, [r1, #0]
    12d6:	0b1b      	lsrs	r3, r3, #12
    12d8:	4318      	orrs	r0, r3
    12da:	4b1a      	ldr	r3, [pc, #104]	; (1344 <_temp_sync_init+0xa4>)
    12dc:	4798      	blx	r3
    12de:	491a      	ldr	r1, [pc, #104]	; (1348 <_temp_sync_init+0xa8>)
    12e0:	4b1a      	ldr	r3, [pc, #104]	; (134c <_temp_sync_init+0xac>)
    12e2:	4798      	blx	r3
    12e4:	4b1a      	ldr	r3, [pc, #104]	; (1350 <_temp_sync_init+0xb0>)
    12e6:	4798      	blx	r3
	((Tsens *)hw)->GAIN.reg = data;
    12e8:	61a0      	str	r0, [r4, #24]
	hri_tsens_write_OFFSET_reg(hw, CONF_TSENS_CAL_OFFSET);
    12ea:	6833      	ldr	r3, [r6, #0]
    12ec:	011b      	lsls	r3, r3, #4
    12ee:	0a1b      	lsrs	r3, r3, #8
	((Tsens *)hw)->OFFSET.reg = data;
    12f0:	61e3      	str	r3, [r4, #28]
	dev->hw = hw;
    12f2:	602c      	str	r4, [r5, #0]
	((Tsens *)hw)->CTRLA.reg = data;
    12f4:	2300      	movs	r3, #0
    12f6:	7023      	strb	r3, [r4, #0]
	while (((Tsens *)hw)->SYNCBUSY.reg & reg) {
    12f8:	2203      	movs	r2, #3
    12fa:	68a3      	ldr	r3, [r4, #8]
    12fc:	421a      	tst	r2, r3
    12fe:	d1fc      	bne.n	12fa <_temp_sync_init+0x5a>
	((Tsens *)hw)->CTRLC.reg = data;
    1300:	2300      	movs	r3, #0
    1302:	70a3      	strb	r3, [r4, #2]
}
    1304:	2000      	movs	r0, #0
    1306:	bd70      	pop	{r4, r5, r6, pc}
	while (((Tsens *)hw)->SYNCBUSY.reg & reg) {
    1308:	2203      	movs	r2, #3
    130a:	68a3      	ldr	r3, [r4, #8]
    130c:	421a      	tst	r2, r3
    130e:	d1fc      	bne.n	130a <_temp_sync_init+0x6a>
	tmp = ((Tsens *)hw)->CTRLA.reg;
    1310:	7823      	ldrb	r3, [r4, #0]
		if (hri_tsens_get_CTRLA_reg(hw, TSENS_CTRLA_ENABLE)) {
    1312:	079b      	lsls	r3, r3, #30
    1314:	d50b      	bpl.n	132e <_temp_sync_init+0x8e>
	((Tsens *)hw)->CTRLA.reg &= ~TSENS_CTRLA_ENABLE;
    1316:	7823      	ldrb	r3, [r4, #0]
    1318:	2202      	movs	r2, #2
    131a:	4393      	bics	r3, r2
    131c:	7023      	strb	r3, [r4, #0]
	while (((Tsens *)hw)->SYNCBUSY.reg & reg) {
    131e:	3201      	adds	r2, #1
    1320:	68a3      	ldr	r3, [r4, #8]
    1322:	421a      	tst	r2, r3
    1324:	d1fc      	bne.n	1320 <_temp_sync_init+0x80>
    1326:	2202      	movs	r2, #2
    1328:	68a3      	ldr	r3, [r4, #8]
    132a:	421a      	tst	r2, r3
    132c:	d1fc      	bne.n	1328 <_temp_sync_init+0x88>
	((Tsens *)hw)->CTRLA.reg = data;
    132e:	2301      	movs	r3, #1
    1330:	7023      	strb	r3, [r4, #0]
	while (((Tsens *)hw)->SYNCBUSY.reg & reg) {
    1332:	2203      	movs	r2, #3
    1334:	68a3      	ldr	r3, [r4, #8]
    1336:	421a      	tst	r2, r3
    1338:	d1fc      	bne.n	1334 <_temp_sync_init+0x94>
    133a:	e7b7      	b.n	12ac <_temp_sync_init+0xc>
    133c:	00806030 	.word	0x00806030
    1340:	00806034 	.word	0x00806034
    1344:	00001e65 	.word	0x00001e65
    1348:	3caaaaab 	.word	0x3caaaaab
    134c:	000018ad 	.word	0x000018ad
    1350:	000016f1 	.word	0x000016f1

00001354 <_temp_sync_enable>:
	_temp_enable(dev->hw);
    1354:	6802      	ldr	r2, [r0, #0]
	((Tsens *)hw)->CTRLA.reg |= TSENS_CTRLA_ENABLE;
    1356:	7813      	ldrb	r3, [r2, #0]
    1358:	2102      	movs	r1, #2
    135a:	430b      	orrs	r3, r1
    135c:	7013      	strb	r3, [r2, #0]
	while (((Tsens *)hw)->SYNCBUSY.reg & reg) {
    135e:	3101      	adds	r1, #1
    1360:	6893      	ldr	r3, [r2, #8]
    1362:	4219      	tst	r1, r3
    1364:	d1fc      	bne.n	1360 <_temp_sync_enable+0xc>
}
    1366:	2000      	movs	r0, #0
    1368:	4770      	bx	lr

0000136a <_temp_sync_read>:
{
    136a:	b530      	push	{r4, r5, lr}
	hri_tsens_wait_for_sync(dev->hw, TSENS_SYNCBUSY_ENABLE);
    136c:	6802      	ldr	r2, [r0, #0]
    136e:	2402      	movs	r4, #2
    1370:	6893      	ldr	r3, [r2, #8]
    1372:	421c      	tst	r4, r3
    1374:	d1fc      	bne.n	1370 <_temp_sync_read+0x6>
}

static inline void hri_tsens_write_CTRLB_reg(const void *const hw, hri_tsens_ctrlb_reg_t data)
{
	TSENS_CRITICAL_SECTION_ENTER();
	((Tsens *)hw)->CTRLB.reg = data;
    1376:	2301      	movs	r3, #1
    1378:	7053      	strb	r3, [r2, #1]
	while (!hri_tsens_get_interrupt_RESRDY_bit(dev->hw)) {
    137a:	6803      	ldr	r3, [r0, #0]
    137c:	2401      	movs	r4, #1
		if (hri_tsens_get_interrupt_OVF_bit(dev->hw)) {
    137e:	2508      	movs	r5, #8
	return (((Tsens *)hw)->INTFLAG.reg & TSENS_INTFLAG_RESRDY) >> TSENS_INTFLAG_RESRDY_Pos;
    1380:	799a      	ldrb	r2, [r3, #6]
	while (!hri_tsens_get_interrupt_RESRDY_bit(dev->hw)) {
    1382:	4222      	tst	r2, r4
    1384:	d107      	bne.n	1396 <_temp_sync_read+0x2c>
	return (((Tsens *)hw)->INTFLAG.reg & TSENS_INTFLAG_OVF) >> TSENS_INTFLAG_OVF_Pos;
    1386:	799a      	ldrb	r2, [r3, #6]
		if (hri_tsens_get_interrupt_OVF_bit(dev->hw)) {
    1388:	422a      	tst	r2, r5
    138a:	d0f9      	beq.n	1380 <_temp_sync_read+0x16>
	((Tsens *)hw)->INTFLAG.reg = TSENS_INTFLAG_OVF;
    138c:	2208      	movs	r2, #8
    138e:	719a      	strb	r2, [r3, #6]
			return ERR_OVERFLOW;
    1390:	2013      	movs	r0, #19
    1392:	4240      	negs	r0, r0
    1394:	e009      	b.n	13aa <_temp_sync_read+0x40>
	return (((Tsens *)hw)->VALUE.reg & TSENS_VALUE_VALUE_Msk) >> TSENS_VALUE_VALUE_Pos;
    1396:	68db      	ldr	r3, [r3, #12]
    1398:	021b      	lsls	r3, r3, #8
static inline void _tsens_read_temp(void *hw, int32_t *temp)
{
	*temp = hri_tsens_read_VALUE_VALUE_bf(hw);

	/* Convert temp to int32, since VALUE from register is 24 bits singed */
	if (*temp & 0x00800000) {
    139a:	0a1a      	lsrs	r2, r3, #8
    139c:	2b00      	cmp	r3, #0
    139e:	db05      	blt.n	13ac <_temp_sync_read+0x42>
	*temp = hri_tsens_read_VALUE_VALUE_bf(hw);
    13a0:	600a      	str	r2, [r1, #0]
	hri_tsens_clear_interrupt_RESRDY_bit(dev->hw);
    13a2:	6803      	ldr	r3, [r0, #0]
	((Tsens *)hw)->INTFLAG.reg = TSENS_INTFLAG_RESRDY;
    13a4:	2201      	movs	r2, #1
    13a6:	719a      	strb	r2, [r3, #6]
	return ERR_NONE;
    13a8:	2000      	movs	r0, #0
}
    13aa:	bd30      	pop	{r4, r5, pc}
		*temp |= ~TSENS_VALUE_MASK;
    13ac:	23ff      	movs	r3, #255	; 0xff
    13ae:	061b      	lsls	r3, r3, #24
    13b0:	431a      	orrs	r2, r3
    13b2:	600a      	str	r2, [r1, #0]
    13b4:	e7f5      	b.n	13a2 <_temp_sync_read+0x38>
	...

000013b8 <print_adc_voltage>:
#define ADC_CH_12V_VMON			0x09	// PA09 - AIN9
#define ADC_CH_5V_IMON			0x0A	// PA10 - AIN10
#define ADC_CH_12V_IMON			0x0B	// PA11 - AIN11

void print_adc_voltage(uint8_t channel, int numerator, int demoninator, char unit)
{
    13b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    13ba:	46d6      	mov	lr, sl
    13bc:	b500      	push	{lr}
    13be:	b088      	sub	sp, #32
    13c0:	9004      	str	r0, [sp, #16]
    13c2:	000e      	movs	r6, r1
    13c4:	0015      	movs	r5, r2
    13c6:	469a      	mov	sl, r3
    13c8:	4b20      	ldr	r3, [pc, #128]	; (144c <print_adc_voltage+0x94>)
    13ca:	3b01      	subs	r3, #1

#define TICKS_PER_MILLISECOND 12000

static inline void WAIT_APPROX_MILLIS(unsigned long millis)
{
	for(int i =0; i < (millis * TICKS_PER_MILLISECOND); i++);
    13cc:	2b00      	cmp	r3, #0
    13ce:	d1fc      	bne.n	13ca <print_adc_voltage+0x12>
		uint8_t buffer[2];
		WAIT_APPROX_MILLIS(10);
		_adc_sync_set_inputs(&ADC_0, channel, 0x18, 0);
    13d0:	4c1f      	ldr	r4, [pc, #124]	; (1450 <print_adc_voltage+0x98>)
    13d2:	2218      	movs	r2, #24
    13d4:	9904      	ldr	r1, [sp, #16]
    13d6:	0020      	movs	r0, r4
    13d8:	4f1e      	ldr	r7, [pc, #120]	; (1454 <print_adc_voltage+0x9c>)
    13da:	47b8      	blx	r7
		adc_sync_enable_channel(&ADC_0, 0);
    13dc:	2100      	movs	r1, #0
    13de:	0020      	movs	r0, r4
    13e0:	4b1d      	ldr	r3, [pc, #116]	; (1458 <print_adc_voltage+0xa0>)
    13e2:	4798      	blx	r3
		adc_sync_read_channel(&ADC_0, 0, buffer, 2);
    13e4:	af07      	add	r7, sp, #28
    13e6:	2302      	movs	r3, #2
    13e8:	003a      	movs	r2, r7
    13ea:	2100      	movs	r1, #0
    13ec:	0020      	movs	r0, r4
    13ee:	4c1b      	ldr	r4, [pc, #108]	; (145c <print_adc_voltage+0xa4>)
    13f0:	47a0      	blx	r4
		//adc_sync_disable_channel(&ADC_0, channel);
		unsigned int val = (buffer[1]<<8)+(buffer[0]);
    13f2:	787c      	ldrb	r4, [r7, #1]
    13f4:	0224      	lsls	r4, r4, #8
    13f6:	783b      	ldrb	r3, [r7, #0]
    13f8:	18e4      	adds	r4, r4, r3
		unsigned int voltage_uV = val*(ADC_REF_VOLTAGE*adc_pres/ADC_RESOLUTION);
    13fa:	0020      	movs	r0, r4
    13fc:	4b18      	ldr	r3, [pc, #96]	; (1460 <print_adc_voltage+0xa8>)
    13fe:	4798      	blx	r3
    1400:	2200      	movs	r2, #0
    1402:	4b18      	ldr	r3, [pc, #96]	; (1464 <print_adc_voltage+0xac>)
    1404:	4f18      	ldr	r7, [pc, #96]	; (1468 <print_adc_voltage+0xb0>)
    1406:	47b8      	blx	r7
    1408:	4b18      	ldr	r3, [pc, #96]	; (146c <print_adc_voltage+0xb4>)
    140a:	4798      	blx	r3
    140c:	0007      	movs	r7, r0
		unsigned int votlage_converted = voltage_uV*numerator/demoninator;
    140e:	0030      	movs	r0, r6
    1410:	4378      	muls	r0, r7
    1412:	4e17      	ldr	r6, [pc, #92]	; (1470 <print_adc_voltage+0xb8>)
    1414:	0029      	movs	r1, r5
    1416:	47b0      	blx	r6
		printf("ADC CH %u: %u, %u, %u.%u %c\r\n", channel, val, voltage_uV, (unsigned int)(votlage_converted/adc_pres),(unsigned int)(votlage_converted/1000-(adc_pres/1000)*(votlage_converted/adc_pres)), unit);
    1418:	4916      	ldr	r1, [pc, #88]	; (1474 <print_adc_voltage+0xbc>)
    141a:	9005      	str	r0, [sp, #20]
    141c:	47b0      	blx	r6
    141e:	0005      	movs	r5, r0
    1420:	4653      	mov	r3, sl
    1422:	9302      	str	r3, [sp, #8]
    1424:	21fa      	movs	r1, #250	; 0xfa
    1426:	0089      	lsls	r1, r1, #2
    1428:	9805      	ldr	r0, [sp, #20]
    142a:	47b0      	blx	r6
    142c:	23fa      	movs	r3, #250	; 0xfa
    142e:	009b      	lsls	r3, r3, #2
    1430:	436b      	muls	r3, r5
    1432:	1ac0      	subs	r0, r0, r3
    1434:	9001      	str	r0, [sp, #4]
    1436:	9500      	str	r5, [sp, #0]
    1438:	003b      	movs	r3, r7
    143a:	0022      	movs	r2, r4
    143c:	9904      	ldr	r1, [sp, #16]
    143e:	480e      	ldr	r0, [pc, #56]	; (1478 <print_adc_voltage+0xc0>)
    1440:	4c0e      	ldr	r4, [pc, #56]	; (147c <print_adc_voltage+0xc4>)
    1442:	47a0      	blx	r4
}
    1444:	b008      	add	sp, #32
    1446:	bc04      	pop	{r2}
    1448:	4692      	mov	sl, r2
    144a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    144c:	0001d4c0 	.word	0x0001d4c0
    1450:	20000100 	.word	0x20000100
    1454:	00000dad 	.word	0x00000dad
    1458:	00000795 	.word	0x00000795
    145c:	000007c1 	.word	0x000007c1
    1460:	00002a85 	.word	0x00002a85
    1464:	403f4000 	.word	0x403f4000
    1468:	00001ef1 	.word	0x00001ef1
    146c:	00001721 	.word	0x00001721
    1470:	00000fc7 	.word	0x00000fc7
    1474:	000f4240 	.word	0x000f4240
    1478:	00003f90 	.word	0x00003f90
    147c:	0000339d 	.word	0x0000339d

00001480 <main>:
	(void) ins;
	o1heapFree(heap, pointer);
}

int main(void)
{
    1480:	b5f0      	push	{r4, r5, r6, r7, lr}
    1482:	b083      	sub	sp, #12
	unsigned int loop_count = 0;
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    1484:	4b32      	ldr	r3, [pc, #200]	; (1550 <main+0xd0>)
    1486:	4798      	blx	r3
		
	printf("init done\r\n");
    1488:	4832      	ldr	r0, [pc, #200]	; (1554 <main+0xd4>)
    148a:	4b33      	ldr	r3, [pc, #204]	; (1558 <main+0xd8>)
    148c:	4798      	blx	r3
	printf("adc res: %i, %i\r\n",CONF_ADC_0_RESSEL,ADC_RESOLUTION);
    148e:	2280      	movs	r2, #128	; 0x80
    1490:	0252      	lsls	r2, r2, #9
    1492:	2101      	movs	r1, #1
    1494:	4831      	ldr	r0, [pc, #196]	; (155c <main+0xdc>)
    1496:	4b32      	ldr	r3, [pc, #200]	; (1560 <main+0xe0>)
    1498:	4798      	blx	r3
    149a:	4b32      	ldr	r3, [pc, #200]	; (1564 <main+0xe4>)
    149c:	3b01      	subs	r3, #1
    149e:	2b00      	cmp	r3, #0
    14a0:	d1fc      	bne.n	149c <main+0x1c>
	WAIT_APPROX_MILLIS(100);
	int32_t temp;
	temp_sync_enable(&TEMPERATURE_SENSOR_0);
    14a2:	4831      	ldr	r0, [pc, #196]	; (1568 <main+0xe8>)
    14a4:	4b31      	ldr	r3, [pc, #196]	; (156c <main+0xec>)
    14a6:	4798      	blx	r3
	/* Replace with your application code */
	
	printf("O1Heap allocating memory at: 0x%x size: 0x%x bytes...\r\n", O1_HEAP_START, O1_HEAP_SIZE);
    14a8:	2280      	movs	r2, #128	; 0x80
    14aa:	0152      	lsls	r2, r2, #5
    14ac:	4930      	ldr	r1, [pc, #192]	; (1570 <main+0xf0>)
    14ae:	4831      	ldr	r0, [pc, #196]	; (1574 <main+0xf4>)
    14b0:	4b2b      	ldr	r3, [pc, #172]	; (1560 <main+0xe0>)
    14b2:	4798      	blx	r3
	
	//heap = o1heapInit(O1_HEAP_START, O1_HEAP_SIZE, NULL, NULL);
	
	if(heap == NULL) {
    14b4:	4b30      	ldr	r3, [pc, #192]	; (1578 <main+0xf8>)
    14b6:	681b      	ldr	r3, [r3, #0]
    14b8:	2b00      	cmp	r3, #0
    14ba:	d106      	bne.n	14ca <main+0x4a>
		printf("O1Heap memory allocation FAILED\r\n");
    14bc:	482f      	ldr	r0, [pc, #188]	; (157c <main+0xfc>)
    14be:	4b26      	ldr	r3, [pc, #152]	; (1558 <main+0xd8>)
    14c0:	4798      	blx	r3
	printf("adc res: %i, %i\r\n",CONF_ADC_0_RESSEL,ADC_RESOLUTION);
    14c2:	2600      	movs	r6, #0
		if(loop_count>0) {
			gpio_set_pin_level(EN_5V, 1);
			gpio_set_pin_level(EN_12V, 1);
		}
		
		print_adc_voltage(ADC_CH_VBAT_VMON, 250, 10, 'V');
    14c4:	4c2e      	ldr	r4, [pc, #184]	; (1580 <main+0x100>)
		print_adc_voltage(ADC_CH_5V_VMON, 56, 20, 'V');
		print_adc_voltage(ADC_CH_5V_IMON, 2000, 1, 'm');
		//print_adc_voltage(ADC_CH_12V_INT_VMON, 130, 20, 'V');
		print_adc_voltage(ADC_CH_12V_VMON, 130, 20, 'V');
		print_adc_voltage(ADC_CH_12V_IMON, 2000, 1, 'm');
		temp_sync_read(&TEMPERATURE_SENSOR_0, &temp);
    14c6:	4d2f      	ldr	r5, [pc, #188]	; (1584 <main+0x104>)
    14c8:	e00e      	b.n	14e8 <main+0x68>
		printf("O1Heap memory allocation done\r\n");
    14ca:	482f      	ldr	r0, [pc, #188]	; (1588 <main+0x108>)
    14cc:	4b22      	ldr	r3, [pc, #136]	; (1558 <main+0xd8>)
    14ce:	4798      	blx	r3
    14d0:	e7f7      	b.n	14c2 <main+0x42>
		printf("temp: %ul\r\n", temp);
		
		WAIT_APPROX_MILLIS(1000);
		printf("end loop %u\r\n",loop_count);
		WAIT_APPROX_MILLIS(100);
		loop_count++;
    14d2:	3601      	adds	r6, #1
		if(loop_count>0) {
    14d4:	2e00      	cmp	r6, #0
    14d6:	d007      	beq.n	14e8 <main+0x68>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    14d8:	23c0      	movs	r3, #192	; 0xc0
    14da:	05db      	lsls	r3, r3, #23
    14dc:	2280      	movs	r2, #128	; 0x80
    14de:	0412      	lsls	r2, r2, #16
    14e0:	619a      	str	r2, [r3, #24]
    14e2:	2280      	movs	r2, #128	; 0x80
    14e4:	0392      	lsls	r2, r2, #14
    14e6:	619a      	str	r2, [r3, #24]
		print_adc_voltage(ADC_CH_VBAT_VMON, 250, 10, 'V');
    14e8:	2356      	movs	r3, #86	; 0x56
    14ea:	220a      	movs	r2, #10
    14ec:	21fa      	movs	r1, #250	; 0xfa
    14ee:	2000      	movs	r0, #0
    14f0:	47a0      	blx	r4
		print_adc_voltage(ADC_CH_5V_BT_VMON, 56, 20, 'V');
    14f2:	2356      	movs	r3, #86	; 0x56
    14f4:	2214      	movs	r2, #20
    14f6:	2138      	movs	r1, #56	; 0x38
    14f8:	2005      	movs	r0, #5
    14fa:	47a0      	blx	r4
		print_adc_voltage(ADC_CH_5V_VMON, 56, 20, 'V');
    14fc:	2356      	movs	r3, #86	; 0x56
    14fe:	2214      	movs	r2, #20
    1500:	2138      	movs	r1, #56	; 0x38
    1502:	2006      	movs	r0, #6
    1504:	47a0      	blx	r4
		print_adc_voltage(ADC_CH_5V_IMON, 2000, 1, 'm');
    1506:	27fa      	movs	r7, #250	; 0xfa
    1508:	00ff      	lsls	r7, r7, #3
    150a:	236d      	movs	r3, #109	; 0x6d
    150c:	2201      	movs	r2, #1
    150e:	0039      	movs	r1, r7
    1510:	200a      	movs	r0, #10
    1512:	47a0      	blx	r4
		print_adc_voltage(ADC_CH_12V_VMON, 130, 20, 'V');
    1514:	2356      	movs	r3, #86	; 0x56
    1516:	2214      	movs	r2, #20
    1518:	2182      	movs	r1, #130	; 0x82
    151a:	2009      	movs	r0, #9
    151c:	47a0      	blx	r4
		print_adc_voltage(ADC_CH_12V_IMON, 2000, 1, 'm');
    151e:	236d      	movs	r3, #109	; 0x6d
    1520:	2201      	movs	r2, #1
    1522:	0039      	movs	r1, r7
    1524:	200b      	movs	r0, #11
    1526:	47a0      	blx	r4
		temp_sync_read(&TEMPERATURE_SENSOR_0, &temp);
    1528:	a901      	add	r1, sp, #4
    152a:	480f      	ldr	r0, [pc, #60]	; (1568 <main+0xe8>)
    152c:	47a8      	blx	r5
		printf("temp: %ul\r\n", temp);
    152e:	9901      	ldr	r1, [sp, #4]
    1530:	4816      	ldr	r0, [pc, #88]	; (158c <main+0x10c>)
    1532:	4b0b      	ldr	r3, [pc, #44]	; (1560 <main+0xe0>)
    1534:	4798      	blx	r3
    1536:	4b16      	ldr	r3, [pc, #88]	; (1590 <main+0x110>)
    1538:	3b01      	subs	r3, #1
    153a:	2b00      	cmp	r3, #0
    153c:	d1fc      	bne.n	1538 <main+0xb8>
		printf("end loop %u\r\n",loop_count);
    153e:	0031      	movs	r1, r6
    1540:	4814      	ldr	r0, [pc, #80]	; (1594 <main+0x114>)
    1542:	4b07      	ldr	r3, [pc, #28]	; (1560 <main+0xe0>)
    1544:	4798      	blx	r3
    1546:	4b07      	ldr	r3, [pc, #28]	; (1564 <main+0xe4>)
    1548:	3b01      	subs	r3, #1
    154a:	2b00      	cmp	r3, #0
    154c:	d1fc      	bne.n	1548 <main+0xc8>
    154e:	e7c0      	b.n	14d2 <main+0x52>
    1550:	0000011d 	.word	0x0000011d
    1554:	00003fb0 	.word	0x00003fb0
    1558:	00003491 	.word	0x00003491
    155c:	00003fbc 	.word	0x00003fbc
    1560:	0000339d 	.word	0x0000339d
    1564:	00124f80 	.word	0x00124f80
    1568:	200000fc 	.word	0x200000fc
    156c:	00000991 	.word	0x00000991
    1570:	20001000 	.word	0x20001000
    1574:	00003fd0 	.word	0x00003fd0
    1578:	200000c4 	.word	0x200000c4
    157c:	00004008 	.word	0x00004008
    1580:	000013b9 	.word	0x000013b9
    1584:	000009b9 	.word	0x000009b9
    1588:	0000402c 	.word	0x0000402c
    158c:	0000404c 	.word	0x0000404c
    1590:	00b71b00 	.word	0x00b71b00
    1594:	00004058 	.word	0x00004058

00001598 <_read>:
#include <stdio.h>

int __attribute__((weak)) _read(int file, char *ptr, int len); /* Remove GCC compiler warning */

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
    1598:	b510      	push	{r4, lr}
    159a:	000b      	movs	r3, r1
	int n = 0;

	if (file != 0) {
    159c:	2800      	cmp	r0, #0
    159e:	d109      	bne.n	15b4 <_read+0x1c>
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
    15a0:	0011      	movs	r1, r2
    15a2:	0018      	movs	r0, r3
    15a4:	4b05      	ldr	r3, [pc, #20]	; (15bc <_read+0x24>)
    15a6:	4798      	blx	r3
    15a8:	2800      	cmp	r0, #0
    15aa:	db00      	blt.n	15ae <_read+0x16>
	if (n < 0) {
		return -1;
	}

	return n;
}
    15ac:	bd10      	pop	{r4, pc}
    15ae:	2001      	movs	r0, #1
    15b0:	4240      	negs	r0, r0
    15b2:	e7fb      	b.n	15ac <_read+0x14>
		return -1;
    15b4:	2001      	movs	r0, #1
    15b6:	4240      	negs	r0, r0
    15b8:	e7f8      	b.n	15ac <_read+0x14>
    15ba:	46c0      	nop			; (mov r8, r8)
    15bc:	00001615 	.word	0x00001615

000015c0 <_write>:
#include <stdio.h>

int __attribute__((weak)) _write(int file, char *ptr, int len); /* Remove GCC compiler warning */

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
    15c0:	b510      	push	{r4, lr}
    15c2:	000b      	movs	r3, r1
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
    15c4:	3801      	subs	r0, #1
    15c6:	2802      	cmp	r0, #2
    15c8:	d809      	bhi.n	15de <_write+0x1e>
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
    15ca:	0011      	movs	r1, r2
    15cc:	0018      	movs	r0, r3
    15ce:	4b05      	ldr	r3, [pc, #20]	; (15e4 <_write+0x24>)
    15d0:	4798      	blx	r3
    15d2:	2800      	cmp	r0, #0
    15d4:	db00      	blt.n	15d8 <_write+0x18>
	if (n < 0) {
		return -1;
	}

	return n;
}
    15d6:	bd10      	pop	{r4, pc}
    15d8:	2001      	movs	r0, #1
    15da:	4240      	negs	r0, r0
    15dc:	e7fb      	b.n	15d6 <_write+0x16>
		return -1;
    15de:	2001      	movs	r0, #1
    15e0:	4240      	negs	r0, r0
    15e2:	e7f8      	b.n	15d6 <_write+0x16>
    15e4:	00001639 	.word	0x00001639

000015e8 <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
    15e8:	b570      	push	{r4, r5, r6, lr}
    15ea:	0006      	movs	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
    15ec:	4d06      	ldr	r5, [pc, #24]	; (1608 <stdio_io_init+0x20>)
    15ee:	682b      	ldr	r3, [r5, #0]
    15f0:	6898      	ldr	r0, [r3, #8]
    15f2:	2100      	movs	r1, #0
    15f4:	4c05      	ldr	r4, [pc, #20]	; (160c <stdio_io_init+0x24>)
    15f6:	47a0      	blx	r4
	setbuf(stdin, NULL);
    15f8:	682b      	ldr	r3, [r5, #0]
    15fa:	6858      	ldr	r0, [r3, #4]
    15fc:	2100      	movs	r1, #0
    15fe:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
    1600:	4b03      	ldr	r3, [pc, #12]	; (1610 <stdio_io_init+0x28>)
    1602:	601e      	str	r6, [r3, #0]
}
    1604:	bd70      	pop	{r4, r5, r6, pc}
    1606:	46c0      	nop			; (mov r8, r8)
    1608:	20000014 	.word	0x20000014
    160c:	000034a5 	.word	0x000034a5
    1610:	200000c8 	.word	0x200000c8

00001614 <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
    1614:	b510      	push	{r4, lr}
    1616:	0004      	movs	r4, r0
	if (stdio_io == NULL) {
    1618:	4b05      	ldr	r3, [pc, #20]	; (1630 <stdio_io_read+0x1c>)
    161a:	6818      	ldr	r0, [r3, #0]
    161c:	2800      	cmp	r0, #0
    161e:	d004      	beq.n	162a <stdio_io_read+0x16>
		return 0;
	}
	return io_read(stdio_io, buf, len);
    1620:	b28a      	uxth	r2, r1
    1622:	0021      	movs	r1, r4
    1624:	4b03      	ldr	r3, [pc, #12]	; (1634 <stdio_io_read+0x20>)
    1626:	4798      	blx	r3
}
    1628:	bd10      	pop	{r4, pc}
		return 0;
    162a:	2000      	movs	r0, #0
    162c:	e7fc      	b.n	1628 <stdio_io_read+0x14>
    162e:	46c0      	nop			; (mov r8, r8)
    1630:	200000c8 	.word	0x200000c8
    1634:	00000929 	.word	0x00000929

00001638 <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
    1638:	b510      	push	{r4, lr}
    163a:	0004      	movs	r4, r0
	if (stdio_io == NULL) {
    163c:	4b05      	ldr	r3, [pc, #20]	; (1654 <stdio_io_write+0x1c>)
    163e:	6818      	ldr	r0, [r3, #0]
    1640:	2800      	cmp	r0, #0
    1642:	d004      	beq.n	164e <stdio_io_write+0x16>
		return 0;
	}
	return io_write(stdio_io, buf, len);
    1644:	b28a      	uxth	r2, r1
    1646:	0021      	movs	r1, r4
    1648:	4b03      	ldr	r3, [pc, #12]	; (1658 <stdio_io_write+0x20>)
    164a:	4798      	blx	r3
}
    164c:	bd10      	pop	{r4, pc}
		return 0;
    164e:	2000      	movs	r0, #0
    1650:	e7fc      	b.n	164c <stdio_io_write+0x14>
    1652:	46c0      	nop			; (mov r8, r8)
    1654:	200000c8 	.word	0x200000c8
    1658:	000008f5 	.word	0x000008f5

0000165c <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
    165c:	b510      	push	{r4, lr}

	usart_sync_enable(&DEBUG_UART);
    165e:	4c04      	ldr	r4, [pc, #16]	; (1670 <stdio_redirect_init+0x14>)
    1660:	0020      	movs	r0, r4
    1662:	4b04      	ldr	r3, [pc, #16]	; (1674 <stdio_redirect_init+0x18>)
    1664:	4798      	blx	r3
	stdio_io_init(&DEBUG_UART.io);
    1666:	0020      	movs	r0, r4
    1668:	4b03      	ldr	r3, [pc, #12]	; (1678 <stdio_redirect_init+0x1c>)
    166a:	4798      	blx	r3
}
    166c:	bd10      	pop	{r4, pc}
    166e:	46c0      	nop			; (mov r8, r8)
    1670:	20000104 	.word	0x20000104
    1674:	00000b1d 	.word	0x00000b1d
    1678:	000015e9 	.word	0x000015e9

0000167c <__aeabi_cfrcmple>:
    167c:	4684      	mov	ip, r0
    167e:	1c08      	adds	r0, r1, #0
    1680:	4661      	mov	r1, ip
    1682:	e7ff      	b.n	1684 <__aeabi_cfcmpeq>

00001684 <__aeabi_cfcmpeq>:
    1684:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    1686:	f000 f8cf 	bl	1828 <__lesf2>
    168a:	2800      	cmp	r0, #0
    168c:	d401      	bmi.n	1692 <__aeabi_cfcmpeq+0xe>
    168e:	2100      	movs	r1, #0
    1690:	42c8      	cmn	r0, r1
    1692:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00001694 <__aeabi_fcmpeq>:
    1694:	b510      	push	{r4, lr}
    1696:	f000 f861 	bl	175c <__eqsf2>
    169a:	4240      	negs	r0, r0
    169c:	3001      	adds	r0, #1
    169e:	bd10      	pop	{r4, pc}

000016a0 <__aeabi_fcmplt>:
    16a0:	b510      	push	{r4, lr}
    16a2:	f000 f8c1 	bl	1828 <__lesf2>
    16a6:	2800      	cmp	r0, #0
    16a8:	db01      	blt.n	16ae <__aeabi_fcmplt+0xe>
    16aa:	2000      	movs	r0, #0
    16ac:	bd10      	pop	{r4, pc}
    16ae:	2001      	movs	r0, #1
    16b0:	bd10      	pop	{r4, pc}
    16b2:	46c0      	nop			; (mov r8, r8)

000016b4 <__aeabi_fcmple>:
    16b4:	b510      	push	{r4, lr}
    16b6:	f000 f8b7 	bl	1828 <__lesf2>
    16ba:	2800      	cmp	r0, #0
    16bc:	dd01      	ble.n	16c2 <__aeabi_fcmple+0xe>
    16be:	2000      	movs	r0, #0
    16c0:	bd10      	pop	{r4, pc}
    16c2:	2001      	movs	r0, #1
    16c4:	bd10      	pop	{r4, pc}
    16c6:	46c0      	nop			; (mov r8, r8)

000016c8 <__aeabi_fcmpgt>:
    16c8:	b510      	push	{r4, lr}
    16ca:	f000 f86d 	bl	17a8 <__gesf2>
    16ce:	2800      	cmp	r0, #0
    16d0:	dc01      	bgt.n	16d6 <__aeabi_fcmpgt+0xe>
    16d2:	2000      	movs	r0, #0
    16d4:	bd10      	pop	{r4, pc}
    16d6:	2001      	movs	r0, #1
    16d8:	bd10      	pop	{r4, pc}
    16da:	46c0      	nop			; (mov r8, r8)

000016dc <__aeabi_fcmpge>:
    16dc:	b510      	push	{r4, lr}
    16de:	f000 f863 	bl	17a8 <__gesf2>
    16e2:	2800      	cmp	r0, #0
    16e4:	da01      	bge.n	16ea <__aeabi_fcmpge+0xe>
    16e6:	2000      	movs	r0, #0
    16e8:	bd10      	pop	{r4, pc}
    16ea:	2001      	movs	r0, #1
    16ec:	bd10      	pop	{r4, pc}
    16ee:	46c0      	nop			; (mov r8, r8)

000016f0 <__aeabi_f2uiz>:
    16f0:	219e      	movs	r1, #158	; 0x9e
    16f2:	b510      	push	{r4, lr}
    16f4:	05c9      	lsls	r1, r1, #23
    16f6:	1c04      	adds	r4, r0, #0
    16f8:	f7ff fff0 	bl	16dc <__aeabi_fcmpge>
    16fc:	2800      	cmp	r0, #0
    16fe:	d103      	bne.n	1708 <__aeabi_f2uiz+0x18>
    1700:	1c20      	adds	r0, r4, #0
    1702:	f000 fb8f 	bl	1e24 <__aeabi_f2iz>
    1706:	bd10      	pop	{r4, pc}
    1708:	219e      	movs	r1, #158	; 0x9e
    170a:	1c20      	adds	r0, r4, #0
    170c:	05c9      	lsls	r1, r1, #23
    170e:	f000 f9ed 	bl	1aec <__aeabi_fsub>
    1712:	f000 fb87 	bl	1e24 <__aeabi_f2iz>
    1716:	2380      	movs	r3, #128	; 0x80
    1718:	061b      	lsls	r3, r3, #24
    171a:	469c      	mov	ip, r3
    171c:	4460      	add	r0, ip
    171e:	e7f2      	b.n	1706 <__aeabi_f2uiz+0x16>

00001720 <__aeabi_d2uiz>:
    1720:	b570      	push	{r4, r5, r6, lr}
    1722:	2200      	movs	r2, #0
    1724:	4b0c      	ldr	r3, [pc, #48]	; (1758 <__aeabi_d2uiz+0x38>)
    1726:	0004      	movs	r4, r0
    1728:	000d      	movs	r5, r1
    172a:	f001 fa17 	bl	2b5c <__aeabi_dcmpge>
    172e:	2800      	cmp	r0, #0
    1730:	d104      	bne.n	173c <__aeabi_d2uiz+0x1c>
    1732:	0020      	movs	r0, r4
    1734:	0029      	movs	r1, r5
    1736:	f001 f971 	bl	2a1c <__aeabi_d2iz>
    173a:	bd70      	pop	{r4, r5, r6, pc}
    173c:	4b06      	ldr	r3, [pc, #24]	; (1758 <__aeabi_d2uiz+0x38>)
    173e:	2200      	movs	r2, #0
    1740:	0020      	movs	r0, r4
    1742:	0029      	movs	r1, r5
    1744:	f000 fe54 	bl	23f0 <__aeabi_dsub>
    1748:	f001 f968 	bl	2a1c <__aeabi_d2iz>
    174c:	2380      	movs	r3, #128	; 0x80
    174e:	061b      	lsls	r3, r3, #24
    1750:	469c      	mov	ip, r3
    1752:	4460      	add	r0, ip
    1754:	e7f1      	b.n	173a <__aeabi_d2uiz+0x1a>
    1756:	46c0      	nop			; (mov r8, r8)
    1758:	41e00000 	.word	0x41e00000

0000175c <__eqsf2>:
    175c:	b570      	push	{r4, r5, r6, lr}
    175e:	0042      	lsls	r2, r0, #1
    1760:	0245      	lsls	r5, r0, #9
    1762:	024e      	lsls	r6, r1, #9
    1764:	004c      	lsls	r4, r1, #1
    1766:	0fc3      	lsrs	r3, r0, #31
    1768:	0a6d      	lsrs	r5, r5, #9
    176a:	0e12      	lsrs	r2, r2, #24
    176c:	0a76      	lsrs	r6, r6, #9
    176e:	0e24      	lsrs	r4, r4, #24
    1770:	0fc9      	lsrs	r1, r1, #31
    1772:	2001      	movs	r0, #1
    1774:	2aff      	cmp	r2, #255	; 0xff
    1776:	d006      	beq.n	1786 <__eqsf2+0x2a>
    1778:	2cff      	cmp	r4, #255	; 0xff
    177a:	d003      	beq.n	1784 <__eqsf2+0x28>
    177c:	42a2      	cmp	r2, r4
    177e:	d101      	bne.n	1784 <__eqsf2+0x28>
    1780:	42b5      	cmp	r5, r6
    1782:	d006      	beq.n	1792 <__eqsf2+0x36>
    1784:	bd70      	pop	{r4, r5, r6, pc}
    1786:	2d00      	cmp	r5, #0
    1788:	d1fc      	bne.n	1784 <__eqsf2+0x28>
    178a:	2cff      	cmp	r4, #255	; 0xff
    178c:	d1fa      	bne.n	1784 <__eqsf2+0x28>
    178e:	2e00      	cmp	r6, #0
    1790:	d1f8      	bne.n	1784 <__eqsf2+0x28>
    1792:	428b      	cmp	r3, r1
    1794:	d006      	beq.n	17a4 <__eqsf2+0x48>
    1796:	2001      	movs	r0, #1
    1798:	2a00      	cmp	r2, #0
    179a:	d1f3      	bne.n	1784 <__eqsf2+0x28>
    179c:	0028      	movs	r0, r5
    179e:	1e45      	subs	r5, r0, #1
    17a0:	41a8      	sbcs	r0, r5
    17a2:	e7ef      	b.n	1784 <__eqsf2+0x28>
    17a4:	2000      	movs	r0, #0
    17a6:	e7ed      	b.n	1784 <__eqsf2+0x28>

000017a8 <__gesf2>:
    17a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    17aa:	0042      	lsls	r2, r0, #1
    17ac:	0245      	lsls	r5, r0, #9
    17ae:	024c      	lsls	r4, r1, #9
    17b0:	0fc3      	lsrs	r3, r0, #31
    17b2:	0048      	lsls	r0, r1, #1
    17b4:	0a6d      	lsrs	r5, r5, #9
    17b6:	0e12      	lsrs	r2, r2, #24
    17b8:	0a64      	lsrs	r4, r4, #9
    17ba:	0e00      	lsrs	r0, r0, #24
    17bc:	0fc9      	lsrs	r1, r1, #31
    17be:	2aff      	cmp	r2, #255	; 0xff
    17c0:	d01e      	beq.n	1800 <__gesf2+0x58>
    17c2:	28ff      	cmp	r0, #255	; 0xff
    17c4:	d021      	beq.n	180a <__gesf2+0x62>
    17c6:	2a00      	cmp	r2, #0
    17c8:	d10a      	bne.n	17e0 <__gesf2+0x38>
    17ca:	426e      	negs	r6, r5
    17cc:	416e      	adcs	r6, r5
    17ce:	b2f6      	uxtb	r6, r6
    17d0:	2800      	cmp	r0, #0
    17d2:	d10f      	bne.n	17f4 <__gesf2+0x4c>
    17d4:	2c00      	cmp	r4, #0
    17d6:	d10d      	bne.n	17f4 <__gesf2+0x4c>
    17d8:	2000      	movs	r0, #0
    17da:	2d00      	cmp	r5, #0
    17dc:	d009      	beq.n	17f2 <__gesf2+0x4a>
    17de:	e005      	b.n	17ec <__gesf2+0x44>
    17e0:	2800      	cmp	r0, #0
    17e2:	d101      	bne.n	17e8 <__gesf2+0x40>
    17e4:	2c00      	cmp	r4, #0
    17e6:	d001      	beq.n	17ec <__gesf2+0x44>
    17e8:	428b      	cmp	r3, r1
    17ea:	d011      	beq.n	1810 <__gesf2+0x68>
    17ec:	2101      	movs	r1, #1
    17ee:	4258      	negs	r0, r3
    17f0:	4308      	orrs	r0, r1
    17f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    17f4:	2e00      	cmp	r6, #0
    17f6:	d0f7      	beq.n	17e8 <__gesf2+0x40>
    17f8:	2001      	movs	r0, #1
    17fa:	3901      	subs	r1, #1
    17fc:	4308      	orrs	r0, r1
    17fe:	e7f8      	b.n	17f2 <__gesf2+0x4a>
    1800:	2d00      	cmp	r5, #0
    1802:	d0de      	beq.n	17c2 <__gesf2+0x1a>
    1804:	2002      	movs	r0, #2
    1806:	4240      	negs	r0, r0
    1808:	e7f3      	b.n	17f2 <__gesf2+0x4a>
    180a:	2c00      	cmp	r4, #0
    180c:	d0db      	beq.n	17c6 <__gesf2+0x1e>
    180e:	e7f9      	b.n	1804 <__gesf2+0x5c>
    1810:	4282      	cmp	r2, r0
    1812:	dceb      	bgt.n	17ec <__gesf2+0x44>
    1814:	db04      	blt.n	1820 <__gesf2+0x78>
    1816:	42a5      	cmp	r5, r4
    1818:	d8e8      	bhi.n	17ec <__gesf2+0x44>
    181a:	2000      	movs	r0, #0
    181c:	42a5      	cmp	r5, r4
    181e:	d2e8      	bcs.n	17f2 <__gesf2+0x4a>
    1820:	2101      	movs	r1, #1
    1822:	1e58      	subs	r0, r3, #1
    1824:	4308      	orrs	r0, r1
    1826:	e7e4      	b.n	17f2 <__gesf2+0x4a>

00001828 <__lesf2>:
    1828:	b5f0      	push	{r4, r5, r6, r7, lr}
    182a:	0042      	lsls	r2, r0, #1
    182c:	024d      	lsls	r5, r1, #9
    182e:	004c      	lsls	r4, r1, #1
    1830:	0246      	lsls	r6, r0, #9
    1832:	0a76      	lsrs	r6, r6, #9
    1834:	0e12      	lsrs	r2, r2, #24
    1836:	0fc3      	lsrs	r3, r0, #31
    1838:	0a6d      	lsrs	r5, r5, #9
    183a:	0e24      	lsrs	r4, r4, #24
    183c:	0fc9      	lsrs	r1, r1, #31
    183e:	2aff      	cmp	r2, #255	; 0xff
    1840:	d016      	beq.n	1870 <__lesf2+0x48>
    1842:	2cff      	cmp	r4, #255	; 0xff
    1844:	d018      	beq.n	1878 <__lesf2+0x50>
    1846:	2a00      	cmp	r2, #0
    1848:	d10a      	bne.n	1860 <__lesf2+0x38>
    184a:	4270      	negs	r0, r6
    184c:	4170      	adcs	r0, r6
    184e:	b2c0      	uxtb	r0, r0
    1850:	2c00      	cmp	r4, #0
    1852:	d015      	beq.n	1880 <__lesf2+0x58>
    1854:	2800      	cmp	r0, #0
    1856:	d005      	beq.n	1864 <__lesf2+0x3c>
    1858:	2001      	movs	r0, #1
    185a:	3901      	subs	r1, #1
    185c:	4308      	orrs	r0, r1
    185e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1860:	2c00      	cmp	r4, #0
    1862:	d013      	beq.n	188c <__lesf2+0x64>
    1864:	4299      	cmp	r1, r3
    1866:	d014      	beq.n	1892 <__lesf2+0x6a>
    1868:	2001      	movs	r0, #1
    186a:	425b      	negs	r3, r3
    186c:	4318      	orrs	r0, r3
    186e:	e7f6      	b.n	185e <__lesf2+0x36>
    1870:	2002      	movs	r0, #2
    1872:	2e00      	cmp	r6, #0
    1874:	d1f3      	bne.n	185e <__lesf2+0x36>
    1876:	e7e4      	b.n	1842 <__lesf2+0x1a>
    1878:	2002      	movs	r0, #2
    187a:	2d00      	cmp	r5, #0
    187c:	d1ef      	bne.n	185e <__lesf2+0x36>
    187e:	e7e2      	b.n	1846 <__lesf2+0x1e>
    1880:	2d00      	cmp	r5, #0
    1882:	d1e7      	bne.n	1854 <__lesf2+0x2c>
    1884:	2000      	movs	r0, #0
    1886:	2e00      	cmp	r6, #0
    1888:	d0e9      	beq.n	185e <__lesf2+0x36>
    188a:	e7ed      	b.n	1868 <__lesf2+0x40>
    188c:	2d00      	cmp	r5, #0
    188e:	d1e9      	bne.n	1864 <__lesf2+0x3c>
    1890:	e7ea      	b.n	1868 <__lesf2+0x40>
    1892:	42a2      	cmp	r2, r4
    1894:	dc06      	bgt.n	18a4 <__lesf2+0x7c>
    1896:	dbdf      	blt.n	1858 <__lesf2+0x30>
    1898:	42ae      	cmp	r6, r5
    189a:	d803      	bhi.n	18a4 <__lesf2+0x7c>
    189c:	2000      	movs	r0, #0
    189e:	42ae      	cmp	r6, r5
    18a0:	d3da      	bcc.n	1858 <__lesf2+0x30>
    18a2:	e7dc      	b.n	185e <__lesf2+0x36>
    18a4:	2001      	movs	r0, #1
    18a6:	4249      	negs	r1, r1
    18a8:	4308      	orrs	r0, r1
    18aa:	e7d8      	b.n	185e <__lesf2+0x36>

000018ac <__aeabi_fmul>:
    18ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    18ae:	4657      	mov	r7, sl
    18b0:	464e      	mov	r6, r9
    18b2:	4645      	mov	r5, r8
    18b4:	46de      	mov	lr, fp
    18b6:	b5e0      	push	{r5, r6, r7, lr}
    18b8:	0247      	lsls	r7, r0, #9
    18ba:	0046      	lsls	r6, r0, #1
    18bc:	4688      	mov	r8, r1
    18be:	0a7f      	lsrs	r7, r7, #9
    18c0:	0e36      	lsrs	r6, r6, #24
    18c2:	0fc4      	lsrs	r4, r0, #31
    18c4:	2e00      	cmp	r6, #0
    18c6:	d047      	beq.n	1958 <__aeabi_fmul+0xac>
    18c8:	2eff      	cmp	r6, #255	; 0xff
    18ca:	d024      	beq.n	1916 <__aeabi_fmul+0x6a>
    18cc:	00fb      	lsls	r3, r7, #3
    18ce:	2780      	movs	r7, #128	; 0x80
    18d0:	04ff      	lsls	r7, r7, #19
    18d2:	431f      	orrs	r7, r3
    18d4:	2300      	movs	r3, #0
    18d6:	4699      	mov	r9, r3
    18d8:	469a      	mov	sl, r3
    18da:	3e7f      	subs	r6, #127	; 0x7f
    18dc:	4643      	mov	r3, r8
    18de:	025d      	lsls	r5, r3, #9
    18e0:	0058      	lsls	r0, r3, #1
    18e2:	0fdb      	lsrs	r3, r3, #31
    18e4:	0a6d      	lsrs	r5, r5, #9
    18e6:	0e00      	lsrs	r0, r0, #24
    18e8:	4698      	mov	r8, r3
    18ea:	d043      	beq.n	1974 <__aeabi_fmul+0xc8>
    18ec:	28ff      	cmp	r0, #255	; 0xff
    18ee:	d03b      	beq.n	1968 <__aeabi_fmul+0xbc>
    18f0:	00eb      	lsls	r3, r5, #3
    18f2:	2580      	movs	r5, #128	; 0x80
    18f4:	2200      	movs	r2, #0
    18f6:	04ed      	lsls	r5, r5, #19
    18f8:	431d      	orrs	r5, r3
    18fa:	387f      	subs	r0, #127	; 0x7f
    18fc:	1836      	adds	r6, r6, r0
    18fe:	1c73      	adds	r3, r6, #1
    1900:	4641      	mov	r1, r8
    1902:	469b      	mov	fp, r3
    1904:	464b      	mov	r3, r9
    1906:	4061      	eors	r1, r4
    1908:	4313      	orrs	r3, r2
    190a:	2b0f      	cmp	r3, #15
    190c:	d864      	bhi.n	19d8 <__aeabi_fmul+0x12c>
    190e:	4875      	ldr	r0, [pc, #468]	; (1ae4 <__aeabi_fmul+0x238>)
    1910:	009b      	lsls	r3, r3, #2
    1912:	58c3      	ldr	r3, [r0, r3]
    1914:	469f      	mov	pc, r3
    1916:	2f00      	cmp	r7, #0
    1918:	d142      	bne.n	19a0 <__aeabi_fmul+0xf4>
    191a:	2308      	movs	r3, #8
    191c:	4699      	mov	r9, r3
    191e:	3b06      	subs	r3, #6
    1920:	26ff      	movs	r6, #255	; 0xff
    1922:	469a      	mov	sl, r3
    1924:	e7da      	b.n	18dc <__aeabi_fmul+0x30>
    1926:	4641      	mov	r1, r8
    1928:	2a02      	cmp	r2, #2
    192a:	d028      	beq.n	197e <__aeabi_fmul+0xd2>
    192c:	2a03      	cmp	r2, #3
    192e:	d100      	bne.n	1932 <__aeabi_fmul+0x86>
    1930:	e0ce      	b.n	1ad0 <__aeabi_fmul+0x224>
    1932:	2a01      	cmp	r2, #1
    1934:	d000      	beq.n	1938 <__aeabi_fmul+0x8c>
    1936:	e0ac      	b.n	1a92 <__aeabi_fmul+0x1e6>
    1938:	4011      	ands	r1, r2
    193a:	2000      	movs	r0, #0
    193c:	2200      	movs	r2, #0
    193e:	b2cc      	uxtb	r4, r1
    1940:	0240      	lsls	r0, r0, #9
    1942:	05d2      	lsls	r2, r2, #23
    1944:	0a40      	lsrs	r0, r0, #9
    1946:	07e4      	lsls	r4, r4, #31
    1948:	4310      	orrs	r0, r2
    194a:	4320      	orrs	r0, r4
    194c:	bc3c      	pop	{r2, r3, r4, r5}
    194e:	4690      	mov	r8, r2
    1950:	4699      	mov	r9, r3
    1952:	46a2      	mov	sl, r4
    1954:	46ab      	mov	fp, r5
    1956:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1958:	2f00      	cmp	r7, #0
    195a:	d115      	bne.n	1988 <__aeabi_fmul+0xdc>
    195c:	2304      	movs	r3, #4
    195e:	4699      	mov	r9, r3
    1960:	3b03      	subs	r3, #3
    1962:	2600      	movs	r6, #0
    1964:	469a      	mov	sl, r3
    1966:	e7b9      	b.n	18dc <__aeabi_fmul+0x30>
    1968:	20ff      	movs	r0, #255	; 0xff
    196a:	2202      	movs	r2, #2
    196c:	2d00      	cmp	r5, #0
    196e:	d0c5      	beq.n	18fc <__aeabi_fmul+0x50>
    1970:	2203      	movs	r2, #3
    1972:	e7c3      	b.n	18fc <__aeabi_fmul+0x50>
    1974:	2d00      	cmp	r5, #0
    1976:	d119      	bne.n	19ac <__aeabi_fmul+0x100>
    1978:	2000      	movs	r0, #0
    197a:	2201      	movs	r2, #1
    197c:	e7be      	b.n	18fc <__aeabi_fmul+0x50>
    197e:	2401      	movs	r4, #1
    1980:	22ff      	movs	r2, #255	; 0xff
    1982:	400c      	ands	r4, r1
    1984:	2000      	movs	r0, #0
    1986:	e7db      	b.n	1940 <__aeabi_fmul+0x94>
    1988:	0038      	movs	r0, r7
    198a:	f001 f8f1 	bl	2b70 <__clzsi2>
    198e:	2676      	movs	r6, #118	; 0x76
    1990:	1f43      	subs	r3, r0, #5
    1992:	409f      	lsls	r7, r3
    1994:	2300      	movs	r3, #0
    1996:	4276      	negs	r6, r6
    1998:	1a36      	subs	r6, r6, r0
    199a:	4699      	mov	r9, r3
    199c:	469a      	mov	sl, r3
    199e:	e79d      	b.n	18dc <__aeabi_fmul+0x30>
    19a0:	230c      	movs	r3, #12
    19a2:	4699      	mov	r9, r3
    19a4:	3b09      	subs	r3, #9
    19a6:	26ff      	movs	r6, #255	; 0xff
    19a8:	469a      	mov	sl, r3
    19aa:	e797      	b.n	18dc <__aeabi_fmul+0x30>
    19ac:	0028      	movs	r0, r5
    19ae:	f001 f8df 	bl	2b70 <__clzsi2>
    19b2:	1f43      	subs	r3, r0, #5
    19b4:	409d      	lsls	r5, r3
    19b6:	2376      	movs	r3, #118	; 0x76
    19b8:	425b      	negs	r3, r3
    19ba:	1a18      	subs	r0, r3, r0
    19bc:	2200      	movs	r2, #0
    19be:	e79d      	b.n	18fc <__aeabi_fmul+0x50>
    19c0:	2080      	movs	r0, #128	; 0x80
    19c2:	2400      	movs	r4, #0
    19c4:	03c0      	lsls	r0, r0, #15
    19c6:	22ff      	movs	r2, #255	; 0xff
    19c8:	e7ba      	b.n	1940 <__aeabi_fmul+0x94>
    19ca:	003d      	movs	r5, r7
    19cc:	4652      	mov	r2, sl
    19ce:	e7ab      	b.n	1928 <__aeabi_fmul+0x7c>
    19d0:	003d      	movs	r5, r7
    19d2:	0021      	movs	r1, r4
    19d4:	4652      	mov	r2, sl
    19d6:	e7a7      	b.n	1928 <__aeabi_fmul+0x7c>
    19d8:	0c3b      	lsrs	r3, r7, #16
    19da:	469c      	mov	ip, r3
    19dc:	042a      	lsls	r2, r5, #16
    19de:	0c12      	lsrs	r2, r2, #16
    19e0:	0c2b      	lsrs	r3, r5, #16
    19e2:	0014      	movs	r4, r2
    19e4:	4660      	mov	r0, ip
    19e6:	4665      	mov	r5, ip
    19e8:	043f      	lsls	r7, r7, #16
    19ea:	0c3f      	lsrs	r7, r7, #16
    19ec:	437c      	muls	r4, r7
    19ee:	4342      	muls	r2, r0
    19f0:	435d      	muls	r5, r3
    19f2:	437b      	muls	r3, r7
    19f4:	0c27      	lsrs	r7, r4, #16
    19f6:	189b      	adds	r3, r3, r2
    19f8:	18ff      	adds	r7, r7, r3
    19fa:	42ba      	cmp	r2, r7
    19fc:	d903      	bls.n	1a06 <__aeabi_fmul+0x15a>
    19fe:	2380      	movs	r3, #128	; 0x80
    1a00:	025b      	lsls	r3, r3, #9
    1a02:	469c      	mov	ip, r3
    1a04:	4465      	add	r5, ip
    1a06:	0424      	lsls	r4, r4, #16
    1a08:	043a      	lsls	r2, r7, #16
    1a0a:	0c24      	lsrs	r4, r4, #16
    1a0c:	1912      	adds	r2, r2, r4
    1a0e:	0193      	lsls	r3, r2, #6
    1a10:	1e5c      	subs	r4, r3, #1
    1a12:	41a3      	sbcs	r3, r4
    1a14:	0c3f      	lsrs	r7, r7, #16
    1a16:	0e92      	lsrs	r2, r2, #26
    1a18:	197d      	adds	r5, r7, r5
    1a1a:	431a      	orrs	r2, r3
    1a1c:	01ad      	lsls	r5, r5, #6
    1a1e:	4315      	orrs	r5, r2
    1a20:	012b      	lsls	r3, r5, #4
    1a22:	d504      	bpl.n	1a2e <__aeabi_fmul+0x182>
    1a24:	2301      	movs	r3, #1
    1a26:	465e      	mov	r6, fp
    1a28:	086a      	lsrs	r2, r5, #1
    1a2a:	401d      	ands	r5, r3
    1a2c:	4315      	orrs	r5, r2
    1a2e:	0032      	movs	r2, r6
    1a30:	327f      	adds	r2, #127	; 0x7f
    1a32:	2a00      	cmp	r2, #0
    1a34:	dd25      	ble.n	1a82 <__aeabi_fmul+0x1d6>
    1a36:	076b      	lsls	r3, r5, #29
    1a38:	d004      	beq.n	1a44 <__aeabi_fmul+0x198>
    1a3a:	230f      	movs	r3, #15
    1a3c:	402b      	ands	r3, r5
    1a3e:	2b04      	cmp	r3, #4
    1a40:	d000      	beq.n	1a44 <__aeabi_fmul+0x198>
    1a42:	3504      	adds	r5, #4
    1a44:	012b      	lsls	r3, r5, #4
    1a46:	d503      	bpl.n	1a50 <__aeabi_fmul+0x1a4>
    1a48:	0032      	movs	r2, r6
    1a4a:	4b27      	ldr	r3, [pc, #156]	; (1ae8 <__aeabi_fmul+0x23c>)
    1a4c:	3280      	adds	r2, #128	; 0x80
    1a4e:	401d      	ands	r5, r3
    1a50:	2afe      	cmp	r2, #254	; 0xfe
    1a52:	dc94      	bgt.n	197e <__aeabi_fmul+0xd2>
    1a54:	2401      	movs	r4, #1
    1a56:	01a8      	lsls	r0, r5, #6
    1a58:	0a40      	lsrs	r0, r0, #9
    1a5a:	b2d2      	uxtb	r2, r2
    1a5c:	400c      	ands	r4, r1
    1a5e:	e76f      	b.n	1940 <__aeabi_fmul+0x94>
    1a60:	2080      	movs	r0, #128	; 0x80
    1a62:	03c0      	lsls	r0, r0, #15
    1a64:	4207      	tst	r7, r0
    1a66:	d007      	beq.n	1a78 <__aeabi_fmul+0x1cc>
    1a68:	4205      	tst	r5, r0
    1a6a:	d105      	bne.n	1a78 <__aeabi_fmul+0x1cc>
    1a6c:	4328      	orrs	r0, r5
    1a6e:	0240      	lsls	r0, r0, #9
    1a70:	0a40      	lsrs	r0, r0, #9
    1a72:	4644      	mov	r4, r8
    1a74:	22ff      	movs	r2, #255	; 0xff
    1a76:	e763      	b.n	1940 <__aeabi_fmul+0x94>
    1a78:	4338      	orrs	r0, r7
    1a7a:	0240      	lsls	r0, r0, #9
    1a7c:	0a40      	lsrs	r0, r0, #9
    1a7e:	22ff      	movs	r2, #255	; 0xff
    1a80:	e75e      	b.n	1940 <__aeabi_fmul+0x94>
    1a82:	2401      	movs	r4, #1
    1a84:	1aa3      	subs	r3, r4, r2
    1a86:	2b1b      	cmp	r3, #27
    1a88:	dd05      	ble.n	1a96 <__aeabi_fmul+0x1ea>
    1a8a:	400c      	ands	r4, r1
    1a8c:	2200      	movs	r2, #0
    1a8e:	2000      	movs	r0, #0
    1a90:	e756      	b.n	1940 <__aeabi_fmul+0x94>
    1a92:	465e      	mov	r6, fp
    1a94:	e7cb      	b.n	1a2e <__aeabi_fmul+0x182>
    1a96:	002a      	movs	r2, r5
    1a98:	2020      	movs	r0, #32
    1a9a:	40da      	lsrs	r2, r3
    1a9c:	1ac3      	subs	r3, r0, r3
    1a9e:	409d      	lsls	r5, r3
    1aa0:	002b      	movs	r3, r5
    1aa2:	1e5d      	subs	r5, r3, #1
    1aa4:	41ab      	sbcs	r3, r5
    1aa6:	4313      	orrs	r3, r2
    1aa8:	075a      	lsls	r2, r3, #29
    1aaa:	d004      	beq.n	1ab6 <__aeabi_fmul+0x20a>
    1aac:	220f      	movs	r2, #15
    1aae:	401a      	ands	r2, r3
    1ab0:	2a04      	cmp	r2, #4
    1ab2:	d000      	beq.n	1ab6 <__aeabi_fmul+0x20a>
    1ab4:	3304      	adds	r3, #4
    1ab6:	015a      	lsls	r2, r3, #5
    1ab8:	d504      	bpl.n	1ac4 <__aeabi_fmul+0x218>
    1aba:	2401      	movs	r4, #1
    1abc:	2201      	movs	r2, #1
    1abe:	400c      	ands	r4, r1
    1ac0:	2000      	movs	r0, #0
    1ac2:	e73d      	b.n	1940 <__aeabi_fmul+0x94>
    1ac4:	2401      	movs	r4, #1
    1ac6:	019b      	lsls	r3, r3, #6
    1ac8:	0a58      	lsrs	r0, r3, #9
    1aca:	400c      	ands	r4, r1
    1acc:	2200      	movs	r2, #0
    1ace:	e737      	b.n	1940 <__aeabi_fmul+0x94>
    1ad0:	2080      	movs	r0, #128	; 0x80
    1ad2:	2401      	movs	r4, #1
    1ad4:	03c0      	lsls	r0, r0, #15
    1ad6:	4328      	orrs	r0, r5
    1ad8:	0240      	lsls	r0, r0, #9
    1ada:	0a40      	lsrs	r0, r0, #9
    1adc:	400c      	ands	r4, r1
    1ade:	22ff      	movs	r2, #255	; 0xff
    1ae0:	e72e      	b.n	1940 <__aeabi_fmul+0x94>
    1ae2:	46c0      	nop			; (mov r8, r8)
    1ae4:	00004068 	.word	0x00004068
    1ae8:	f7ffffff 	.word	0xf7ffffff

00001aec <__aeabi_fsub>:
    1aec:	b5f0      	push	{r4, r5, r6, r7, lr}
    1aee:	464f      	mov	r7, r9
    1af0:	46d6      	mov	lr, sl
    1af2:	4646      	mov	r6, r8
    1af4:	0044      	lsls	r4, r0, #1
    1af6:	b5c0      	push	{r6, r7, lr}
    1af8:	0fc2      	lsrs	r2, r0, #31
    1afa:	0247      	lsls	r7, r0, #9
    1afc:	0248      	lsls	r0, r1, #9
    1afe:	0a40      	lsrs	r0, r0, #9
    1b00:	4684      	mov	ip, r0
    1b02:	4666      	mov	r6, ip
    1b04:	0a7b      	lsrs	r3, r7, #9
    1b06:	0048      	lsls	r0, r1, #1
    1b08:	0fc9      	lsrs	r1, r1, #31
    1b0a:	469a      	mov	sl, r3
    1b0c:	0e24      	lsrs	r4, r4, #24
    1b0e:	0015      	movs	r5, r2
    1b10:	00db      	lsls	r3, r3, #3
    1b12:	0e00      	lsrs	r0, r0, #24
    1b14:	4689      	mov	r9, r1
    1b16:	00f6      	lsls	r6, r6, #3
    1b18:	28ff      	cmp	r0, #255	; 0xff
    1b1a:	d100      	bne.n	1b1e <__aeabi_fsub+0x32>
    1b1c:	e08f      	b.n	1c3e <__aeabi_fsub+0x152>
    1b1e:	2101      	movs	r1, #1
    1b20:	464f      	mov	r7, r9
    1b22:	404f      	eors	r7, r1
    1b24:	0039      	movs	r1, r7
    1b26:	4291      	cmp	r1, r2
    1b28:	d066      	beq.n	1bf8 <__aeabi_fsub+0x10c>
    1b2a:	1a22      	subs	r2, r4, r0
    1b2c:	2a00      	cmp	r2, #0
    1b2e:	dc00      	bgt.n	1b32 <__aeabi_fsub+0x46>
    1b30:	e09d      	b.n	1c6e <__aeabi_fsub+0x182>
    1b32:	2800      	cmp	r0, #0
    1b34:	d13d      	bne.n	1bb2 <__aeabi_fsub+0xc6>
    1b36:	2e00      	cmp	r6, #0
    1b38:	d100      	bne.n	1b3c <__aeabi_fsub+0x50>
    1b3a:	e08b      	b.n	1c54 <__aeabi_fsub+0x168>
    1b3c:	1e51      	subs	r1, r2, #1
    1b3e:	2900      	cmp	r1, #0
    1b40:	d000      	beq.n	1b44 <__aeabi_fsub+0x58>
    1b42:	e0b5      	b.n	1cb0 <__aeabi_fsub+0x1c4>
    1b44:	2401      	movs	r4, #1
    1b46:	1b9b      	subs	r3, r3, r6
    1b48:	015a      	lsls	r2, r3, #5
    1b4a:	d544      	bpl.n	1bd6 <__aeabi_fsub+0xea>
    1b4c:	019b      	lsls	r3, r3, #6
    1b4e:	099f      	lsrs	r7, r3, #6
    1b50:	0038      	movs	r0, r7
    1b52:	f001 f80d 	bl	2b70 <__clzsi2>
    1b56:	3805      	subs	r0, #5
    1b58:	4087      	lsls	r7, r0
    1b5a:	4284      	cmp	r4, r0
    1b5c:	dd00      	ble.n	1b60 <__aeabi_fsub+0x74>
    1b5e:	e096      	b.n	1c8e <__aeabi_fsub+0x1a2>
    1b60:	1b04      	subs	r4, r0, r4
    1b62:	003a      	movs	r2, r7
    1b64:	2020      	movs	r0, #32
    1b66:	3401      	adds	r4, #1
    1b68:	40e2      	lsrs	r2, r4
    1b6a:	1b04      	subs	r4, r0, r4
    1b6c:	40a7      	lsls	r7, r4
    1b6e:	003b      	movs	r3, r7
    1b70:	1e5f      	subs	r7, r3, #1
    1b72:	41bb      	sbcs	r3, r7
    1b74:	2400      	movs	r4, #0
    1b76:	4313      	orrs	r3, r2
    1b78:	075a      	lsls	r2, r3, #29
    1b7a:	d004      	beq.n	1b86 <__aeabi_fsub+0x9a>
    1b7c:	220f      	movs	r2, #15
    1b7e:	401a      	ands	r2, r3
    1b80:	2a04      	cmp	r2, #4
    1b82:	d000      	beq.n	1b86 <__aeabi_fsub+0x9a>
    1b84:	3304      	adds	r3, #4
    1b86:	015a      	lsls	r2, r3, #5
    1b88:	d527      	bpl.n	1bda <__aeabi_fsub+0xee>
    1b8a:	3401      	adds	r4, #1
    1b8c:	2cff      	cmp	r4, #255	; 0xff
    1b8e:	d100      	bne.n	1b92 <__aeabi_fsub+0xa6>
    1b90:	e079      	b.n	1c86 <__aeabi_fsub+0x19a>
    1b92:	2201      	movs	r2, #1
    1b94:	019b      	lsls	r3, r3, #6
    1b96:	0a5b      	lsrs	r3, r3, #9
    1b98:	b2e4      	uxtb	r4, r4
    1b9a:	402a      	ands	r2, r5
    1b9c:	025b      	lsls	r3, r3, #9
    1b9e:	05e4      	lsls	r4, r4, #23
    1ba0:	0a58      	lsrs	r0, r3, #9
    1ba2:	07d2      	lsls	r2, r2, #31
    1ba4:	4320      	orrs	r0, r4
    1ba6:	4310      	orrs	r0, r2
    1ba8:	bc1c      	pop	{r2, r3, r4}
    1baa:	4690      	mov	r8, r2
    1bac:	4699      	mov	r9, r3
    1bae:	46a2      	mov	sl, r4
    1bb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1bb2:	2cff      	cmp	r4, #255	; 0xff
    1bb4:	d0e0      	beq.n	1b78 <__aeabi_fsub+0x8c>
    1bb6:	2180      	movs	r1, #128	; 0x80
    1bb8:	04c9      	lsls	r1, r1, #19
    1bba:	430e      	orrs	r6, r1
    1bbc:	2a1b      	cmp	r2, #27
    1bbe:	dc7b      	bgt.n	1cb8 <__aeabi_fsub+0x1cc>
    1bc0:	0031      	movs	r1, r6
    1bc2:	2020      	movs	r0, #32
    1bc4:	40d1      	lsrs	r1, r2
    1bc6:	1a82      	subs	r2, r0, r2
    1bc8:	4096      	lsls	r6, r2
    1bca:	1e72      	subs	r2, r6, #1
    1bcc:	4196      	sbcs	r6, r2
    1bce:	430e      	orrs	r6, r1
    1bd0:	1b9b      	subs	r3, r3, r6
    1bd2:	015a      	lsls	r2, r3, #5
    1bd4:	d4ba      	bmi.n	1b4c <__aeabi_fsub+0x60>
    1bd6:	075a      	lsls	r2, r3, #29
    1bd8:	d1d0      	bne.n	1b7c <__aeabi_fsub+0x90>
    1bda:	2201      	movs	r2, #1
    1bdc:	08df      	lsrs	r7, r3, #3
    1bde:	402a      	ands	r2, r5
    1be0:	2cff      	cmp	r4, #255	; 0xff
    1be2:	d133      	bne.n	1c4c <__aeabi_fsub+0x160>
    1be4:	2f00      	cmp	r7, #0
    1be6:	d100      	bne.n	1bea <__aeabi_fsub+0xfe>
    1be8:	e0a8      	b.n	1d3c <__aeabi_fsub+0x250>
    1bea:	2380      	movs	r3, #128	; 0x80
    1bec:	03db      	lsls	r3, r3, #15
    1bee:	433b      	orrs	r3, r7
    1bf0:	025b      	lsls	r3, r3, #9
    1bf2:	0a5b      	lsrs	r3, r3, #9
    1bf4:	24ff      	movs	r4, #255	; 0xff
    1bf6:	e7d1      	b.n	1b9c <__aeabi_fsub+0xb0>
    1bf8:	1a21      	subs	r1, r4, r0
    1bfa:	2900      	cmp	r1, #0
    1bfc:	dd4c      	ble.n	1c98 <__aeabi_fsub+0x1ac>
    1bfe:	2800      	cmp	r0, #0
    1c00:	d02a      	beq.n	1c58 <__aeabi_fsub+0x16c>
    1c02:	2cff      	cmp	r4, #255	; 0xff
    1c04:	d0b8      	beq.n	1b78 <__aeabi_fsub+0x8c>
    1c06:	2080      	movs	r0, #128	; 0x80
    1c08:	04c0      	lsls	r0, r0, #19
    1c0a:	4306      	orrs	r6, r0
    1c0c:	291b      	cmp	r1, #27
    1c0e:	dd00      	ble.n	1c12 <__aeabi_fsub+0x126>
    1c10:	e0af      	b.n	1d72 <__aeabi_fsub+0x286>
    1c12:	0030      	movs	r0, r6
    1c14:	2720      	movs	r7, #32
    1c16:	40c8      	lsrs	r0, r1
    1c18:	1a79      	subs	r1, r7, r1
    1c1a:	408e      	lsls	r6, r1
    1c1c:	1e71      	subs	r1, r6, #1
    1c1e:	418e      	sbcs	r6, r1
    1c20:	4306      	orrs	r6, r0
    1c22:	199b      	adds	r3, r3, r6
    1c24:	0159      	lsls	r1, r3, #5
    1c26:	d5d6      	bpl.n	1bd6 <__aeabi_fsub+0xea>
    1c28:	3401      	adds	r4, #1
    1c2a:	2cff      	cmp	r4, #255	; 0xff
    1c2c:	d100      	bne.n	1c30 <__aeabi_fsub+0x144>
    1c2e:	e085      	b.n	1d3c <__aeabi_fsub+0x250>
    1c30:	2201      	movs	r2, #1
    1c32:	497a      	ldr	r1, [pc, #488]	; (1e1c <__aeabi_fsub+0x330>)
    1c34:	401a      	ands	r2, r3
    1c36:	085b      	lsrs	r3, r3, #1
    1c38:	400b      	ands	r3, r1
    1c3a:	4313      	orrs	r3, r2
    1c3c:	e79c      	b.n	1b78 <__aeabi_fsub+0x8c>
    1c3e:	2e00      	cmp	r6, #0
    1c40:	d000      	beq.n	1c44 <__aeabi_fsub+0x158>
    1c42:	e770      	b.n	1b26 <__aeabi_fsub+0x3a>
    1c44:	e76b      	b.n	1b1e <__aeabi_fsub+0x32>
    1c46:	1e3b      	subs	r3, r7, #0
    1c48:	d1c5      	bne.n	1bd6 <__aeabi_fsub+0xea>
    1c4a:	2200      	movs	r2, #0
    1c4c:	027b      	lsls	r3, r7, #9
    1c4e:	0a5b      	lsrs	r3, r3, #9
    1c50:	b2e4      	uxtb	r4, r4
    1c52:	e7a3      	b.n	1b9c <__aeabi_fsub+0xb0>
    1c54:	0014      	movs	r4, r2
    1c56:	e78f      	b.n	1b78 <__aeabi_fsub+0x8c>
    1c58:	2e00      	cmp	r6, #0
    1c5a:	d04d      	beq.n	1cf8 <__aeabi_fsub+0x20c>
    1c5c:	1e48      	subs	r0, r1, #1
    1c5e:	2800      	cmp	r0, #0
    1c60:	d157      	bne.n	1d12 <__aeabi_fsub+0x226>
    1c62:	199b      	adds	r3, r3, r6
    1c64:	2401      	movs	r4, #1
    1c66:	015a      	lsls	r2, r3, #5
    1c68:	d5b5      	bpl.n	1bd6 <__aeabi_fsub+0xea>
    1c6a:	2402      	movs	r4, #2
    1c6c:	e7e0      	b.n	1c30 <__aeabi_fsub+0x144>
    1c6e:	2a00      	cmp	r2, #0
    1c70:	d125      	bne.n	1cbe <__aeabi_fsub+0x1d2>
    1c72:	1c62      	adds	r2, r4, #1
    1c74:	b2d2      	uxtb	r2, r2
    1c76:	2a01      	cmp	r2, #1
    1c78:	dd72      	ble.n	1d60 <__aeabi_fsub+0x274>
    1c7a:	1b9f      	subs	r7, r3, r6
    1c7c:	017a      	lsls	r2, r7, #5
    1c7e:	d535      	bpl.n	1cec <__aeabi_fsub+0x200>
    1c80:	1af7      	subs	r7, r6, r3
    1c82:	000d      	movs	r5, r1
    1c84:	e764      	b.n	1b50 <__aeabi_fsub+0x64>
    1c86:	2201      	movs	r2, #1
    1c88:	2300      	movs	r3, #0
    1c8a:	402a      	ands	r2, r5
    1c8c:	e786      	b.n	1b9c <__aeabi_fsub+0xb0>
    1c8e:	003b      	movs	r3, r7
    1c90:	4a63      	ldr	r2, [pc, #396]	; (1e20 <__aeabi_fsub+0x334>)
    1c92:	1a24      	subs	r4, r4, r0
    1c94:	4013      	ands	r3, r2
    1c96:	e76f      	b.n	1b78 <__aeabi_fsub+0x8c>
    1c98:	2900      	cmp	r1, #0
    1c9a:	d16c      	bne.n	1d76 <__aeabi_fsub+0x28a>
    1c9c:	1c61      	adds	r1, r4, #1
    1c9e:	b2c8      	uxtb	r0, r1
    1ca0:	2801      	cmp	r0, #1
    1ca2:	dd4e      	ble.n	1d42 <__aeabi_fsub+0x256>
    1ca4:	29ff      	cmp	r1, #255	; 0xff
    1ca6:	d049      	beq.n	1d3c <__aeabi_fsub+0x250>
    1ca8:	199b      	adds	r3, r3, r6
    1caa:	085b      	lsrs	r3, r3, #1
    1cac:	000c      	movs	r4, r1
    1cae:	e763      	b.n	1b78 <__aeabi_fsub+0x8c>
    1cb0:	2aff      	cmp	r2, #255	; 0xff
    1cb2:	d041      	beq.n	1d38 <__aeabi_fsub+0x24c>
    1cb4:	000a      	movs	r2, r1
    1cb6:	e781      	b.n	1bbc <__aeabi_fsub+0xd0>
    1cb8:	2601      	movs	r6, #1
    1cba:	1b9b      	subs	r3, r3, r6
    1cbc:	e789      	b.n	1bd2 <__aeabi_fsub+0xe6>
    1cbe:	2c00      	cmp	r4, #0
    1cc0:	d01c      	beq.n	1cfc <__aeabi_fsub+0x210>
    1cc2:	28ff      	cmp	r0, #255	; 0xff
    1cc4:	d021      	beq.n	1d0a <__aeabi_fsub+0x21e>
    1cc6:	2480      	movs	r4, #128	; 0x80
    1cc8:	04e4      	lsls	r4, r4, #19
    1cca:	4252      	negs	r2, r2
    1ccc:	4323      	orrs	r3, r4
    1cce:	2a1b      	cmp	r2, #27
    1cd0:	dd00      	ble.n	1cd4 <__aeabi_fsub+0x1e8>
    1cd2:	e096      	b.n	1e02 <__aeabi_fsub+0x316>
    1cd4:	001c      	movs	r4, r3
    1cd6:	2520      	movs	r5, #32
    1cd8:	40d4      	lsrs	r4, r2
    1cda:	1aaa      	subs	r2, r5, r2
    1cdc:	4093      	lsls	r3, r2
    1cde:	1e5a      	subs	r2, r3, #1
    1ce0:	4193      	sbcs	r3, r2
    1ce2:	4323      	orrs	r3, r4
    1ce4:	1af3      	subs	r3, r6, r3
    1ce6:	0004      	movs	r4, r0
    1ce8:	000d      	movs	r5, r1
    1cea:	e72d      	b.n	1b48 <__aeabi_fsub+0x5c>
    1cec:	2f00      	cmp	r7, #0
    1cee:	d000      	beq.n	1cf2 <__aeabi_fsub+0x206>
    1cf0:	e72e      	b.n	1b50 <__aeabi_fsub+0x64>
    1cf2:	2200      	movs	r2, #0
    1cf4:	2400      	movs	r4, #0
    1cf6:	e7a9      	b.n	1c4c <__aeabi_fsub+0x160>
    1cf8:	000c      	movs	r4, r1
    1cfa:	e73d      	b.n	1b78 <__aeabi_fsub+0x8c>
    1cfc:	2b00      	cmp	r3, #0
    1cfe:	d058      	beq.n	1db2 <__aeabi_fsub+0x2c6>
    1d00:	43d2      	mvns	r2, r2
    1d02:	2a00      	cmp	r2, #0
    1d04:	d0ee      	beq.n	1ce4 <__aeabi_fsub+0x1f8>
    1d06:	28ff      	cmp	r0, #255	; 0xff
    1d08:	d1e1      	bne.n	1cce <__aeabi_fsub+0x1e2>
    1d0a:	0033      	movs	r3, r6
    1d0c:	24ff      	movs	r4, #255	; 0xff
    1d0e:	000d      	movs	r5, r1
    1d10:	e732      	b.n	1b78 <__aeabi_fsub+0x8c>
    1d12:	29ff      	cmp	r1, #255	; 0xff
    1d14:	d010      	beq.n	1d38 <__aeabi_fsub+0x24c>
    1d16:	0001      	movs	r1, r0
    1d18:	e778      	b.n	1c0c <__aeabi_fsub+0x120>
    1d1a:	2b00      	cmp	r3, #0
    1d1c:	d06e      	beq.n	1dfc <__aeabi_fsub+0x310>
    1d1e:	24ff      	movs	r4, #255	; 0xff
    1d20:	2e00      	cmp	r6, #0
    1d22:	d100      	bne.n	1d26 <__aeabi_fsub+0x23a>
    1d24:	e728      	b.n	1b78 <__aeabi_fsub+0x8c>
    1d26:	2280      	movs	r2, #128	; 0x80
    1d28:	4651      	mov	r1, sl
    1d2a:	03d2      	lsls	r2, r2, #15
    1d2c:	4211      	tst	r1, r2
    1d2e:	d003      	beq.n	1d38 <__aeabi_fsub+0x24c>
    1d30:	4661      	mov	r1, ip
    1d32:	4211      	tst	r1, r2
    1d34:	d100      	bne.n	1d38 <__aeabi_fsub+0x24c>
    1d36:	0033      	movs	r3, r6
    1d38:	24ff      	movs	r4, #255	; 0xff
    1d3a:	e71d      	b.n	1b78 <__aeabi_fsub+0x8c>
    1d3c:	24ff      	movs	r4, #255	; 0xff
    1d3e:	2300      	movs	r3, #0
    1d40:	e72c      	b.n	1b9c <__aeabi_fsub+0xb0>
    1d42:	2c00      	cmp	r4, #0
    1d44:	d1e9      	bne.n	1d1a <__aeabi_fsub+0x22e>
    1d46:	2b00      	cmp	r3, #0
    1d48:	d063      	beq.n	1e12 <__aeabi_fsub+0x326>
    1d4a:	2e00      	cmp	r6, #0
    1d4c:	d100      	bne.n	1d50 <__aeabi_fsub+0x264>
    1d4e:	e713      	b.n	1b78 <__aeabi_fsub+0x8c>
    1d50:	199b      	adds	r3, r3, r6
    1d52:	015a      	lsls	r2, r3, #5
    1d54:	d400      	bmi.n	1d58 <__aeabi_fsub+0x26c>
    1d56:	e73e      	b.n	1bd6 <__aeabi_fsub+0xea>
    1d58:	4a31      	ldr	r2, [pc, #196]	; (1e20 <__aeabi_fsub+0x334>)
    1d5a:	000c      	movs	r4, r1
    1d5c:	4013      	ands	r3, r2
    1d5e:	e70b      	b.n	1b78 <__aeabi_fsub+0x8c>
    1d60:	2c00      	cmp	r4, #0
    1d62:	d11e      	bne.n	1da2 <__aeabi_fsub+0x2b6>
    1d64:	2b00      	cmp	r3, #0
    1d66:	d12f      	bne.n	1dc8 <__aeabi_fsub+0x2dc>
    1d68:	2e00      	cmp	r6, #0
    1d6a:	d04f      	beq.n	1e0c <__aeabi_fsub+0x320>
    1d6c:	0033      	movs	r3, r6
    1d6e:	000d      	movs	r5, r1
    1d70:	e702      	b.n	1b78 <__aeabi_fsub+0x8c>
    1d72:	2601      	movs	r6, #1
    1d74:	e755      	b.n	1c22 <__aeabi_fsub+0x136>
    1d76:	2c00      	cmp	r4, #0
    1d78:	d11f      	bne.n	1dba <__aeabi_fsub+0x2ce>
    1d7a:	2b00      	cmp	r3, #0
    1d7c:	d043      	beq.n	1e06 <__aeabi_fsub+0x31a>
    1d7e:	43c9      	mvns	r1, r1
    1d80:	2900      	cmp	r1, #0
    1d82:	d00b      	beq.n	1d9c <__aeabi_fsub+0x2b0>
    1d84:	28ff      	cmp	r0, #255	; 0xff
    1d86:	d039      	beq.n	1dfc <__aeabi_fsub+0x310>
    1d88:	291b      	cmp	r1, #27
    1d8a:	dc44      	bgt.n	1e16 <__aeabi_fsub+0x32a>
    1d8c:	001c      	movs	r4, r3
    1d8e:	2720      	movs	r7, #32
    1d90:	40cc      	lsrs	r4, r1
    1d92:	1a79      	subs	r1, r7, r1
    1d94:	408b      	lsls	r3, r1
    1d96:	1e59      	subs	r1, r3, #1
    1d98:	418b      	sbcs	r3, r1
    1d9a:	4323      	orrs	r3, r4
    1d9c:	199b      	adds	r3, r3, r6
    1d9e:	0004      	movs	r4, r0
    1da0:	e740      	b.n	1c24 <__aeabi_fsub+0x138>
    1da2:	2b00      	cmp	r3, #0
    1da4:	d11a      	bne.n	1ddc <__aeabi_fsub+0x2f0>
    1da6:	2e00      	cmp	r6, #0
    1da8:	d124      	bne.n	1df4 <__aeabi_fsub+0x308>
    1daa:	2780      	movs	r7, #128	; 0x80
    1dac:	2200      	movs	r2, #0
    1dae:	03ff      	lsls	r7, r7, #15
    1db0:	e71b      	b.n	1bea <__aeabi_fsub+0xfe>
    1db2:	0033      	movs	r3, r6
    1db4:	0004      	movs	r4, r0
    1db6:	000d      	movs	r5, r1
    1db8:	e6de      	b.n	1b78 <__aeabi_fsub+0x8c>
    1dba:	28ff      	cmp	r0, #255	; 0xff
    1dbc:	d01e      	beq.n	1dfc <__aeabi_fsub+0x310>
    1dbe:	2480      	movs	r4, #128	; 0x80
    1dc0:	04e4      	lsls	r4, r4, #19
    1dc2:	4249      	negs	r1, r1
    1dc4:	4323      	orrs	r3, r4
    1dc6:	e7df      	b.n	1d88 <__aeabi_fsub+0x29c>
    1dc8:	2e00      	cmp	r6, #0
    1dca:	d100      	bne.n	1dce <__aeabi_fsub+0x2e2>
    1dcc:	e6d4      	b.n	1b78 <__aeabi_fsub+0x8c>
    1dce:	1b9f      	subs	r7, r3, r6
    1dd0:	017a      	lsls	r2, r7, #5
    1dd2:	d400      	bmi.n	1dd6 <__aeabi_fsub+0x2ea>
    1dd4:	e737      	b.n	1c46 <__aeabi_fsub+0x15a>
    1dd6:	1af3      	subs	r3, r6, r3
    1dd8:	000d      	movs	r5, r1
    1dda:	e6cd      	b.n	1b78 <__aeabi_fsub+0x8c>
    1ddc:	24ff      	movs	r4, #255	; 0xff
    1dde:	2e00      	cmp	r6, #0
    1de0:	d100      	bne.n	1de4 <__aeabi_fsub+0x2f8>
    1de2:	e6c9      	b.n	1b78 <__aeabi_fsub+0x8c>
    1de4:	2280      	movs	r2, #128	; 0x80
    1de6:	4650      	mov	r0, sl
    1de8:	03d2      	lsls	r2, r2, #15
    1dea:	4210      	tst	r0, r2
    1dec:	d0a4      	beq.n	1d38 <__aeabi_fsub+0x24c>
    1dee:	4660      	mov	r0, ip
    1df0:	4210      	tst	r0, r2
    1df2:	d1a1      	bne.n	1d38 <__aeabi_fsub+0x24c>
    1df4:	0033      	movs	r3, r6
    1df6:	000d      	movs	r5, r1
    1df8:	24ff      	movs	r4, #255	; 0xff
    1dfa:	e6bd      	b.n	1b78 <__aeabi_fsub+0x8c>
    1dfc:	0033      	movs	r3, r6
    1dfe:	24ff      	movs	r4, #255	; 0xff
    1e00:	e6ba      	b.n	1b78 <__aeabi_fsub+0x8c>
    1e02:	2301      	movs	r3, #1
    1e04:	e76e      	b.n	1ce4 <__aeabi_fsub+0x1f8>
    1e06:	0033      	movs	r3, r6
    1e08:	0004      	movs	r4, r0
    1e0a:	e6b5      	b.n	1b78 <__aeabi_fsub+0x8c>
    1e0c:	2700      	movs	r7, #0
    1e0e:	2200      	movs	r2, #0
    1e10:	e71c      	b.n	1c4c <__aeabi_fsub+0x160>
    1e12:	0033      	movs	r3, r6
    1e14:	e6b0      	b.n	1b78 <__aeabi_fsub+0x8c>
    1e16:	2301      	movs	r3, #1
    1e18:	e7c0      	b.n	1d9c <__aeabi_fsub+0x2b0>
    1e1a:	46c0      	nop			; (mov r8, r8)
    1e1c:	7dffffff 	.word	0x7dffffff
    1e20:	fbffffff 	.word	0xfbffffff

00001e24 <__aeabi_f2iz>:
    1e24:	0241      	lsls	r1, r0, #9
    1e26:	0043      	lsls	r3, r0, #1
    1e28:	0fc2      	lsrs	r2, r0, #31
    1e2a:	0a49      	lsrs	r1, r1, #9
    1e2c:	0e1b      	lsrs	r3, r3, #24
    1e2e:	2000      	movs	r0, #0
    1e30:	2b7e      	cmp	r3, #126	; 0x7e
    1e32:	dd0d      	ble.n	1e50 <__aeabi_f2iz+0x2c>
    1e34:	2b9d      	cmp	r3, #157	; 0x9d
    1e36:	dc0c      	bgt.n	1e52 <__aeabi_f2iz+0x2e>
    1e38:	2080      	movs	r0, #128	; 0x80
    1e3a:	0400      	lsls	r0, r0, #16
    1e3c:	4301      	orrs	r1, r0
    1e3e:	2b95      	cmp	r3, #149	; 0x95
    1e40:	dc0a      	bgt.n	1e58 <__aeabi_f2iz+0x34>
    1e42:	2096      	movs	r0, #150	; 0x96
    1e44:	1ac3      	subs	r3, r0, r3
    1e46:	40d9      	lsrs	r1, r3
    1e48:	4248      	negs	r0, r1
    1e4a:	2a00      	cmp	r2, #0
    1e4c:	d100      	bne.n	1e50 <__aeabi_f2iz+0x2c>
    1e4e:	0008      	movs	r0, r1
    1e50:	4770      	bx	lr
    1e52:	4b03      	ldr	r3, [pc, #12]	; (1e60 <__aeabi_f2iz+0x3c>)
    1e54:	18d0      	adds	r0, r2, r3
    1e56:	e7fb      	b.n	1e50 <__aeabi_f2iz+0x2c>
    1e58:	3b96      	subs	r3, #150	; 0x96
    1e5a:	4099      	lsls	r1, r3
    1e5c:	e7f4      	b.n	1e48 <__aeabi_f2iz+0x24>
    1e5e:	46c0      	nop			; (mov r8, r8)
    1e60:	7fffffff 	.word	0x7fffffff

00001e64 <__aeabi_ui2f>:
    1e64:	b510      	push	{r4, lr}
    1e66:	1e04      	subs	r4, r0, #0
    1e68:	d027      	beq.n	1eba <__aeabi_ui2f+0x56>
    1e6a:	f000 fe81 	bl	2b70 <__clzsi2>
    1e6e:	239e      	movs	r3, #158	; 0x9e
    1e70:	1a1b      	subs	r3, r3, r0
    1e72:	2b96      	cmp	r3, #150	; 0x96
    1e74:	dc0a      	bgt.n	1e8c <__aeabi_ui2f+0x28>
    1e76:	2296      	movs	r2, #150	; 0x96
    1e78:	1ad2      	subs	r2, r2, r3
    1e7a:	4094      	lsls	r4, r2
    1e7c:	0264      	lsls	r4, r4, #9
    1e7e:	0a64      	lsrs	r4, r4, #9
    1e80:	b2db      	uxtb	r3, r3
    1e82:	0264      	lsls	r4, r4, #9
    1e84:	05db      	lsls	r3, r3, #23
    1e86:	0a60      	lsrs	r0, r4, #9
    1e88:	4318      	orrs	r0, r3
    1e8a:	bd10      	pop	{r4, pc}
    1e8c:	2b99      	cmp	r3, #153	; 0x99
    1e8e:	dc17      	bgt.n	1ec0 <__aeabi_ui2f+0x5c>
    1e90:	2299      	movs	r2, #153	; 0x99
    1e92:	1ad2      	subs	r2, r2, r3
    1e94:	2a00      	cmp	r2, #0
    1e96:	dd27      	ble.n	1ee8 <__aeabi_ui2f+0x84>
    1e98:	4094      	lsls	r4, r2
    1e9a:	0022      	movs	r2, r4
    1e9c:	4c13      	ldr	r4, [pc, #76]	; (1eec <__aeabi_ui2f+0x88>)
    1e9e:	4014      	ands	r4, r2
    1ea0:	0751      	lsls	r1, r2, #29
    1ea2:	d004      	beq.n	1eae <__aeabi_ui2f+0x4a>
    1ea4:	210f      	movs	r1, #15
    1ea6:	400a      	ands	r2, r1
    1ea8:	2a04      	cmp	r2, #4
    1eaa:	d000      	beq.n	1eae <__aeabi_ui2f+0x4a>
    1eac:	3404      	adds	r4, #4
    1eae:	0162      	lsls	r2, r4, #5
    1eb0:	d412      	bmi.n	1ed8 <__aeabi_ui2f+0x74>
    1eb2:	01a4      	lsls	r4, r4, #6
    1eb4:	0a64      	lsrs	r4, r4, #9
    1eb6:	b2db      	uxtb	r3, r3
    1eb8:	e7e3      	b.n	1e82 <__aeabi_ui2f+0x1e>
    1eba:	2300      	movs	r3, #0
    1ebc:	2400      	movs	r4, #0
    1ebe:	e7e0      	b.n	1e82 <__aeabi_ui2f+0x1e>
    1ec0:	22b9      	movs	r2, #185	; 0xb9
    1ec2:	0021      	movs	r1, r4
    1ec4:	1ad2      	subs	r2, r2, r3
    1ec6:	4091      	lsls	r1, r2
    1ec8:	000a      	movs	r2, r1
    1eca:	1e51      	subs	r1, r2, #1
    1ecc:	418a      	sbcs	r2, r1
    1ece:	2105      	movs	r1, #5
    1ed0:	1a09      	subs	r1, r1, r0
    1ed2:	40cc      	lsrs	r4, r1
    1ed4:	4314      	orrs	r4, r2
    1ed6:	e7db      	b.n	1e90 <__aeabi_ui2f+0x2c>
    1ed8:	4b04      	ldr	r3, [pc, #16]	; (1eec <__aeabi_ui2f+0x88>)
    1eda:	401c      	ands	r4, r3
    1edc:	239f      	movs	r3, #159	; 0x9f
    1ede:	01a4      	lsls	r4, r4, #6
    1ee0:	1a1b      	subs	r3, r3, r0
    1ee2:	0a64      	lsrs	r4, r4, #9
    1ee4:	b2db      	uxtb	r3, r3
    1ee6:	e7cc      	b.n	1e82 <__aeabi_ui2f+0x1e>
    1ee8:	0022      	movs	r2, r4
    1eea:	e7d7      	b.n	1e9c <__aeabi_ui2f+0x38>
    1eec:	fbffffff 	.word	0xfbffffff

00001ef0 <__aeabi_dmul>:
    1ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ef2:	4657      	mov	r7, sl
    1ef4:	4645      	mov	r5, r8
    1ef6:	46de      	mov	lr, fp
    1ef8:	464e      	mov	r6, r9
    1efa:	b5e0      	push	{r5, r6, r7, lr}
    1efc:	030c      	lsls	r4, r1, #12
    1efe:	4698      	mov	r8, r3
    1f00:	004e      	lsls	r6, r1, #1
    1f02:	0b23      	lsrs	r3, r4, #12
    1f04:	b087      	sub	sp, #28
    1f06:	0007      	movs	r7, r0
    1f08:	4692      	mov	sl, r2
    1f0a:	469b      	mov	fp, r3
    1f0c:	0d76      	lsrs	r6, r6, #21
    1f0e:	0fcd      	lsrs	r5, r1, #31
    1f10:	2e00      	cmp	r6, #0
    1f12:	d06b      	beq.n	1fec <__aeabi_dmul+0xfc>
    1f14:	4b6d      	ldr	r3, [pc, #436]	; (20cc <__aeabi_dmul+0x1dc>)
    1f16:	429e      	cmp	r6, r3
    1f18:	d035      	beq.n	1f86 <__aeabi_dmul+0x96>
    1f1a:	2480      	movs	r4, #128	; 0x80
    1f1c:	465b      	mov	r3, fp
    1f1e:	0f42      	lsrs	r2, r0, #29
    1f20:	0424      	lsls	r4, r4, #16
    1f22:	00db      	lsls	r3, r3, #3
    1f24:	4314      	orrs	r4, r2
    1f26:	431c      	orrs	r4, r3
    1f28:	00c3      	lsls	r3, r0, #3
    1f2a:	4699      	mov	r9, r3
    1f2c:	4b68      	ldr	r3, [pc, #416]	; (20d0 <__aeabi_dmul+0x1e0>)
    1f2e:	46a3      	mov	fp, r4
    1f30:	469c      	mov	ip, r3
    1f32:	2300      	movs	r3, #0
    1f34:	2700      	movs	r7, #0
    1f36:	4466      	add	r6, ip
    1f38:	9302      	str	r3, [sp, #8]
    1f3a:	4643      	mov	r3, r8
    1f3c:	031c      	lsls	r4, r3, #12
    1f3e:	005a      	lsls	r2, r3, #1
    1f40:	0fdb      	lsrs	r3, r3, #31
    1f42:	4650      	mov	r0, sl
    1f44:	0b24      	lsrs	r4, r4, #12
    1f46:	0d52      	lsrs	r2, r2, #21
    1f48:	4698      	mov	r8, r3
    1f4a:	d100      	bne.n	1f4e <__aeabi_dmul+0x5e>
    1f4c:	e076      	b.n	203c <__aeabi_dmul+0x14c>
    1f4e:	4b5f      	ldr	r3, [pc, #380]	; (20cc <__aeabi_dmul+0x1dc>)
    1f50:	429a      	cmp	r2, r3
    1f52:	d06d      	beq.n	2030 <__aeabi_dmul+0x140>
    1f54:	2380      	movs	r3, #128	; 0x80
    1f56:	0f41      	lsrs	r1, r0, #29
    1f58:	041b      	lsls	r3, r3, #16
    1f5a:	430b      	orrs	r3, r1
    1f5c:	495c      	ldr	r1, [pc, #368]	; (20d0 <__aeabi_dmul+0x1e0>)
    1f5e:	00e4      	lsls	r4, r4, #3
    1f60:	468c      	mov	ip, r1
    1f62:	431c      	orrs	r4, r3
    1f64:	00c3      	lsls	r3, r0, #3
    1f66:	2000      	movs	r0, #0
    1f68:	4462      	add	r2, ip
    1f6a:	4641      	mov	r1, r8
    1f6c:	18b6      	adds	r6, r6, r2
    1f6e:	4069      	eors	r1, r5
    1f70:	1c72      	adds	r2, r6, #1
    1f72:	9101      	str	r1, [sp, #4]
    1f74:	4694      	mov	ip, r2
    1f76:	4307      	orrs	r7, r0
    1f78:	2f0f      	cmp	r7, #15
    1f7a:	d900      	bls.n	1f7e <__aeabi_dmul+0x8e>
    1f7c:	e0b0      	b.n	20e0 <__aeabi_dmul+0x1f0>
    1f7e:	4a55      	ldr	r2, [pc, #340]	; (20d4 <__aeabi_dmul+0x1e4>)
    1f80:	00bf      	lsls	r7, r7, #2
    1f82:	59d2      	ldr	r2, [r2, r7]
    1f84:	4697      	mov	pc, r2
    1f86:	465b      	mov	r3, fp
    1f88:	4303      	orrs	r3, r0
    1f8a:	4699      	mov	r9, r3
    1f8c:	d000      	beq.n	1f90 <__aeabi_dmul+0xa0>
    1f8e:	e087      	b.n	20a0 <__aeabi_dmul+0x1b0>
    1f90:	2300      	movs	r3, #0
    1f92:	469b      	mov	fp, r3
    1f94:	3302      	adds	r3, #2
    1f96:	2708      	movs	r7, #8
    1f98:	9302      	str	r3, [sp, #8]
    1f9a:	e7ce      	b.n	1f3a <__aeabi_dmul+0x4a>
    1f9c:	4642      	mov	r2, r8
    1f9e:	9201      	str	r2, [sp, #4]
    1fa0:	2802      	cmp	r0, #2
    1fa2:	d067      	beq.n	2074 <__aeabi_dmul+0x184>
    1fa4:	2803      	cmp	r0, #3
    1fa6:	d100      	bne.n	1faa <__aeabi_dmul+0xba>
    1fa8:	e20e      	b.n	23c8 <__aeabi_dmul+0x4d8>
    1faa:	2801      	cmp	r0, #1
    1fac:	d000      	beq.n	1fb0 <__aeabi_dmul+0xc0>
    1fae:	e162      	b.n	2276 <__aeabi_dmul+0x386>
    1fb0:	2300      	movs	r3, #0
    1fb2:	2400      	movs	r4, #0
    1fb4:	2200      	movs	r2, #0
    1fb6:	4699      	mov	r9, r3
    1fb8:	9901      	ldr	r1, [sp, #4]
    1fba:	4001      	ands	r1, r0
    1fbc:	b2cd      	uxtb	r5, r1
    1fbe:	2100      	movs	r1, #0
    1fc0:	0312      	lsls	r2, r2, #12
    1fc2:	0d0b      	lsrs	r3, r1, #20
    1fc4:	0b12      	lsrs	r2, r2, #12
    1fc6:	051b      	lsls	r3, r3, #20
    1fc8:	4313      	orrs	r3, r2
    1fca:	4a43      	ldr	r2, [pc, #268]	; (20d8 <__aeabi_dmul+0x1e8>)
    1fcc:	0524      	lsls	r4, r4, #20
    1fce:	4013      	ands	r3, r2
    1fd0:	431c      	orrs	r4, r3
    1fd2:	0064      	lsls	r4, r4, #1
    1fd4:	07ed      	lsls	r5, r5, #31
    1fd6:	0864      	lsrs	r4, r4, #1
    1fd8:	432c      	orrs	r4, r5
    1fda:	4648      	mov	r0, r9
    1fdc:	0021      	movs	r1, r4
    1fde:	b007      	add	sp, #28
    1fe0:	bc3c      	pop	{r2, r3, r4, r5}
    1fe2:	4690      	mov	r8, r2
    1fe4:	4699      	mov	r9, r3
    1fe6:	46a2      	mov	sl, r4
    1fe8:	46ab      	mov	fp, r5
    1fea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1fec:	4303      	orrs	r3, r0
    1fee:	4699      	mov	r9, r3
    1ff0:	d04f      	beq.n	2092 <__aeabi_dmul+0x1a2>
    1ff2:	465b      	mov	r3, fp
    1ff4:	2b00      	cmp	r3, #0
    1ff6:	d100      	bne.n	1ffa <__aeabi_dmul+0x10a>
    1ff8:	e189      	b.n	230e <__aeabi_dmul+0x41e>
    1ffa:	4658      	mov	r0, fp
    1ffc:	f000 fdb8 	bl	2b70 <__clzsi2>
    2000:	0003      	movs	r3, r0
    2002:	3b0b      	subs	r3, #11
    2004:	2b1c      	cmp	r3, #28
    2006:	dd00      	ble.n	200a <__aeabi_dmul+0x11a>
    2008:	e17a      	b.n	2300 <__aeabi_dmul+0x410>
    200a:	221d      	movs	r2, #29
    200c:	1ad3      	subs	r3, r2, r3
    200e:	003a      	movs	r2, r7
    2010:	0001      	movs	r1, r0
    2012:	465c      	mov	r4, fp
    2014:	40da      	lsrs	r2, r3
    2016:	3908      	subs	r1, #8
    2018:	408c      	lsls	r4, r1
    201a:	0013      	movs	r3, r2
    201c:	408f      	lsls	r7, r1
    201e:	4323      	orrs	r3, r4
    2020:	469b      	mov	fp, r3
    2022:	46b9      	mov	r9, r7
    2024:	2300      	movs	r3, #0
    2026:	4e2d      	ldr	r6, [pc, #180]	; (20dc <__aeabi_dmul+0x1ec>)
    2028:	2700      	movs	r7, #0
    202a:	1a36      	subs	r6, r6, r0
    202c:	9302      	str	r3, [sp, #8]
    202e:	e784      	b.n	1f3a <__aeabi_dmul+0x4a>
    2030:	4653      	mov	r3, sl
    2032:	4323      	orrs	r3, r4
    2034:	d12a      	bne.n	208c <__aeabi_dmul+0x19c>
    2036:	2400      	movs	r4, #0
    2038:	2002      	movs	r0, #2
    203a:	e796      	b.n	1f6a <__aeabi_dmul+0x7a>
    203c:	4653      	mov	r3, sl
    203e:	4323      	orrs	r3, r4
    2040:	d020      	beq.n	2084 <__aeabi_dmul+0x194>
    2042:	2c00      	cmp	r4, #0
    2044:	d100      	bne.n	2048 <__aeabi_dmul+0x158>
    2046:	e157      	b.n	22f8 <__aeabi_dmul+0x408>
    2048:	0020      	movs	r0, r4
    204a:	f000 fd91 	bl	2b70 <__clzsi2>
    204e:	0003      	movs	r3, r0
    2050:	3b0b      	subs	r3, #11
    2052:	2b1c      	cmp	r3, #28
    2054:	dd00      	ble.n	2058 <__aeabi_dmul+0x168>
    2056:	e149      	b.n	22ec <__aeabi_dmul+0x3fc>
    2058:	211d      	movs	r1, #29
    205a:	1acb      	subs	r3, r1, r3
    205c:	4651      	mov	r1, sl
    205e:	0002      	movs	r2, r0
    2060:	40d9      	lsrs	r1, r3
    2062:	4653      	mov	r3, sl
    2064:	3a08      	subs	r2, #8
    2066:	4094      	lsls	r4, r2
    2068:	4093      	lsls	r3, r2
    206a:	430c      	orrs	r4, r1
    206c:	4a1b      	ldr	r2, [pc, #108]	; (20dc <__aeabi_dmul+0x1ec>)
    206e:	1a12      	subs	r2, r2, r0
    2070:	2000      	movs	r0, #0
    2072:	e77a      	b.n	1f6a <__aeabi_dmul+0x7a>
    2074:	2501      	movs	r5, #1
    2076:	9b01      	ldr	r3, [sp, #4]
    2078:	4c14      	ldr	r4, [pc, #80]	; (20cc <__aeabi_dmul+0x1dc>)
    207a:	401d      	ands	r5, r3
    207c:	2300      	movs	r3, #0
    207e:	2200      	movs	r2, #0
    2080:	4699      	mov	r9, r3
    2082:	e79c      	b.n	1fbe <__aeabi_dmul+0xce>
    2084:	2400      	movs	r4, #0
    2086:	2200      	movs	r2, #0
    2088:	2001      	movs	r0, #1
    208a:	e76e      	b.n	1f6a <__aeabi_dmul+0x7a>
    208c:	4653      	mov	r3, sl
    208e:	2003      	movs	r0, #3
    2090:	e76b      	b.n	1f6a <__aeabi_dmul+0x7a>
    2092:	2300      	movs	r3, #0
    2094:	469b      	mov	fp, r3
    2096:	3301      	adds	r3, #1
    2098:	2704      	movs	r7, #4
    209a:	2600      	movs	r6, #0
    209c:	9302      	str	r3, [sp, #8]
    209e:	e74c      	b.n	1f3a <__aeabi_dmul+0x4a>
    20a0:	2303      	movs	r3, #3
    20a2:	4681      	mov	r9, r0
    20a4:	270c      	movs	r7, #12
    20a6:	9302      	str	r3, [sp, #8]
    20a8:	e747      	b.n	1f3a <__aeabi_dmul+0x4a>
    20aa:	2280      	movs	r2, #128	; 0x80
    20ac:	2300      	movs	r3, #0
    20ae:	2500      	movs	r5, #0
    20b0:	0312      	lsls	r2, r2, #12
    20b2:	4699      	mov	r9, r3
    20b4:	4c05      	ldr	r4, [pc, #20]	; (20cc <__aeabi_dmul+0x1dc>)
    20b6:	e782      	b.n	1fbe <__aeabi_dmul+0xce>
    20b8:	465c      	mov	r4, fp
    20ba:	464b      	mov	r3, r9
    20bc:	9802      	ldr	r0, [sp, #8]
    20be:	e76f      	b.n	1fa0 <__aeabi_dmul+0xb0>
    20c0:	465c      	mov	r4, fp
    20c2:	464b      	mov	r3, r9
    20c4:	9501      	str	r5, [sp, #4]
    20c6:	9802      	ldr	r0, [sp, #8]
    20c8:	e76a      	b.n	1fa0 <__aeabi_dmul+0xb0>
    20ca:	46c0      	nop			; (mov r8, r8)
    20cc:	000007ff 	.word	0x000007ff
    20d0:	fffffc01 	.word	0xfffffc01
    20d4:	000040a8 	.word	0x000040a8
    20d8:	800fffff 	.word	0x800fffff
    20dc:	fffffc0d 	.word	0xfffffc0d
    20e0:	464a      	mov	r2, r9
    20e2:	4649      	mov	r1, r9
    20e4:	0c17      	lsrs	r7, r2, #16
    20e6:	0c1a      	lsrs	r2, r3, #16
    20e8:	041b      	lsls	r3, r3, #16
    20ea:	0c1b      	lsrs	r3, r3, #16
    20ec:	0408      	lsls	r0, r1, #16
    20ee:	0019      	movs	r1, r3
    20f0:	0c00      	lsrs	r0, r0, #16
    20f2:	4341      	muls	r1, r0
    20f4:	0015      	movs	r5, r2
    20f6:	4688      	mov	r8, r1
    20f8:	0019      	movs	r1, r3
    20fa:	437d      	muls	r5, r7
    20fc:	4379      	muls	r1, r7
    20fe:	9503      	str	r5, [sp, #12]
    2100:	4689      	mov	r9, r1
    2102:	0029      	movs	r1, r5
    2104:	0015      	movs	r5, r2
    2106:	4345      	muls	r5, r0
    2108:	444d      	add	r5, r9
    210a:	9502      	str	r5, [sp, #8]
    210c:	4645      	mov	r5, r8
    210e:	0c2d      	lsrs	r5, r5, #16
    2110:	46aa      	mov	sl, r5
    2112:	9d02      	ldr	r5, [sp, #8]
    2114:	4455      	add	r5, sl
    2116:	45a9      	cmp	r9, r5
    2118:	d906      	bls.n	2128 <__aeabi_dmul+0x238>
    211a:	468a      	mov	sl, r1
    211c:	2180      	movs	r1, #128	; 0x80
    211e:	0249      	lsls	r1, r1, #9
    2120:	4689      	mov	r9, r1
    2122:	44ca      	add	sl, r9
    2124:	4651      	mov	r1, sl
    2126:	9103      	str	r1, [sp, #12]
    2128:	0c29      	lsrs	r1, r5, #16
    212a:	9104      	str	r1, [sp, #16]
    212c:	4641      	mov	r1, r8
    212e:	0409      	lsls	r1, r1, #16
    2130:	042d      	lsls	r5, r5, #16
    2132:	0c09      	lsrs	r1, r1, #16
    2134:	4688      	mov	r8, r1
    2136:	0029      	movs	r1, r5
    2138:	0c25      	lsrs	r5, r4, #16
    213a:	0424      	lsls	r4, r4, #16
    213c:	4441      	add	r1, r8
    213e:	0c24      	lsrs	r4, r4, #16
    2140:	9105      	str	r1, [sp, #20]
    2142:	0021      	movs	r1, r4
    2144:	4341      	muls	r1, r0
    2146:	4688      	mov	r8, r1
    2148:	0021      	movs	r1, r4
    214a:	4379      	muls	r1, r7
    214c:	468a      	mov	sl, r1
    214e:	4368      	muls	r0, r5
    2150:	4641      	mov	r1, r8
    2152:	4450      	add	r0, sl
    2154:	4681      	mov	r9, r0
    2156:	0c08      	lsrs	r0, r1, #16
    2158:	4448      	add	r0, r9
    215a:	436f      	muls	r7, r5
    215c:	4582      	cmp	sl, r0
    215e:	d903      	bls.n	2168 <__aeabi_dmul+0x278>
    2160:	2180      	movs	r1, #128	; 0x80
    2162:	0249      	lsls	r1, r1, #9
    2164:	4689      	mov	r9, r1
    2166:	444f      	add	r7, r9
    2168:	0c01      	lsrs	r1, r0, #16
    216a:	4689      	mov	r9, r1
    216c:	0039      	movs	r1, r7
    216e:	4449      	add	r1, r9
    2170:	9102      	str	r1, [sp, #8]
    2172:	4641      	mov	r1, r8
    2174:	040f      	lsls	r7, r1, #16
    2176:	9904      	ldr	r1, [sp, #16]
    2178:	0c3f      	lsrs	r7, r7, #16
    217a:	4688      	mov	r8, r1
    217c:	0400      	lsls	r0, r0, #16
    217e:	19c0      	adds	r0, r0, r7
    2180:	4480      	add	r8, r0
    2182:	4641      	mov	r1, r8
    2184:	9104      	str	r1, [sp, #16]
    2186:	4659      	mov	r1, fp
    2188:	0c0f      	lsrs	r7, r1, #16
    218a:	0409      	lsls	r1, r1, #16
    218c:	0c09      	lsrs	r1, r1, #16
    218e:	4688      	mov	r8, r1
    2190:	4359      	muls	r1, r3
    2192:	468a      	mov	sl, r1
    2194:	0039      	movs	r1, r7
    2196:	4351      	muls	r1, r2
    2198:	4689      	mov	r9, r1
    219a:	4641      	mov	r1, r8
    219c:	434a      	muls	r2, r1
    219e:	4651      	mov	r1, sl
    21a0:	0c09      	lsrs	r1, r1, #16
    21a2:	468b      	mov	fp, r1
    21a4:	437b      	muls	r3, r7
    21a6:	18d2      	adds	r2, r2, r3
    21a8:	445a      	add	r2, fp
    21aa:	4293      	cmp	r3, r2
    21ac:	d903      	bls.n	21b6 <__aeabi_dmul+0x2c6>
    21ae:	2380      	movs	r3, #128	; 0x80
    21b0:	025b      	lsls	r3, r3, #9
    21b2:	469b      	mov	fp, r3
    21b4:	44d9      	add	r9, fp
    21b6:	4651      	mov	r1, sl
    21b8:	0409      	lsls	r1, r1, #16
    21ba:	0c09      	lsrs	r1, r1, #16
    21bc:	468a      	mov	sl, r1
    21be:	4641      	mov	r1, r8
    21c0:	4361      	muls	r1, r4
    21c2:	437c      	muls	r4, r7
    21c4:	0c13      	lsrs	r3, r2, #16
    21c6:	0412      	lsls	r2, r2, #16
    21c8:	444b      	add	r3, r9
    21ca:	4452      	add	r2, sl
    21cc:	46a1      	mov	r9, r4
    21ce:	468a      	mov	sl, r1
    21d0:	003c      	movs	r4, r7
    21d2:	4641      	mov	r1, r8
    21d4:	436c      	muls	r4, r5
    21d6:	434d      	muls	r5, r1
    21d8:	4651      	mov	r1, sl
    21da:	444d      	add	r5, r9
    21dc:	0c0f      	lsrs	r7, r1, #16
    21de:	197d      	adds	r5, r7, r5
    21e0:	45a9      	cmp	r9, r5
    21e2:	d903      	bls.n	21ec <__aeabi_dmul+0x2fc>
    21e4:	2180      	movs	r1, #128	; 0x80
    21e6:	0249      	lsls	r1, r1, #9
    21e8:	4688      	mov	r8, r1
    21ea:	4444      	add	r4, r8
    21ec:	9f04      	ldr	r7, [sp, #16]
    21ee:	9903      	ldr	r1, [sp, #12]
    21f0:	46b8      	mov	r8, r7
    21f2:	4441      	add	r1, r8
    21f4:	468b      	mov	fp, r1
    21f6:	4583      	cmp	fp, r0
    21f8:	4180      	sbcs	r0, r0
    21fa:	4241      	negs	r1, r0
    21fc:	4688      	mov	r8, r1
    21fe:	4651      	mov	r1, sl
    2200:	0408      	lsls	r0, r1, #16
    2202:	042f      	lsls	r7, r5, #16
    2204:	0c00      	lsrs	r0, r0, #16
    2206:	183f      	adds	r7, r7, r0
    2208:	4658      	mov	r0, fp
    220a:	9902      	ldr	r1, [sp, #8]
    220c:	1810      	adds	r0, r2, r0
    220e:	4689      	mov	r9, r1
    2210:	4290      	cmp	r0, r2
    2212:	4192      	sbcs	r2, r2
    2214:	444f      	add	r7, r9
    2216:	46ba      	mov	sl, r7
    2218:	4252      	negs	r2, r2
    221a:	4699      	mov	r9, r3
    221c:	4693      	mov	fp, r2
    221e:	44c2      	add	sl, r8
    2220:	44d1      	add	r9, sl
    2222:	44cb      	add	fp, r9
    2224:	428f      	cmp	r7, r1
    2226:	41bf      	sbcs	r7, r7
    2228:	45c2      	cmp	sl, r8
    222a:	4189      	sbcs	r1, r1
    222c:	4599      	cmp	r9, r3
    222e:	419b      	sbcs	r3, r3
    2230:	4593      	cmp	fp, r2
    2232:	4192      	sbcs	r2, r2
    2234:	427f      	negs	r7, r7
    2236:	4249      	negs	r1, r1
    2238:	0c2d      	lsrs	r5, r5, #16
    223a:	4252      	negs	r2, r2
    223c:	430f      	orrs	r7, r1
    223e:	425b      	negs	r3, r3
    2240:	4313      	orrs	r3, r2
    2242:	197f      	adds	r7, r7, r5
    2244:	18ff      	adds	r7, r7, r3
    2246:	465b      	mov	r3, fp
    2248:	193c      	adds	r4, r7, r4
    224a:	0ddb      	lsrs	r3, r3, #23
    224c:	9a05      	ldr	r2, [sp, #20]
    224e:	0264      	lsls	r4, r4, #9
    2250:	431c      	orrs	r4, r3
    2252:	0243      	lsls	r3, r0, #9
    2254:	4313      	orrs	r3, r2
    2256:	1e5d      	subs	r5, r3, #1
    2258:	41ab      	sbcs	r3, r5
    225a:	465a      	mov	r2, fp
    225c:	0dc0      	lsrs	r0, r0, #23
    225e:	4303      	orrs	r3, r0
    2260:	0252      	lsls	r2, r2, #9
    2262:	4313      	orrs	r3, r2
    2264:	01e2      	lsls	r2, r4, #7
    2266:	d556      	bpl.n	2316 <__aeabi_dmul+0x426>
    2268:	2001      	movs	r0, #1
    226a:	085a      	lsrs	r2, r3, #1
    226c:	4003      	ands	r3, r0
    226e:	4313      	orrs	r3, r2
    2270:	07e2      	lsls	r2, r4, #31
    2272:	4313      	orrs	r3, r2
    2274:	0864      	lsrs	r4, r4, #1
    2276:	485a      	ldr	r0, [pc, #360]	; (23e0 <__aeabi_dmul+0x4f0>)
    2278:	4460      	add	r0, ip
    227a:	2800      	cmp	r0, #0
    227c:	dd4d      	ble.n	231a <__aeabi_dmul+0x42a>
    227e:	075a      	lsls	r2, r3, #29
    2280:	d009      	beq.n	2296 <__aeabi_dmul+0x3a6>
    2282:	220f      	movs	r2, #15
    2284:	401a      	ands	r2, r3
    2286:	2a04      	cmp	r2, #4
    2288:	d005      	beq.n	2296 <__aeabi_dmul+0x3a6>
    228a:	1d1a      	adds	r2, r3, #4
    228c:	429a      	cmp	r2, r3
    228e:	419b      	sbcs	r3, r3
    2290:	425b      	negs	r3, r3
    2292:	18e4      	adds	r4, r4, r3
    2294:	0013      	movs	r3, r2
    2296:	01e2      	lsls	r2, r4, #7
    2298:	d504      	bpl.n	22a4 <__aeabi_dmul+0x3b4>
    229a:	2080      	movs	r0, #128	; 0x80
    229c:	4a51      	ldr	r2, [pc, #324]	; (23e4 <__aeabi_dmul+0x4f4>)
    229e:	00c0      	lsls	r0, r0, #3
    22a0:	4014      	ands	r4, r2
    22a2:	4460      	add	r0, ip
    22a4:	4a50      	ldr	r2, [pc, #320]	; (23e8 <__aeabi_dmul+0x4f8>)
    22a6:	4290      	cmp	r0, r2
    22a8:	dd00      	ble.n	22ac <__aeabi_dmul+0x3bc>
    22aa:	e6e3      	b.n	2074 <__aeabi_dmul+0x184>
    22ac:	2501      	movs	r5, #1
    22ae:	08db      	lsrs	r3, r3, #3
    22b0:	0762      	lsls	r2, r4, #29
    22b2:	431a      	orrs	r2, r3
    22b4:	0264      	lsls	r4, r4, #9
    22b6:	9b01      	ldr	r3, [sp, #4]
    22b8:	4691      	mov	r9, r2
    22ba:	0b22      	lsrs	r2, r4, #12
    22bc:	0544      	lsls	r4, r0, #21
    22be:	0d64      	lsrs	r4, r4, #21
    22c0:	401d      	ands	r5, r3
    22c2:	e67c      	b.n	1fbe <__aeabi_dmul+0xce>
    22c4:	2280      	movs	r2, #128	; 0x80
    22c6:	4659      	mov	r1, fp
    22c8:	0312      	lsls	r2, r2, #12
    22ca:	4211      	tst	r1, r2
    22cc:	d008      	beq.n	22e0 <__aeabi_dmul+0x3f0>
    22ce:	4214      	tst	r4, r2
    22d0:	d106      	bne.n	22e0 <__aeabi_dmul+0x3f0>
    22d2:	4322      	orrs	r2, r4
    22d4:	0312      	lsls	r2, r2, #12
    22d6:	0b12      	lsrs	r2, r2, #12
    22d8:	4645      	mov	r5, r8
    22da:	4699      	mov	r9, r3
    22dc:	4c43      	ldr	r4, [pc, #268]	; (23ec <__aeabi_dmul+0x4fc>)
    22de:	e66e      	b.n	1fbe <__aeabi_dmul+0xce>
    22e0:	465b      	mov	r3, fp
    22e2:	431a      	orrs	r2, r3
    22e4:	0312      	lsls	r2, r2, #12
    22e6:	0b12      	lsrs	r2, r2, #12
    22e8:	4c40      	ldr	r4, [pc, #256]	; (23ec <__aeabi_dmul+0x4fc>)
    22ea:	e668      	b.n	1fbe <__aeabi_dmul+0xce>
    22ec:	0003      	movs	r3, r0
    22ee:	4654      	mov	r4, sl
    22f0:	3b28      	subs	r3, #40	; 0x28
    22f2:	409c      	lsls	r4, r3
    22f4:	2300      	movs	r3, #0
    22f6:	e6b9      	b.n	206c <__aeabi_dmul+0x17c>
    22f8:	f000 fc3a 	bl	2b70 <__clzsi2>
    22fc:	3020      	adds	r0, #32
    22fe:	e6a6      	b.n	204e <__aeabi_dmul+0x15e>
    2300:	0003      	movs	r3, r0
    2302:	3b28      	subs	r3, #40	; 0x28
    2304:	409f      	lsls	r7, r3
    2306:	2300      	movs	r3, #0
    2308:	46bb      	mov	fp, r7
    230a:	4699      	mov	r9, r3
    230c:	e68a      	b.n	2024 <__aeabi_dmul+0x134>
    230e:	f000 fc2f 	bl	2b70 <__clzsi2>
    2312:	3020      	adds	r0, #32
    2314:	e674      	b.n	2000 <__aeabi_dmul+0x110>
    2316:	46b4      	mov	ip, r6
    2318:	e7ad      	b.n	2276 <__aeabi_dmul+0x386>
    231a:	2501      	movs	r5, #1
    231c:	1a2a      	subs	r2, r5, r0
    231e:	2a38      	cmp	r2, #56	; 0x38
    2320:	dd06      	ble.n	2330 <__aeabi_dmul+0x440>
    2322:	9b01      	ldr	r3, [sp, #4]
    2324:	2400      	movs	r4, #0
    2326:	401d      	ands	r5, r3
    2328:	2300      	movs	r3, #0
    232a:	2200      	movs	r2, #0
    232c:	4699      	mov	r9, r3
    232e:	e646      	b.n	1fbe <__aeabi_dmul+0xce>
    2330:	2a1f      	cmp	r2, #31
    2332:	dc21      	bgt.n	2378 <__aeabi_dmul+0x488>
    2334:	2520      	movs	r5, #32
    2336:	0020      	movs	r0, r4
    2338:	1aad      	subs	r5, r5, r2
    233a:	001e      	movs	r6, r3
    233c:	40ab      	lsls	r3, r5
    233e:	40a8      	lsls	r0, r5
    2340:	40d6      	lsrs	r6, r2
    2342:	1e5d      	subs	r5, r3, #1
    2344:	41ab      	sbcs	r3, r5
    2346:	4330      	orrs	r0, r6
    2348:	4318      	orrs	r0, r3
    234a:	40d4      	lsrs	r4, r2
    234c:	0743      	lsls	r3, r0, #29
    234e:	d009      	beq.n	2364 <__aeabi_dmul+0x474>
    2350:	230f      	movs	r3, #15
    2352:	4003      	ands	r3, r0
    2354:	2b04      	cmp	r3, #4
    2356:	d005      	beq.n	2364 <__aeabi_dmul+0x474>
    2358:	0003      	movs	r3, r0
    235a:	1d18      	adds	r0, r3, #4
    235c:	4298      	cmp	r0, r3
    235e:	419b      	sbcs	r3, r3
    2360:	425b      	negs	r3, r3
    2362:	18e4      	adds	r4, r4, r3
    2364:	0223      	lsls	r3, r4, #8
    2366:	d521      	bpl.n	23ac <__aeabi_dmul+0x4bc>
    2368:	2501      	movs	r5, #1
    236a:	9b01      	ldr	r3, [sp, #4]
    236c:	2401      	movs	r4, #1
    236e:	401d      	ands	r5, r3
    2370:	2300      	movs	r3, #0
    2372:	2200      	movs	r2, #0
    2374:	4699      	mov	r9, r3
    2376:	e622      	b.n	1fbe <__aeabi_dmul+0xce>
    2378:	251f      	movs	r5, #31
    237a:	0021      	movs	r1, r4
    237c:	426d      	negs	r5, r5
    237e:	1a28      	subs	r0, r5, r0
    2380:	40c1      	lsrs	r1, r0
    2382:	0008      	movs	r0, r1
    2384:	2a20      	cmp	r2, #32
    2386:	d01d      	beq.n	23c4 <__aeabi_dmul+0x4d4>
    2388:	355f      	adds	r5, #95	; 0x5f
    238a:	1aaa      	subs	r2, r5, r2
    238c:	4094      	lsls	r4, r2
    238e:	4323      	orrs	r3, r4
    2390:	1e5c      	subs	r4, r3, #1
    2392:	41a3      	sbcs	r3, r4
    2394:	2507      	movs	r5, #7
    2396:	4303      	orrs	r3, r0
    2398:	401d      	ands	r5, r3
    239a:	2200      	movs	r2, #0
    239c:	2d00      	cmp	r5, #0
    239e:	d009      	beq.n	23b4 <__aeabi_dmul+0x4c4>
    23a0:	220f      	movs	r2, #15
    23a2:	2400      	movs	r4, #0
    23a4:	401a      	ands	r2, r3
    23a6:	0018      	movs	r0, r3
    23a8:	2a04      	cmp	r2, #4
    23aa:	d1d6      	bne.n	235a <__aeabi_dmul+0x46a>
    23ac:	0003      	movs	r3, r0
    23ae:	0765      	lsls	r5, r4, #29
    23b0:	0264      	lsls	r4, r4, #9
    23b2:	0b22      	lsrs	r2, r4, #12
    23b4:	08db      	lsrs	r3, r3, #3
    23b6:	432b      	orrs	r3, r5
    23b8:	2501      	movs	r5, #1
    23ba:	4699      	mov	r9, r3
    23bc:	9b01      	ldr	r3, [sp, #4]
    23be:	2400      	movs	r4, #0
    23c0:	401d      	ands	r5, r3
    23c2:	e5fc      	b.n	1fbe <__aeabi_dmul+0xce>
    23c4:	2400      	movs	r4, #0
    23c6:	e7e2      	b.n	238e <__aeabi_dmul+0x49e>
    23c8:	2280      	movs	r2, #128	; 0x80
    23ca:	2501      	movs	r5, #1
    23cc:	0312      	lsls	r2, r2, #12
    23ce:	4322      	orrs	r2, r4
    23d0:	9901      	ldr	r1, [sp, #4]
    23d2:	0312      	lsls	r2, r2, #12
    23d4:	0b12      	lsrs	r2, r2, #12
    23d6:	400d      	ands	r5, r1
    23d8:	4699      	mov	r9, r3
    23da:	4c04      	ldr	r4, [pc, #16]	; (23ec <__aeabi_dmul+0x4fc>)
    23dc:	e5ef      	b.n	1fbe <__aeabi_dmul+0xce>
    23de:	46c0      	nop			; (mov r8, r8)
    23e0:	000003ff 	.word	0x000003ff
    23e4:	feffffff 	.word	0xfeffffff
    23e8:	000007fe 	.word	0x000007fe
    23ec:	000007ff 	.word	0x000007ff

000023f0 <__aeabi_dsub>:
    23f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    23f2:	4646      	mov	r6, r8
    23f4:	46d6      	mov	lr, sl
    23f6:	464f      	mov	r7, r9
    23f8:	030c      	lsls	r4, r1, #12
    23fa:	b5c0      	push	{r6, r7, lr}
    23fc:	0fcd      	lsrs	r5, r1, #31
    23fe:	004e      	lsls	r6, r1, #1
    2400:	0a61      	lsrs	r1, r4, #9
    2402:	0f44      	lsrs	r4, r0, #29
    2404:	430c      	orrs	r4, r1
    2406:	00c1      	lsls	r1, r0, #3
    2408:	0058      	lsls	r0, r3, #1
    240a:	0d40      	lsrs	r0, r0, #21
    240c:	4684      	mov	ip, r0
    240e:	468a      	mov	sl, r1
    2410:	000f      	movs	r7, r1
    2412:	0319      	lsls	r1, r3, #12
    2414:	0f50      	lsrs	r0, r2, #29
    2416:	0a49      	lsrs	r1, r1, #9
    2418:	4301      	orrs	r1, r0
    241a:	48c6      	ldr	r0, [pc, #792]	; (2734 <__aeabi_dsub+0x344>)
    241c:	0d76      	lsrs	r6, r6, #21
    241e:	46a8      	mov	r8, r5
    2420:	0fdb      	lsrs	r3, r3, #31
    2422:	00d2      	lsls	r2, r2, #3
    2424:	4584      	cmp	ip, r0
    2426:	d100      	bne.n	242a <__aeabi_dsub+0x3a>
    2428:	e0d8      	b.n	25dc <__aeabi_dsub+0x1ec>
    242a:	2001      	movs	r0, #1
    242c:	4043      	eors	r3, r0
    242e:	42ab      	cmp	r3, r5
    2430:	d100      	bne.n	2434 <__aeabi_dsub+0x44>
    2432:	e0a6      	b.n	2582 <__aeabi_dsub+0x192>
    2434:	4660      	mov	r0, ip
    2436:	1a35      	subs	r5, r6, r0
    2438:	2d00      	cmp	r5, #0
    243a:	dc00      	bgt.n	243e <__aeabi_dsub+0x4e>
    243c:	e105      	b.n	264a <__aeabi_dsub+0x25a>
    243e:	2800      	cmp	r0, #0
    2440:	d110      	bne.n	2464 <__aeabi_dsub+0x74>
    2442:	000b      	movs	r3, r1
    2444:	4313      	orrs	r3, r2
    2446:	d100      	bne.n	244a <__aeabi_dsub+0x5a>
    2448:	e0d7      	b.n	25fa <__aeabi_dsub+0x20a>
    244a:	1e6b      	subs	r3, r5, #1
    244c:	2b00      	cmp	r3, #0
    244e:	d000      	beq.n	2452 <__aeabi_dsub+0x62>
    2450:	e14b      	b.n	26ea <__aeabi_dsub+0x2fa>
    2452:	4653      	mov	r3, sl
    2454:	1a9f      	subs	r7, r3, r2
    2456:	45ba      	cmp	sl, r7
    2458:	4180      	sbcs	r0, r0
    245a:	1a64      	subs	r4, r4, r1
    245c:	4240      	negs	r0, r0
    245e:	1a24      	subs	r4, r4, r0
    2460:	2601      	movs	r6, #1
    2462:	e01e      	b.n	24a2 <__aeabi_dsub+0xb2>
    2464:	4bb3      	ldr	r3, [pc, #716]	; (2734 <__aeabi_dsub+0x344>)
    2466:	429e      	cmp	r6, r3
    2468:	d048      	beq.n	24fc <__aeabi_dsub+0x10c>
    246a:	2380      	movs	r3, #128	; 0x80
    246c:	041b      	lsls	r3, r3, #16
    246e:	4319      	orrs	r1, r3
    2470:	2d38      	cmp	r5, #56	; 0x38
    2472:	dd00      	ble.n	2476 <__aeabi_dsub+0x86>
    2474:	e119      	b.n	26aa <__aeabi_dsub+0x2ba>
    2476:	2d1f      	cmp	r5, #31
    2478:	dd00      	ble.n	247c <__aeabi_dsub+0x8c>
    247a:	e14c      	b.n	2716 <__aeabi_dsub+0x326>
    247c:	2320      	movs	r3, #32
    247e:	000f      	movs	r7, r1
    2480:	1b5b      	subs	r3, r3, r5
    2482:	0010      	movs	r0, r2
    2484:	409a      	lsls	r2, r3
    2486:	409f      	lsls	r7, r3
    2488:	40e8      	lsrs	r0, r5
    248a:	1e53      	subs	r3, r2, #1
    248c:	419a      	sbcs	r2, r3
    248e:	40e9      	lsrs	r1, r5
    2490:	4307      	orrs	r7, r0
    2492:	4317      	orrs	r7, r2
    2494:	4653      	mov	r3, sl
    2496:	1bdf      	subs	r7, r3, r7
    2498:	1a61      	subs	r1, r4, r1
    249a:	45ba      	cmp	sl, r7
    249c:	41a4      	sbcs	r4, r4
    249e:	4264      	negs	r4, r4
    24a0:	1b0c      	subs	r4, r1, r4
    24a2:	0223      	lsls	r3, r4, #8
    24a4:	d400      	bmi.n	24a8 <__aeabi_dsub+0xb8>
    24a6:	e0c5      	b.n	2634 <__aeabi_dsub+0x244>
    24a8:	0264      	lsls	r4, r4, #9
    24aa:	0a65      	lsrs	r5, r4, #9
    24ac:	2d00      	cmp	r5, #0
    24ae:	d100      	bne.n	24b2 <__aeabi_dsub+0xc2>
    24b0:	e0f6      	b.n	26a0 <__aeabi_dsub+0x2b0>
    24b2:	0028      	movs	r0, r5
    24b4:	f000 fb5c 	bl	2b70 <__clzsi2>
    24b8:	0003      	movs	r3, r0
    24ba:	3b08      	subs	r3, #8
    24bc:	2b1f      	cmp	r3, #31
    24be:	dd00      	ble.n	24c2 <__aeabi_dsub+0xd2>
    24c0:	e0e9      	b.n	2696 <__aeabi_dsub+0x2a6>
    24c2:	2220      	movs	r2, #32
    24c4:	003c      	movs	r4, r7
    24c6:	1ad2      	subs	r2, r2, r3
    24c8:	409d      	lsls	r5, r3
    24ca:	40d4      	lsrs	r4, r2
    24cc:	409f      	lsls	r7, r3
    24ce:	4325      	orrs	r5, r4
    24d0:	429e      	cmp	r6, r3
    24d2:	dd00      	ble.n	24d6 <__aeabi_dsub+0xe6>
    24d4:	e0db      	b.n	268e <__aeabi_dsub+0x29e>
    24d6:	1b9e      	subs	r6, r3, r6
    24d8:	1c73      	adds	r3, r6, #1
    24da:	2b1f      	cmp	r3, #31
    24dc:	dd00      	ble.n	24e0 <__aeabi_dsub+0xf0>
    24de:	e10a      	b.n	26f6 <__aeabi_dsub+0x306>
    24e0:	2220      	movs	r2, #32
    24e2:	0038      	movs	r0, r7
    24e4:	1ad2      	subs	r2, r2, r3
    24e6:	0029      	movs	r1, r5
    24e8:	4097      	lsls	r7, r2
    24ea:	002c      	movs	r4, r5
    24ec:	4091      	lsls	r1, r2
    24ee:	40d8      	lsrs	r0, r3
    24f0:	1e7a      	subs	r2, r7, #1
    24f2:	4197      	sbcs	r7, r2
    24f4:	40dc      	lsrs	r4, r3
    24f6:	2600      	movs	r6, #0
    24f8:	4301      	orrs	r1, r0
    24fa:	430f      	orrs	r7, r1
    24fc:	077b      	lsls	r3, r7, #29
    24fe:	d009      	beq.n	2514 <__aeabi_dsub+0x124>
    2500:	230f      	movs	r3, #15
    2502:	403b      	ands	r3, r7
    2504:	2b04      	cmp	r3, #4
    2506:	d005      	beq.n	2514 <__aeabi_dsub+0x124>
    2508:	1d3b      	adds	r3, r7, #4
    250a:	42bb      	cmp	r3, r7
    250c:	41bf      	sbcs	r7, r7
    250e:	427f      	negs	r7, r7
    2510:	19e4      	adds	r4, r4, r7
    2512:	001f      	movs	r7, r3
    2514:	0223      	lsls	r3, r4, #8
    2516:	d525      	bpl.n	2564 <__aeabi_dsub+0x174>
    2518:	4b86      	ldr	r3, [pc, #536]	; (2734 <__aeabi_dsub+0x344>)
    251a:	3601      	adds	r6, #1
    251c:	429e      	cmp	r6, r3
    251e:	d100      	bne.n	2522 <__aeabi_dsub+0x132>
    2520:	e0af      	b.n	2682 <__aeabi_dsub+0x292>
    2522:	4b85      	ldr	r3, [pc, #532]	; (2738 <__aeabi_dsub+0x348>)
    2524:	2501      	movs	r5, #1
    2526:	401c      	ands	r4, r3
    2528:	4643      	mov	r3, r8
    252a:	0762      	lsls	r2, r4, #29
    252c:	08ff      	lsrs	r7, r7, #3
    252e:	0264      	lsls	r4, r4, #9
    2530:	0576      	lsls	r6, r6, #21
    2532:	4317      	orrs	r7, r2
    2534:	0b24      	lsrs	r4, r4, #12
    2536:	0d76      	lsrs	r6, r6, #21
    2538:	401d      	ands	r5, r3
    253a:	2100      	movs	r1, #0
    253c:	0324      	lsls	r4, r4, #12
    253e:	0b23      	lsrs	r3, r4, #12
    2540:	0d0c      	lsrs	r4, r1, #20
    2542:	4a7e      	ldr	r2, [pc, #504]	; (273c <__aeabi_dsub+0x34c>)
    2544:	0524      	lsls	r4, r4, #20
    2546:	431c      	orrs	r4, r3
    2548:	4014      	ands	r4, r2
    254a:	0533      	lsls	r3, r6, #20
    254c:	4323      	orrs	r3, r4
    254e:	005b      	lsls	r3, r3, #1
    2550:	07ed      	lsls	r5, r5, #31
    2552:	085b      	lsrs	r3, r3, #1
    2554:	432b      	orrs	r3, r5
    2556:	0038      	movs	r0, r7
    2558:	0019      	movs	r1, r3
    255a:	bc1c      	pop	{r2, r3, r4}
    255c:	4690      	mov	r8, r2
    255e:	4699      	mov	r9, r3
    2560:	46a2      	mov	sl, r4
    2562:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2564:	2501      	movs	r5, #1
    2566:	4643      	mov	r3, r8
    2568:	0762      	lsls	r2, r4, #29
    256a:	08ff      	lsrs	r7, r7, #3
    256c:	4317      	orrs	r7, r2
    256e:	08e4      	lsrs	r4, r4, #3
    2570:	401d      	ands	r5, r3
    2572:	4b70      	ldr	r3, [pc, #448]	; (2734 <__aeabi_dsub+0x344>)
    2574:	429e      	cmp	r6, r3
    2576:	d036      	beq.n	25e6 <__aeabi_dsub+0x1f6>
    2578:	0324      	lsls	r4, r4, #12
    257a:	0576      	lsls	r6, r6, #21
    257c:	0b24      	lsrs	r4, r4, #12
    257e:	0d76      	lsrs	r6, r6, #21
    2580:	e7db      	b.n	253a <__aeabi_dsub+0x14a>
    2582:	4663      	mov	r3, ip
    2584:	1af3      	subs	r3, r6, r3
    2586:	2b00      	cmp	r3, #0
    2588:	dc00      	bgt.n	258c <__aeabi_dsub+0x19c>
    258a:	e094      	b.n	26b6 <__aeabi_dsub+0x2c6>
    258c:	4660      	mov	r0, ip
    258e:	2800      	cmp	r0, #0
    2590:	d035      	beq.n	25fe <__aeabi_dsub+0x20e>
    2592:	4868      	ldr	r0, [pc, #416]	; (2734 <__aeabi_dsub+0x344>)
    2594:	4286      	cmp	r6, r0
    2596:	d0b1      	beq.n	24fc <__aeabi_dsub+0x10c>
    2598:	2780      	movs	r7, #128	; 0x80
    259a:	043f      	lsls	r7, r7, #16
    259c:	4339      	orrs	r1, r7
    259e:	2b38      	cmp	r3, #56	; 0x38
    25a0:	dc00      	bgt.n	25a4 <__aeabi_dsub+0x1b4>
    25a2:	e0fd      	b.n	27a0 <__aeabi_dsub+0x3b0>
    25a4:	430a      	orrs	r2, r1
    25a6:	0017      	movs	r7, r2
    25a8:	2100      	movs	r1, #0
    25aa:	1e7a      	subs	r2, r7, #1
    25ac:	4197      	sbcs	r7, r2
    25ae:	4457      	add	r7, sl
    25b0:	4557      	cmp	r7, sl
    25b2:	4180      	sbcs	r0, r0
    25b4:	1909      	adds	r1, r1, r4
    25b6:	4244      	negs	r4, r0
    25b8:	190c      	adds	r4, r1, r4
    25ba:	0223      	lsls	r3, r4, #8
    25bc:	d53a      	bpl.n	2634 <__aeabi_dsub+0x244>
    25be:	4b5d      	ldr	r3, [pc, #372]	; (2734 <__aeabi_dsub+0x344>)
    25c0:	3601      	adds	r6, #1
    25c2:	429e      	cmp	r6, r3
    25c4:	d100      	bne.n	25c8 <__aeabi_dsub+0x1d8>
    25c6:	e14b      	b.n	2860 <__aeabi_dsub+0x470>
    25c8:	2201      	movs	r2, #1
    25ca:	4b5b      	ldr	r3, [pc, #364]	; (2738 <__aeabi_dsub+0x348>)
    25cc:	401c      	ands	r4, r3
    25ce:	087b      	lsrs	r3, r7, #1
    25d0:	4017      	ands	r7, r2
    25d2:	431f      	orrs	r7, r3
    25d4:	07e2      	lsls	r2, r4, #31
    25d6:	4317      	orrs	r7, r2
    25d8:	0864      	lsrs	r4, r4, #1
    25da:	e78f      	b.n	24fc <__aeabi_dsub+0x10c>
    25dc:	0008      	movs	r0, r1
    25de:	4310      	orrs	r0, r2
    25e0:	d000      	beq.n	25e4 <__aeabi_dsub+0x1f4>
    25e2:	e724      	b.n	242e <__aeabi_dsub+0x3e>
    25e4:	e721      	b.n	242a <__aeabi_dsub+0x3a>
    25e6:	0023      	movs	r3, r4
    25e8:	433b      	orrs	r3, r7
    25ea:	d100      	bne.n	25ee <__aeabi_dsub+0x1fe>
    25ec:	e1b9      	b.n	2962 <__aeabi_dsub+0x572>
    25ee:	2280      	movs	r2, #128	; 0x80
    25f0:	0312      	lsls	r2, r2, #12
    25f2:	4314      	orrs	r4, r2
    25f4:	0324      	lsls	r4, r4, #12
    25f6:	0b24      	lsrs	r4, r4, #12
    25f8:	e79f      	b.n	253a <__aeabi_dsub+0x14a>
    25fa:	002e      	movs	r6, r5
    25fc:	e77e      	b.n	24fc <__aeabi_dsub+0x10c>
    25fe:	0008      	movs	r0, r1
    2600:	4310      	orrs	r0, r2
    2602:	d100      	bne.n	2606 <__aeabi_dsub+0x216>
    2604:	e0ca      	b.n	279c <__aeabi_dsub+0x3ac>
    2606:	1e58      	subs	r0, r3, #1
    2608:	4684      	mov	ip, r0
    260a:	2800      	cmp	r0, #0
    260c:	d000      	beq.n	2610 <__aeabi_dsub+0x220>
    260e:	e0e7      	b.n	27e0 <__aeabi_dsub+0x3f0>
    2610:	4452      	add	r2, sl
    2612:	4552      	cmp	r2, sl
    2614:	4180      	sbcs	r0, r0
    2616:	1864      	adds	r4, r4, r1
    2618:	4240      	negs	r0, r0
    261a:	1824      	adds	r4, r4, r0
    261c:	0017      	movs	r7, r2
    261e:	2601      	movs	r6, #1
    2620:	0223      	lsls	r3, r4, #8
    2622:	d507      	bpl.n	2634 <__aeabi_dsub+0x244>
    2624:	2602      	movs	r6, #2
    2626:	e7cf      	b.n	25c8 <__aeabi_dsub+0x1d8>
    2628:	4664      	mov	r4, ip
    262a:	432c      	orrs	r4, r5
    262c:	d100      	bne.n	2630 <__aeabi_dsub+0x240>
    262e:	e1b3      	b.n	2998 <__aeabi_dsub+0x5a8>
    2630:	002c      	movs	r4, r5
    2632:	4667      	mov	r7, ip
    2634:	077b      	lsls	r3, r7, #29
    2636:	d000      	beq.n	263a <__aeabi_dsub+0x24a>
    2638:	e762      	b.n	2500 <__aeabi_dsub+0x110>
    263a:	0763      	lsls	r3, r4, #29
    263c:	08ff      	lsrs	r7, r7, #3
    263e:	431f      	orrs	r7, r3
    2640:	2501      	movs	r5, #1
    2642:	4643      	mov	r3, r8
    2644:	08e4      	lsrs	r4, r4, #3
    2646:	401d      	ands	r5, r3
    2648:	e793      	b.n	2572 <__aeabi_dsub+0x182>
    264a:	2d00      	cmp	r5, #0
    264c:	d178      	bne.n	2740 <__aeabi_dsub+0x350>
    264e:	1c75      	adds	r5, r6, #1
    2650:	056d      	lsls	r5, r5, #21
    2652:	0d6d      	lsrs	r5, r5, #21
    2654:	2d01      	cmp	r5, #1
    2656:	dc00      	bgt.n	265a <__aeabi_dsub+0x26a>
    2658:	e0f2      	b.n	2840 <__aeabi_dsub+0x450>
    265a:	4650      	mov	r0, sl
    265c:	1a80      	subs	r0, r0, r2
    265e:	4582      	cmp	sl, r0
    2660:	41bf      	sbcs	r7, r7
    2662:	1a65      	subs	r5, r4, r1
    2664:	427f      	negs	r7, r7
    2666:	1bed      	subs	r5, r5, r7
    2668:	4684      	mov	ip, r0
    266a:	0228      	lsls	r0, r5, #8
    266c:	d400      	bmi.n	2670 <__aeabi_dsub+0x280>
    266e:	e08c      	b.n	278a <__aeabi_dsub+0x39a>
    2670:	4650      	mov	r0, sl
    2672:	1a17      	subs	r7, r2, r0
    2674:	42ba      	cmp	r2, r7
    2676:	4192      	sbcs	r2, r2
    2678:	1b0c      	subs	r4, r1, r4
    267a:	4255      	negs	r5, r2
    267c:	1b65      	subs	r5, r4, r5
    267e:	4698      	mov	r8, r3
    2680:	e714      	b.n	24ac <__aeabi_dsub+0xbc>
    2682:	2501      	movs	r5, #1
    2684:	4643      	mov	r3, r8
    2686:	2400      	movs	r4, #0
    2688:	401d      	ands	r5, r3
    268a:	2700      	movs	r7, #0
    268c:	e755      	b.n	253a <__aeabi_dsub+0x14a>
    268e:	4c2a      	ldr	r4, [pc, #168]	; (2738 <__aeabi_dsub+0x348>)
    2690:	1af6      	subs	r6, r6, r3
    2692:	402c      	ands	r4, r5
    2694:	e732      	b.n	24fc <__aeabi_dsub+0x10c>
    2696:	003d      	movs	r5, r7
    2698:	3828      	subs	r0, #40	; 0x28
    269a:	4085      	lsls	r5, r0
    269c:	2700      	movs	r7, #0
    269e:	e717      	b.n	24d0 <__aeabi_dsub+0xe0>
    26a0:	0038      	movs	r0, r7
    26a2:	f000 fa65 	bl	2b70 <__clzsi2>
    26a6:	3020      	adds	r0, #32
    26a8:	e706      	b.n	24b8 <__aeabi_dsub+0xc8>
    26aa:	430a      	orrs	r2, r1
    26ac:	0017      	movs	r7, r2
    26ae:	2100      	movs	r1, #0
    26b0:	1e7a      	subs	r2, r7, #1
    26b2:	4197      	sbcs	r7, r2
    26b4:	e6ee      	b.n	2494 <__aeabi_dsub+0xa4>
    26b6:	2b00      	cmp	r3, #0
    26b8:	d000      	beq.n	26bc <__aeabi_dsub+0x2cc>
    26ba:	e0e5      	b.n	2888 <__aeabi_dsub+0x498>
    26bc:	1c73      	adds	r3, r6, #1
    26be:	469c      	mov	ip, r3
    26c0:	055b      	lsls	r3, r3, #21
    26c2:	0d5b      	lsrs	r3, r3, #21
    26c4:	2b01      	cmp	r3, #1
    26c6:	dc00      	bgt.n	26ca <__aeabi_dsub+0x2da>
    26c8:	e09f      	b.n	280a <__aeabi_dsub+0x41a>
    26ca:	4b1a      	ldr	r3, [pc, #104]	; (2734 <__aeabi_dsub+0x344>)
    26cc:	459c      	cmp	ip, r3
    26ce:	d100      	bne.n	26d2 <__aeabi_dsub+0x2e2>
    26d0:	e0c5      	b.n	285e <__aeabi_dsub+0x46e>
    26d2:	4452      	add	r2, sl
    26d4:	4552      	cmp	r2, sl
    26d6:	4180      	sbcs	r0, r0
    26d8:	1864      	adds	r4, r4, r1
    26da:	4240      	negs	r0, r0
    26dc:	1824      	adds	r4, r4, r0
    26de:	07e7      	lsls	r7, r4, #31
    26e0:	0852      	lsrs	r2, r2, #1
    26e2:	4317      	orrs	r7, r2
    26e4:	0864      	lsrs	r4, r4, #1
    26e6:	4666      	mov	r6, ip
    26e8:	e708      	b.n	24fc <__aeabi_dsub+0x10c>
    26ea:	4812      	ldr	r0, [pc, #72]	; (2734 <__aeabi_dsub+0x344>)
    26ec:	4285      	cmp	r5, r0
    26ee:	d100      	bne.n	26f2 <__aeabi_dsub+0x302>
    26f0:	e085      	b.n	27fe <__aeabi_dsub+0x40e>
    26f2:	001d      	movs	r5, r3
    26f4:	e6bc      	b.n	2470 <__aeabi_dsub+0x80>
    26f6:	0029      	movs	r1, r5
    26f8:	3e1f      	subs	r6, #31
    26fa:	40f1      	lsrs	r1, r6
    26fc:	2b20      	cmp	r3, #32
    26fe:	d100      	bne.n	2702 <__aeabi_dsub+0x312>
    2700:	e07f      	b.n	2802 <__aeabi_dsub+0x412>
    2702:	2240      	movs	r2, #64	; 0x40
    2704:	1ad3      	subs	r3, r2, r3
    2706:	409d      	lsls	r5, r3
    2708:	432f      	orrs	r7, r5
    270a:	1e7d      	subs	r5, r7, #1
    270c:	41af      	sbcs	r7, r5
    270e:	2400      	movs	r4, #0
    2710:	430f      	orrs	r7, r1
    2712:	2600      	movs	r6, #0
    2714:	e78e      	b.n	2634 <__aeabi_dsub+0x244>
    2716:	002b      	movs	r3, r5
    2718:	000f      	movs	r7, r1
    271a:	3b20      	subs	r3, #32
    271c:	40df      	lsrs	r7, r3
    271e:	2d20      	cmp	r5, #32
    2720:	d071      	beq.n	2806 <__aeabi_dsub+0x416>
    2722:	2340      	movs	r3, #64	; 0x40
    2724:	1b5d      	subs	r5, r3, r5
    2726:	40a9      	lsls	r1, r5
    2728:	430a      	orrs	r2, r1
    272a:	1e51      	subs	r1, r2, #1
    272c:	418a      	sbcs	r2, r1
    272e:	2100      	movs	r1, #0
    2730:	4317      	orrs	r7, r2
    2732:	e6af      	b.n	2494 <__aeabi_dsub+0xa4>
    2734:	000007ff 	.word	0x000007ff
    2738:	ff7fffff 	.word	0xff7fffff
    273c:	800fffff 	.word	0x800fffff
    2740:	2e00      	cmp	r6, #0
    2742:	d03e      	beq.n	27c2 <__aeabi_dsub+0x3d2>
    2744:	4eb3      	ldr	r6, [pc, #716]	; (2a14 <__aeabi_dsub+0x624>)
    2746:	45b4      	cmp	ip, r6
    2748:	d045      	beq.n	27d6 <__aeabi_dsub+0x3e6>
    274a:	2680      	movs	r6, #128	; 0x80
    274c:	0436      	lsls	r6, r6, #16
    274e:	426d      	negs	r5, r5
    2750:	4334      	orrs	r4, r6
    2752:	2d38      	cmp	r5, #56	; 0x38
    2754:	dd00      	ble.n	2758 <__aeabi_dsub+0x368>
    2756:	e0a8      	b.n	28aa <__aeabi_dsub+0x4ba>
    2758:	2d1f      	cmp	r5, #31
    275a:	dd00      	ble.n	275e <__aeabi_dsub+0x36e>
    275c:	e11f      	b.n	299e <__aeabi_dsub+0x5ae>
    275e:	2620      	movs	r6, #32
    2760:	0027      	movs	r7, r4
    2762:	4650      	mov	r0, sl
    2764:	1b76      	subs	r6, r6, r5
    2766:	40b7      	lsls	r7, r6
    2768:	40e8      	lsrs	r0, r5
    276a:	4307      	orrs	r7, r0
    276c:	4650      	mov	r0, sl
    276e:	40b0      	lsls	r0, r6
    2770:	1e46      	subs	r6, r0, #1
    2772:	41b0      	sbcs	r0, r6
    2774:	40ec      	lsrs	r4, r5
    2776:	4338      	orrs	r0, r7
    2778:	1a17      	subs	r7, r2, r0
    277a:	42ba      	cmp	r2, r7
    277c:	4192      	sbcs	r2, r2
    277e:	1b0c      	subs	r4, r1, r4
    2780:	4252      	negs	r2, r2
    2782:	1aa4      	subs	r4, r4, r2
    2784:	4666      	mov	r6, ip
    2786:	4698      	mov	r8, r3
    2788:	e68b      	b.n	24a2 <__aeabi_dsub+0xb2>
    278a:	4664      	mov	r4, ip
    278c:	4667      	mov	r7, ip
    278e:	432c      	orrs	r4, r5
    2790:	d000      	beq.n	2794 <__aeabi_dsub+0x3a4>
    2792:	e68b      	b.n	24ac <__aeabi_dsub+0xbc>
    2794:	2500      	movs	r5, #0
    2796:	2600      	movs	r6, #0
    2798:	2700      	movs	r7, #0
    279a:	e6ea      	b.n	2572 <__aeabi_dsub+0x182>
    279c:	001e      	movs	r6, r3
    279e:	e6ad      	b.n	24fc <__aeabi_dsub+0x10c>
    27a0:	2b1f      	cmp	r3, #31
    27a2:	dc60      	bgt.n	2866 <__aeabi_dsub+0x476>
    27a4:	2720      	movs	r7, #32
    27a6:	1af8      	subs	r0, r7, r3
    27a8:	000f      	movs	r7, r1
    27aa:	4684      	mov	ip, r0
    27ac:	4087      	lsls	r7, r0
    27ae:	0010      	movs	r0, r2
    27b0:	40d8      	lsrs	r0, r3
    27b2:	4307      	orrs	r7, r0
    27b4:	4660      	mov	r0, ip
    27b6:	4082      	lsls	r2, r0
    27b8:	1e50      	subs	r0, r2, #1
    27ba:	4182      	sbcs	r2, r0
    27bc:	40d9      	lsrs	r1, r3
    27be:	4317      	orrs	r7, r2
    27c0:	e6f5      	b.n	25ae <__aeabi_dsub+0x1be>
    27c2:	0026      	movs	r6, r4
    27c4:	4650      	mov	r0, sl
    27c6:	4306      	orrs	r6, r0
    27c8:	d005      	beq.n	27d6 <__aeabi_dsub+0x3e6>
    27ca:	43ed      	mvns	r5, r5
    27cc:	2d00      	cmp	r5, #0
    27ce:	d0d3      	beq.n	2778 <__aeabi_dsub+0x388>
    27d0:	4e90      	ldr	r6, [pc, #576]	; (2a14 <__aeabi_dsub+0x624>)
    27d2:	45b4      	cmp	ip, r6
    27d4:	d1bd      	bne.n	2752 <__aeabi_dsub+0x362>
    27d6:	000c      	movs	r4, r1
    27d8:	0017      	movs	r7, r2
    27da:	4666      	mov	r6, ip
    27dc:	4698      	mov	r8, r3
    27de:	e68d      	b.n	24fc <__aeabi_dsub+0x10c>
    27e0:	488c      	ldr	r0, [pc, #560]	; (2a14 <__aeabi_dsub+0x624>)
    27e2:	4283      	cmp	r3, r0
    27e4:	d00b      	beq.n	27fe <__aeabi_dsub+0x40e>
    27e6:	4663      	mov	r3, ip
    27e8:	e6d9      	b.n	259e <__aeabi_dsub+0x1ae>
    27ea:	2d00      	cmp	r5, #0
    27ec:	d000      	beq.n	27f0 <__aeabi_dsub+0x400>
    27ee:	e096      	b.n	291e <__aeabi_dsub+0x52e>
    27f0:	0008      	movs	r0, r1
    27f2:	4310      	orrs	r0, r2
    27f4:	d100      	bne.n	27f8 <__aeabi_dsub+0x408>
    27f6:	e0e2      	b.n	29be <__aeabi_dsub+0x5ce>
    27f8:	000c      	movs	r4, r1
    27fa:	0017      	movs	r7, r2
    27fc:	4698      	mov	r8, r3
    27fe:	4e85      	ldr	r6, [pc, #532]	; (2a14 <__aeabi_dsub+0x624>)
    2800:	e67c      	b.n	24fc <__aeabi_dsub+0x10c>
    2802:	2500      	movs	r5, #0
    2804:	e780      	b.n	2708 <__aeabi_dsub+0x318>
    2806:	2100      	movs	r1, #0
    2808:	e78e      	b.n	2728 <__aeabi_dsub+0x338>
    280a:	0023      	movs	r3, r4
    280c:	4650      	mov	r0, sl
    280e:	4303      	orrs	r3, r0
    2810:	2e00      	cmp	r6, #0
    2812:	d000      	beq.n	2816 <__aeabi_dsub+0x426>
    2814:	e0a8      	b.n	2968 <__aeabi_dsub+0x578>
    2816:	2b00      	cmp	r3, #0
    2818:	d100      	bne.n	281c <__aeabi_dsub+0x42c>
    281a:	e0de      	b.n	29da <__aeabi_dsub+0x5ea>
    281c:	000b      	movs	r3, r1
    281e:	4313      	orrs	r3, r2
    2820:	d100      	bne.n	2824 <__aeabi_dsub+0x434>
    2822:	e66b      	b.n	24fc <__aeabi_dsub+0x10c>
    2824:	4452      	add	r2, sl
    2826:	4552      	cmp	r2, sl
    2828:	4180      	sbcs	r0, r0
    282a:	1864      	adds	r4, r4, r1
    282c:	4240      	negs	r0, r0
    282e:	1824      	adds	r4, r4, r0
    2830:	0017      	movs	r7, r2
    2832:	0223      	lsls	r3, r4, #8
    2834:	d400      	bmi.n	2838 <__aeabi_dsub+0x448>
    2836:	e6fd      	b.n	2634 <__aeabi_dsub+0x244>
    2838:	4b77      	ldr	r3, [pc, #476]	; (2a18 <__aeabi_dsub+0x628>)
    283a:	4666      	mov	r6, ip
    283c:	401c      	ands	r4, r3
    283e:	e65d      	b.n	24fc <__aeabi_dsub+0x10c>
    2840:	0025      	movs	r5, r4
    2842:	4650      	mov	r0, sl
    2844:	4305      	orrs	r5, r0
    2846:	2e00      	cmp	r6, #0
    2848:	d1cf      	bne.n	27ea <__aeabi_dsub+0x3fa>
    284a:	2d00      	cmp	r5, #0
    284c:	d14f      	bne.n	28ee <__aeabi_dsub+0x4fe>
    284e:	000c      	movs	r4, r1
    2850:	4314      	orrs	r4, r2
    2852:	d100      	bne.n	2856 <__aeabi_dsub+0x466>
    2854:	e0a0      	b.n	2998 <__aeabi_dsub+0x5a8>
    2856:	000c      	movs	r4, r1
    2858:	0017      	movs	r7, r2
    285a:	4698      	mov	r8, r3
    285c:	e64e      	b.n	24fc <__aeabi_dsub+0x10c>
    285e:	4666      	mov	r6, ip
    2860:	2400      	movs	r4, #0
    2862:	2700      	movs	r7, #0
    2864:	e685      	b.n	2572 <__aeabi_dsub+0x182>
    2866:	001f      	movs	r7, r3
    2868:	0008      	movs	r0, r1
    286a:	3f20      	subs	r7, #32
    286c:	40f8      	lsrs	r0, r7
    286e:	0007      	movs	r7, r0
    2870:	2b20      	cmp	r3, #32
    2872:	d100      	bne.n	2876 <__aeabi_dsub+0x486>
    2874:	e08e      	b.n	2994 <__aeabi_dsub+0x5a4>
    2876:	2040      	movs	r0, #64	; 0x40
    2878:	1ac3      	subs	r3, r0, r3
    287a:	4099      	lsls	r1, r3
    287c:	430a      	orrs	r2, r1
    287e:	1e51      	subs	r1, r2, #1
    2880:	418a      	sbcs	r2, r1
    2882:	2100      	movs	r1, #0
    2884:	4317      	orrs	r7, r2
    2886:	e692      	b.n	25ae <__aeabi_dsub+0x1be>
    2888:	2e00      	cmp	r6, #0
    288a:	d114      	bne.n	28b6 <__aeabi_dsub+0x4c6>
    288c:	0026      	movs	r6, r4
    288e:	4650      	mov	r0, sl
    2890:	4306      	orrs	r6, r0
    2892:	d062      	beq.n	295a <__aeabi_dsub+0x56a>
    2894:	43db      	mvns	r3, r3
    2896:	2b00      	cmp	r3, #0
    2898:	d15c      	bne.n	2954 <__aeabi_dsub+0x564>
    289a:	1887      	adds	r7, r0, r2
    289c:	4297      	cmp	r7, r2
    289e:	4192      	sbcs	r2, r2
    28a0:	1864      	adds	r4, r4, r1
    28a2:	4252      	negs	r2, r2
    28a4:	18a4      	adds	r4, r4, r2
    28a6:	4666      	mov	r6, ip
    28a8:	e687      	b.n	25ba <__aeabi_dsub+0x1ca>
    28aa:	4650      	mov	r0, sl
    28ac:	4320      	orrs	r0, r4
    28ae:	1e44      	subs	r4, r0, #1
    28b0:	41a0      	sbcs	r0, r4
    28b2:	2400      	movs	r4, #0
    28b4:	e760      	b.n	2778 <__aeabi_dsub+0x388>
    28b6:	4e57      	ldr	r6, [pc, #348]	; (2a14 <__aeabi_dsub+0x624>)
    28b8:	45b4      	cmp	ip, r6
    28ba:	d04e      	beq.n	295a <__aeabi_dsub+0x56a>
    28bc:	2680      	movs	r6, #128	; 0x80
    28be:	0436      	lsls	r6, r6, #16
    28c0:	425b      	negs	r3, r3
    28c2:	4334      	orrs	r4, r6
    28c4:	2b38      	cmp	r3, #56	; 0x38
    28c6:	dd00      	ble.n	28ca <__aeabi_dsub+0x4da>
    28c8:	e07f      	b.n	29ca <__aeabi_dsub+0x5da>
    28ca:	2b1f      	cmp	r3, #31
    28cc:	dd00      	ble.n	28d0 <__aeabi_dsub+0x4e0>
    28ce:	e08b      	b.n	29e8 <__aeabi_dsub+0x5f8>
    28d0:	2620      	movs	r6, #32
    28d2:	0027      	movs	r7, r4
    28d4:	4650      	mov	r0, sl
    28d6:	1af6      	subs	r6, r6, r3
    28d8:	40b7      	lsls	r7, r6
    28da:	40d8      	lsrs	r0, r3
    28dc:	4307      	orrs	r7, r0
    28de:	4650      	mov	r0, sl
    28e0:	40b0      	lsls	r0, r6
    28e2:	1e46      	subs	r6, r0, #1
    28e4:	41b0      	sbcs	r0, r6
    28e6:	4307      	orrs	r7, r0
    28e8:	40dc      	lsrs	r4, r3
    28ea:	18bf      	adds	r7, r7, r2
    28ec:	e7d6      	b.n	289c <__aeabi_dsub+0x4ac>
    28ee:	000d      	movs	r5, r1
    28f0:	4315      	orrs	r5, r2
    28f2:	d100      	bne.n	28f6 <__aeabi_dsub+0x506>
    28f4:	e602      	b.n	24fc <__aeabi_dsub+0x10c>
    28f6:	4650      	mov	r0, sl
    28f8:	1a80      	subs	r0, r0, r2
    28fa:	4582      	cmp	sl, r0
    28fc:	41bf      	sbcs	r7, r7
    28fe:	1a65      	subs	r5, r4, r1
    2900:	427f      	negs	r7, r7
    2902:	1bed      	subs	r5, r5, r7
    2904:	4684      	mov	ip, r0
    2906:	0228      	lsls	r0, r5, #8
    2908:	d400      	bmi.n	290c <__aeabi_dsub+0x51c>
    290a:	e68d      	b.n	2628 <__aeabi_dsub+0x238>
    290c:	4650      	mov	r0, sl
    290e:	1a17      	subs	r7, r2, r0
    2910:	42ba      	cmp	r2, r7
    2912:	4192      	sbcs	r2, r2
    2914:	1b0c      	subs	r4, r1, r4
    2916:	4252      	negs	r2, r2
    2918:	1aa4      	subs	r4, r4, r2
    291a:	4698      	mov	r8, r3
    291c:	e5ee      	b.n	24fc <__aeabi_dsub+0x10c>
    291e:	000d      	movs	r5, r1
    2920:	4315      	orrs	r5, r2
    2922:	d100      	bne.n	2926 <__aeabi_dsub+0x536>
    2924:	e76b      	b.n	27fe <__aeabi_dsub+0x40e>
    2926:	4650      	mov	r0, sl
    2928:	0767      	lsls	r7, r4, #29
    292a:	08c0      	lsrs	r0, r0, #3
    292c:	4307      	orrs	r7, r0
    292e:	2080      	movs	r0, #128	; 0x80
    2930:	08e4      	lsrs	r4, r4, #3
    2932:	0300      	lsls	r0, r0, #12
    2934:	4204      	tst	r4, r0
    2936:	d007      	beq.n	2948 <__aeabi_dsub+0x558>
    2938:	08cd      	lsrs	r5, r1, #3
    293a:	4205      	tst	r5, r0
    293c:	d104      	bne.n	2948 <__aeabi_dsub+0x558>
    293e:	002c      	movs	r4, r5
    2940:	4698      	mov	r8, r3
    2942:	08d7      	lsrs	r7, r2, #3
    2944:	0749      	lsls	r1, r1, #29
    2946:	430f      	orrs	r7, r1
    2948:	0f7b      	lsrs	r3, r7, #29
    294a:	00e4      	lsls	r4, r4, #3
    294c:	431c      	orrs	r4, r3
    294e:	00ff      	lsls	r7, r7, #3
    2950:	4e30      	ldr	r6, [pc, #192]	; (2a14 <__aeabi_dsub+0x624>)
    2952:	e5d3      	b.n	24fc <__aeabi_dsub+0x10c>
    2954:	4e2f      	ldr	r6, [pc, #188]	; (2a14 <__aeabi_dsub+0x624>)
    2956:	45b4      	cmp	ip, r6
    2958:	d1b4      	bne.n	28c4 <__aeabi_dsub+0x4d4>
    295a:	000c      	movs	r4, r1
    295c:	0017      	movs	r7, r2
    295e:	4666      	mov	r6, ip
    2960:	e5cc      	b.n	24fc <__aeabi_dsub+0x10c>
    2962:	2700      	movs	r7, #0
    2964:	2400      	movs	r4, #0
    2966:	e5e8      	b.n	253a <__aeabi_dsub+0x14a>
    2968:	2b00      	cmp	r3, #0
    296a:	d039      	beq.n	29e0 <__aeabi_dsub+0x5f0>
    296c:	000b      	movs	r3, r1
    296e:	4313      	orrs	r3, r2
    2970:	d100      	bne.n	2974 <__aeabi_dsub+0x584>
    2972:	e744      	b.n	27fe <__aeabi_dsub+0x40e>
    2974:	08c0      	lsrs	r0, r0, #3
    2976:	0767      	lsls	r7, r4, #29
    2978:	4307      	orrs	r7, r0
    297a:	2080      	movs	r0, #128	; 0x80
    297c:	08e4      	lsrs	r4, r4, #3
    297e:	0300      	lsls	r0, r0, #12
    2980:	4204      	tst	r4, r0
    2982:	d0e1      	beq.n	2948 <__aeabi_dsub+0x558>
    2984:	08cb      	lsrs	r3, r1, #3
    2986:	4203      	tst	r3, r0
    2988:	d1de      	bne.n	2948 <__aeabi_dsub+0x558>
    298a:	08d7      	lsrs	r7, r2, #3
    298c:	0749      	lsls	r1, r1, #29
    298e:	430f      	orrs	r7, r1
    2990:	001c      	movs	r4, r3
    2992:	e7d9      	b.n	2948 <__aeabi_dsub+0x558>
    2994:	2100      	movs	r1, #0
    2996:	e771      	b.n	287c <__aeabi_dsub+0x48c>
    2998:	2500      	movs	r5, #0
    299a:	2700      	movs	r7, #0
    299c:	e5e9      	b.n	2572 <__aeabi_dsub+0x182>
    299e:	002e      	movs	r6, r5
    29a0:	0027      	movs	r7, r4
    29a2:	3e20      	subs	r6, #32
    29a4:	40f7      	lsrs	r7, r6
    29a6:	2d20      	cmp	r5, #32
    29a8:	d02f      	beq.n	2a0a <__aeabi_dsub+0x61a>
    29aa:	2640      	movs	r6, #64	; 0x40
    29ac:	1b75      	subs	r5, r6, r5
    29ae:	40ac      	lsls	r4, r5
    29b0:	4650      	mov	r0, sl
    29b2:	4320      	orrs	r0, r4
    29b4:	1e44      	subs	r4, r0, #1
    29b6:	41a0      	sbcs	r0, r4
    29b8:	2400      	movs	r4, #0
    29ba:	4338      	orrs	r0, r7
    29bc:	e6dc      	b.n	2778 <__aeabi_dsub+0x388>
    29be:	2480      	movs	r4, #128	; 0x80
    29c0:	2500      	movs	r5, #0
    29c2:	0324      	lsls	r4, r4, #12
    29c4:	4e13      	ldr	r6, [pc, #76]	; (2a14 <__aeabi_dsub+0x624>)
    29c6:	2700      	movs	r7, #0
    29c8:	e5d3      	b.n	2572 <__aeabi_dsub+0x182>
    29ca:	4650      	mov	r0, sl
    29cc:	4320      	orrs	r0, r4
    29ce:	0007      	movs	r7, r0
    29d0:	1e78      	subs	r0, r7, #1
    29d2:	4187      	sbcs	r7, r0
    29d4:	2400      	movs	r4, #0
    29d6:	18bf      	adds	r7, r7, r2
    29d8:	e760      	b.n	289c <__aeabi_dsub+0x4ac>
    29da:	000c      	movs	r4, r1
    29dc:	0017      	movs	r7, r2
    29de:	e58d      	b.n	24fc <__aeabi_dsub+0x10c>
    29e0:	000c      	movs	r4, r1
    29e2:	0017      	movs	r7, r2
    29e4:	4e0b      	ldr	r6, [pc, #44]	; (2a14 <__aeabi_dsub+0x624>)
    29e6:	e589      	b.n	24fc <__aeabi_dsub+0x10c>
    29e8:	001e      	movs	r6, r3
    29ea:	0027      	movs	r7, r4
    29ec:	3e20      	subs	r6, #32
    29ee:	40f7      	lsrs	r7, r6
    29f0:	2b20      	cmp	r3, #32
    29f2:	d00c      	beq.n	2a0e <__aeabi_dsub+0x61e>
    29f4:	2640      	movs	r6, #64	; 0x40
    29f6:	1af3      	subs	r3, r6, r3
    29f8:	409c      	lsls	r4, r3
    29fa:	4650      	mov	r0, sl
    29fc:	4320      	orrs	r0, r4
    29fe:	1e44      	subs	r4, r0, #1
    2a00:	41a0      	sbcs	r0, r4
    2a02:	4307      	orrs	r7, r0
    2a04:	2400      	movs	r4, #0
    2a06:	18bf      	adds	r7, r7, r2
    2a08:	e748      	b.n	289c <__aeabi_dsub+0x4ac>
    2a0a:	2400      	movs	r4, #0
    2a0c:	e7d0      	b.n	29b0 <__aeabi_dsub+0x5c0>
    2a0e:	2400      	movs	r4, #0
    2a10:	e7f3      	b.n	29fa <__aeabi_dsub+0x60a>
    2a12:	46c0      	nop			; (mov r8, r8)
    2a14:	000007ff 	.word	0x000007ff
    2a18:	ff7fffff 	.word	0xff7fffff

00002a1c <__aeabi_d2iz>:
    2a1c:	b530      	push	{r4, r5, lr}
    2a1e:	4d13      	ldr	r5, [pc, #76]	; (2a6c <__aeabi_d2iz+0x50>)
    2a20:	030a      	lsls	r2, r1, #12
    2a22:	004b      	lsls	r3, r1, #1
    2a24:	0b12      	lsrs	r2, r2, #12
    2a26:	0d5b      	lsrs	r3, r3, #21
    2a28:	0fc9      	lsrs	r1, r1, #31
    2a2a:	2400      	movs	r4, #0
    2a2c:	42ab      	cmp	r3, r5
    2a2e:	dd10      	ble.n	2a52 <__aeabi_d2iz+0x36>
    2a30:	4c0f      	ldr	r4, [pc, #60]	; (2a70 <__aeabi_d2iz+0x54>)
    2a32:	42a3      	cmp	r3, r4
    2a34:	dc0f      	bgt.n	2a56 <__aeabi_d2iz+0x3a>
    2a36:	2480      	movs	r4, #128	; 0x80
    2a38:	4d0e      	ldr	r5, [pc, #56]	; (2a74 <__aeabi_d2iz+0x58>)
    2a3a:	0364      	lsls	r4, r4, #13
    2a3c:	4322      	orrs	r2, r4
    2a3e:	1aed      	subs	r5, r5, r3
    2a40:	2d1f      	cmp	r5, #31
    2a42:	dd0b      	ble.n	2a5c <__aeabi_d2iz+0x40>
    2a44:	480c      	ldr	r0, [pc, #48]	; (2a78 <__aeabi_d2iz+0x5c>)
    2a46:	1ac3      	subs	r3, r0, r3
    2a48:	40da      	lsrs	r2, r3
    2a4a:	4254      	negs	r4, r2
    2a4c:	2900      	cmp	r1, #0
    2a4e:	d100      	bne.n	2a52 <__aeabi_d2iz+0x36>
    2a50:	0014      	movs	r4, r2
    2a52:	0020      	movs	r0, r4
    2a54:	bd30      	pop	{r4, r5, pc}
    2a56:	4b09      	ldr	r3, [pc, #36]	; (2a7c <__aeabi_d2iz+0x60>)
    2a58:	18cc      	adds	r4, r1, r3
    2a5a:	e7fa      	b.n	2a52 <__aeabi_d2iz+0x36>
    2a5c:	4c08      	ldr	r4, [pc, #32]	; (2a80 <__aeabi_d2iz+0x64>)
    2a5e:	40e8      	lsrs	r0, r5
    2a60:	46a4      	mov	ip, r4
    2a62:	4463      	add	r3, ip
    2a64:	409a      	lsls	r2, r3
    2a66:	4302      	orrs	r2, r0
    2a68:	e7ef      	b.n	2a4a <__aeabi_d2iz+0x2e>
    2a6a:	46c0      	nop			; (mov r8, r8)
    2a6c:	000003fe 	.word	0x000003fe
    2a70:	0000041d 	.word	0x0000041d
    2a74:	00000433 	.word	0x00000433
    2a78:	00000413 	.word	0x00000413
    2a7c:	7fffffff 	.word	0x7fffffff
    2a80:	fffffbed 	.word	0xfffffbed

00002a84 <__aeabi_ui2d>:
    2a84:	b510      	push	{r4, lr}
    2a86:	1e04      	subs	r4, r0, #0
    2a88:	d028      	beq.n	2adc <__aeabi_ui2d+0x58>
    2a8a:	f000 f871 	bl	2b70 <__clzsi2>
    2a8e:	4b15      	ldr	r3, [pc, #84]	; (2ae4 <__aeabi_ui2d+0x60>)
    2a90:	4a15      	ldr	r2, [pc, #84]	; (2ae8 <__aeabi_ui2d+0x64>)
    2a92:	1a1b      	subs	r3, r3, r0
    2a94:	1ad2      	subs	r2, r2, r3
    2a96:	2a1f      	cmp	r2, #31
    2a98:	dd15      	ble.n	2ac6 <__aeabi_ui2d+0x42>
    2a9a:	4a14      	ldr	r2, [pc, #80]	; (2aec <__aeabi_ui2d+0x68>)
    2a9c:	1ad2      	subs	r2, r2, r3
    2a9e:	4094      	lsls	r4, r2
    2aa0:	2200      	movs	r2, #0
    2aa2:	0324      	lsls	r4, r4, #12
    2aa4:	055b      	lsls	r3, r3, #21
    2aa6:	0b24      	lsrs	r4, r4, #12
    2aa8:	0d5b      	lsrs	r3, r3, #21
    2aaa:	2100      	movs	r1, #0
    2aac:	0010      	movs	r0, r2
    2aae:	0324      	lsls	r4, r4, #12
    2ab0:	0d0a      	lsrs	r2, r1, #20
    2ab2:	0b24      	lsrs	r4, r4, #12
    2ab4:	0512      	lsls	r2, r2, #20
    2ab6:	4322      	orrs	r2, r4
    2ab8:	4c0d      	ldr	r4, [pc, #52]	; (2af0 <__aeabi_ui2d+0x6c>)
    2aba:	051b      	lsls	r3, r3, #20
    2abc:	4022      	ands	r2, r4
    2abe:	4313      	orrs	r3, r2
    2ac0:	005b      	lsls	r3, r3, #1
    2ac2:	0859      	lsrs	r1, r3, #1
    2ac4:	bd10      	pop	{r4, pc}
    2ac6:	0021      	movs	r1, r4
    2ac8:	4091      	lsls	r1, r2
    2aca:	000a      	movs	r2, r1
    2acc:	210b      	movs	r1, #11
    2ace:	1a08      	subs	r0, r1, r0
    2ad0:	40c4      	lsrs	r4, r0
    2ad2:	055b      	lsls	r3, r3, #21
    2ad4:	0324      	lsls	r4, r4, #12
    2ad6:	0b24      	lsrs	r4, r4, #12
    2ad8:	0d5b      	lsrs	r3, r3, #21
    2ada:	e7e6      	b.n	2aaa <__aeabi_ui2d+0x26>
    2adc:	2300      	movs	r3, #0
    2ade:	2400      	movs	r4, #0
    2ae0:	2200      	movs	r2, #0
    2ae2:	e7e2      	b.n	2aaa <__aeabi_ui2d+0x26>
    2ae4:	0000041e 	.word	0x0000041e
    2ae8:	00000433 	.word	0x00000433
    2aec:	00000413 	.word	0x00000413
    2af0:	800fffff 	.word	0x800fffff

00002af4 <__aeabi_cdrcmple>:
    2af4:	4684      	mov	ip, r0
    2af6:	1c10      	adds	r0, r2, #0
    2af8:	4662      	mov	r2, ip
    2afa:	468c      	mov	ip, r1
    2afc:	1c19      	adds	r1, r3, #0
    2afe:	4663      	mov	r3, ip
    2b00:	e000      	b.n	2b04 <__aeabi_cdcmpeq>
    2b02:	46c0      	nop			; (mov r8, r8)

00002b04 <__aeabi_cdcmpeq>:
    2b04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    2b06:	f000 f8ef 	bl	2ce8 <__ledf2>
    2b0a:	2800      	cmp	r0, #0
    2b0c:	d401      	bmi.n	2b12 <__aeabi_cdcmpeq+0xe>
    2b0e:	2100      	movs	r1, #0
    2b10:	42c8      	cmn	r0, r1
    2b12:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00002b14 <__aeabi_dcmpeq>:
    2b14:	b510      	push	{r4, lr}
    2b16:	f000 f849 	bl	2bac <__eqdf2>
    2b1a:	4240      	negs	r0, r0
    2b1c:	3001      	adds	r0, #1
    2b1e:	bd10      	pop	{r4, pc}

00002b20 <__aeabi_dcmplt>:
    2b20:	b510      	push	{r4, lr}
    2b22:	f000 f8e1 	bl	2ce8 <__ledf2>
    2b26:	2800      	cmp	r0, #0
    2b28:	db01      	blt.n	2b2e <__aeabi_dcmplt+0xe>
    2b2a:	2000      	movs	r0, #0
    2b2c:	bd10      	pop	{r4, pc}
    2b2e:	2001      	movs	r0, #1
    2b30:	bd10      	pop	{r4, pc}
    2b32:	46c0      	nop			; (mov r8, r8)

00002b34 <__aeabi_dcmple>:
    2b34:	b510      	push	{r4, lr}
    2b36:	f000 f8d7 	bl	2ce8 <__ledf2>
    2b3a:	2800      	cmp	r0, #0
    2b3c:	dd01      	ble.n	2b42 <__aeabi_dcmple+0xe>
    2b3e:	2000      	movs	r0, #0
    2b40:	bd10      	pop	{r4, pc}
    2b42:	2001      	movs	r0, #1
    2b44:	bd10      	pop	{r4, pc}
    2b46:	46c0      	nop			; (mov r8, r8)

00002b48 <__aeabi_dcmpgt>:
    2b48:	b510      	push	{r4, lr}
    2b4a:	f000 f869 	bl	2c20 <__gedf2>
    2b4e:	2800      	cmp	r0, #0
    2b50:	dc01      	bgt.n	2b56 <__aeabi_dcmpgt+0xe>
    2b52:	2000      	movs	r0, #0
    2b54:	bd10      	pop	{r4, pc}
    2b56:	2001      	movs	r0, #1
    2b58:	bd10      	pop	{r4, pc}
    2b5a:	46c0      	nop			; (mov r8, r8)

00002b5c <__aeabi_dcmpge>:
    2b5c:	b510      	push	{r4, lr}
    2b5e:	f000 f85f 	bl	2c20 <__gedf2>
    2b62:	2800      	cmp	r0, #0
    2b64:	da01      	bge.n	2b6a <__aeabi_dcmpge+0xe>
    2b66:	2000      	movs	r0, #0
    2b68:	bd10      	pop	{r4, pc}
    2b6a:	2001      	movs	r0, #1
    2b6c:	bd10      	pop	{r4, pc}
    2b6e:	46c0      	nop			; (mov r8, r8)

00002b70 <__clzsi2>:
    2b70:	211c      	movs	r1, #28
    2b72:	2301      	movs	r3, #1
    2b74:	041b      	lsls	r3, r3, #16
    2b76:	4298      	cmp	r0, r3
    2b78:	d301      	bcc.n	2b7e <__clzsi2+0xe>
    2b7a:	0c00      	lsrs	r0, r0, #16
    2b7c:	3910      	subs	r1, #16
    2b7e:	0a1b      	lsrs	r3, r3, #8
    2b80:	4298      	cmp	r0, r3
    2b82:	d301      	bcc.n	2b88 <__clzsi2+0x18>
    2b84:	0a00      	lsrs	r0, r0, #8
    2b86:	3908      	subs	r1, #8
    2b88:	091b      	lsrs	r3, r3, #4
    2b8a:	4298      	cmp	r0, r3
    2b8c:	d301      	bcc.n	2b92 <__clzsi2+0x22>
    2b8e:	0900      	lsrs	r0, r0, #4
    2b90:	3904      	subs	r1, #4
    2b92:	a202      	add	r2, pc, #8	; (adr r2, 2b9c <__clzsi2+0x2c>)
    2b94:	5c10      	ldrb	r0, [r2, r0]
    2b96:	1840      	adds	r0, r0, r1
    2b98:	4770      	bx	lr
    2b9a:	46c0      	nop			; (mov r8, r8)
    2b9c:	02020304 	.word	0x02020304
    2ba0:	01010101 	.word	0x01010101
	...

00002bac <__eqdf2>:
    2bac:	b5f0      	push	{r4, r5, r6, r7, lr}
    2bae:	464f      	mov	r7, r9
    2bb0:	4646      	mov	r6, r8
    2bb2:	46d6      	mov	lr, sl
    2bb4:	005c      	lsls	r4, r3, #1
    2bb6:	b5c0      	push	{r6, r7, lr}
    2bb8:	031f      	lsls	r7, r3, #12
    2bba:	0fdb      	lsrs	r3, r3, #31
    2bbc:	469a      	mov	sl, r3
    2bbe:	4b17      	ldr	r3, [pc, #92]	; (2c1c <__eqdf2+0x70>)
    2bc0:	030e      	lsls	r6, r1, #12
    2bc2:	004d      	lsls	r5, r1, #1
    2bc4:	4684      	mov	ip, r0
    2bc6:	4680      	mov	r8, r0
    2bc8:	0b36      	lsrs	r6, r6, #12
    2bca:	0d6d      	lsrs	r5, r5, #21
    2bcc:	0fc9      	lsrs	r1, r1, #31
    2bce:	4691      	mov	r9, r2
    2bd0:	0b3f      	lsrs	r7, r7, #12
    2bd2:	0d64      	lsrs	r4, r4, #21
    2bd4:	2001      	movs	r0, #1
    2bd6:	429d      	cmp	r5, r3
    2bd8:	d008      	beq.n	2bec <__eqdf2+0x40>
    2bda:	429c      	cmp	r4, r3
    2bdc:	d001      	beq.n	2be2 <__eqdf2+0x36>
    2bde:	42a5      	cmp	r5, r4
    2be0:	d00b      	beq.n	2bfa <__eqdf2+0x4e>
    2be2:	bc1c      	pop	{r2, r3, r4}
    2be4:	4690      	mov	r8, r2
    2be6:	4699      	mov	r9, r3
    2be8:	46a2      	mov	sl, r4
    2bea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2bec:	4663      	mov	r3, ip
    2bee:	4333      	orrs	r3, r6
    2bf0:	d1f7      	bne.n	2be2 <__eqdf2+0x36>
    2bf2:	42ac      	cmp	r4, r5
    2bf4:	d1f5      	bne.n	2be2 <__eqdf2+0x36>
    2bf6:	433a      	orrs	r2, r7
    2bf8:	d1f3      	bne.n	2be2 <__eqdf2+0x36>
    2bfa:	2001      	movs	r0, #1
    2bfc:	42be      	cmp	r6, r7
    2bfe:	d1f0      	bne.n	2be2 <__eqdf2+0x36>
    2c00:	45c8      	cmp	r8, r9
    2c02:	d1ee      	bne.n	2be2 <__eqdf2+0x36>
    2c04:	4551      	cmp	r1, sl
    2c06:	d007      	beq.n	2c18 <__eqdf2+0x6c>
    2c08:	2d00      	cmp	r5, #0
    2c0a:	d1ea      	bne.n	2be2 <__eqdf2+0x36>
    2c0c:	4663      	mov	r3, ip
    2c0e:	431e      	orrs	r6, r3
    2c10:	0030      	movs	r0, r6
    2c12:	1e46      	subs	r6, r0, #1
    2c14:	41b0      	sbcs	r0, r6
    2c16:	e7e4      	b.n	2be2 <__eqdf2+0x36>
    2c18:	2000      	movs	r0, #0
    2c1a:	e7e2      	b.n	2be2 <__eqdf2+0x36>
    2c1c:	000007ff 	.word	0x000007ff

00002c20 <__gedf2>:
    2c20:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c22:	4645      	mov	r5, r8
    2c24:	46de      	mov	lr, fp
    2c26:	4657      	mov	r7, sl
    2c28:	464e      	mov	r6, r9
    2c2a:	b5e0      	push	{r5, r6, r7, lr}
    2c2c:	031f      	lsls	r7, r3, #12
    2c2e:	0b3d      	lsrs	r5, r7, #12
    2c30:	4f2c      	ldr	r7, [pc, #176]	; (2ce4 <__gedf2+0xc4>)
    2c32:	030e      	lsls	r6, r1, #12
    2c34:	004c      	lsls	r4, r1, #1
    2c36:	46ab      	mov	fp, r5
    2c38:	005d      	lsls	r5, r3, #1
    2c3a:	4684      	mov	ip, r0
    2c3c:	0b36      	lsrs	r6, r6, #12
    2c3e:	0d64      	lsrs	r4, r4, #21
    2c40:	0fc9      	lsrs	r1, r1, #31
    2c42:	4690      	mov	r8, r2
    2c44:	0d6d      	lsrs	r5, r5, #21
    2c46:	0fdb      	lsrs	r3, r3, #31
    2c48:	42bc      	cmp	r4, r7
    2c4a:	d02a      	beq.n	2ca2 <__gedf2+0x82>
    2c4c:	4f25      	ldr	r7, [pc, #148]	; (2ce4 <__gedf2+0xc4>)
    2c4e:	42bd      	cmp	r5, r7
    2c50:	d02d      	beq.n	2cae <__gedf2+0x8e>
    2c52:	2c00      	cmp	r4, #0
    2c54:	d10f      	bne.n	2c76 <__gedf2+0x56>
    2c56:	4330      	orrs	r0, r6
    2c58:	0007      	movs	r7, r0
    2c5a:	4681      	mov	r9, r0
    2c5c:	4278      	negs	r0, r7
    2c5e:	4178      	adcs	r0, r7
    2c60:	b2c0      	uxtb	r0, r0
    2c62:	2d00      	cmp	r5, #0
    2c64:	d117      	bne.n	2c96 <__gedf2+0x76>
    2c66:	465f      	mov	r7, fp
    2c68:	433a      	orrs	r2, r7
    2c6a:	d114      	bne.n	2c96 <__gedf2+0x76>
    2c6c:	464b      	mov	r3, r9
    2c6e:	2000      	movs	r0, #0
    2c70:	2b00      	cmp	r3, #0
    2c72:	d00a      	beq.n	2c8a <__gedf2+0x6a>
    2c74:	e006      	b.n	2c84 <__gedf2+0x64>
    2c76:	2d00      	cmp	r5, #0
    2c78:	d102      	bne.n	2c80 <__gedf2+0x60>
    2c7a:	4658      	mov	r0, fp
    2c7c:	4302      	orrs	r2, r0
    2c7e:	d001      	beq.n	2c84 <__gedf2+0x64>
    2c80:	4299      	cmp	r1, r3
    2c82:	d018      	beq.n	2cb6 <__gedf2+0x96>
    2c84:	4248      	negs	r0, r1
    2c86:	2101      	movs	r1, #1
    2c88:	4308      	orrs	r0, r1
    2c8a:	bc3c      	pop	{r2, r3, r4, r5}
    2c8c:	4690      	mov	r8, r2
    2c8e:	4699      	mov	r9, r3
    2c90:	46a2      	mov	sl, r4
    2c92:	46ab      	mov	fp, r5
    2c94:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2c96:	2800      	cmp	r0, #0
    2c98:	d0f2      	beq.n	2c80 <__gedf2+0x60>
    2c9a:	2001      	movs	r0, #1
    2c9c:	3b01      	subs	r3, #1
    2c9e:	4318      	orrs	r0, r3
    2ca0:	e7f3      	b.n	2c8a <__gedf2+0x6a>
    2ca2:	0037      	movs	r7, r6
    2ca4:	4307      	orrs	r7, r0
    2ca6:	d0d1      	beq.n	2c4c <__gedf2+0x2c>
    2ca8:	2002      	movs	r0, #2
    2caa:	4240      	negs	r0, r0
    2cac:	e7ed      	b.n	2c8a <__gedf2+0x6a>
    2cae:	465f      	mov	r7, fp
    2cb0:	4317      	orrs	r7, r2
    2cb2:	d0ce      	beq.n	2c52 <__gedf2+0x32>
    2cb4:	e7f8      	b.n	2ca8 <__gedf2+0x88>
    2cb6:	42ac      	cmp	r4, r5
    2cb8:	dce4      	bgt.n	2c84 <__gedf2+0x64>
    2cba:	da03      	bge.n	2cc4 <__gedf2+0xa4>
    2cbc:	1e48      	subs	r0, r1, #1
    2cbe:	2101      	movs	r1, #1
    2cc0:	4308      	orrs	r0, r1
    2cc2:	e7e2      	b.n	2c8a <__gedf2+0x6a>
    2cc4:	455e      	cmp	r6, fp
    2cc6:	d8dd      	bhi.n	2c84 <__gedf2+0x64>
    2cc8:	d006      	beq.n	2cd8 <__gedf2+0xb8>
    2cca:	2000      	movs	r0, #0
    2ccc:	455e      	cmp	r6, fp
    2cce:	d2dc      	bcs.n	2c8a <__gedf2+0x6a>
    2cd0:	2301      	movs	r3, #1
    2cd2:	1e48      	subs	r0, r1, #1
    2cd4:	4318      	orrs	r0, r3
    2cd6:	e7d8      	b.n	2c8a <__gedf2+0x6a>
    2cd8:	45c4      	cmp	ip, r8
    2cda:	d8d3      	bhi.n	2c84 <__gedf2+0x64>
    2cdc:	2000      	movs	r0, #0
    2cde:	45c4      	cmp	ip, r8
    2ce0:	d3f6      	bcc.n	2cd0 <__gedf2+0xb0>
    2ce2:	e7d2      	b.n	2c8a <__gedf2+0x6a>
    2ce4:	000007ff 	.word	0x000007ff

00002ce8 <__ledf2>:
    2ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2cea:	464e      	mov	r6, r9
    2cec:	4645      	mov	r5, r8
    2cee:	46de      	mov	lr, fp
    2cf0:	4657      	mov	r7, sl
    2cf2:	005c      	lsls	r4, r3, #1
    2cf4:	b5e0      	push	{r5, r6, r7, lr}
    2cf6:	031f      	lsls	r7, r3, #12
    2cf8:	0fdb      	lsrs	r3, r3, #31
    2cfa:	4699      	mov	r9, r3
    2cfc:	4b2a      	ldr	r3, [pc, #168]	; (2da8 <__ledf2+0xc0>)
    2cfe:	030e      	lsls	r6, r1, #12
    2d00:	004d      	lsls	r5, r1, #1
    2d02:	0fc9      	lsrs	r1, r1, #31
    2d04:	4684      	mov	ip, r0
    2d06:	0b36      	lsrs	r6, r6, #12
    2d08:	0d6d      	lsrs	r5, r5, #21
    2d0a:	468b      	mov	fp, r1
    2d0c:	4690      	mov	r8, r2
    2d0e:	0b3f      	lsrs	r7, r7, #12
    2d10:	0d64      	lsrs	r4, r4, #21
    2d12:	429d      	cmp	r5, r3
    2d14:	d020      	beq.n	2d58 <__ledf2+0x70>
    2d16:	4b24      	ldr	r3, [pc, #144]	; (2da8 <__ledf2+0xc0>)
    2d18:	429c      	cmp	r4, r3
    2d1a:	d022      	beq.n	2d62 <__ledf2+0x7a>
    2d1c:	2d00      	cmp	r5, #0
    2d1e:	d112      	bne.n	2d46 <__ledf2+0x5e>
    2d20:	4330      	orrs	r0, r6
    2d22:	4243      	negs	r3, r0
    2d24:	4143      	adcs	r3, r0
    2d26:	b2db      	uxtb	r3, r3
    2d28:	2c00      	cmp	r4, #0
    2d2a:	d01f      	beq.n	2d6c <__ledf2+0x84>
    2d2c:	2b00      	cmp	r3, #0
    2d2e:	d00c      	beq.n	2d4a <__ledf2+0x62>
    2d30:	464b      	mov	r3, r9
    2d32:	2001      	movs	r0, #1
    2d34:	3b01      	subs	r3, #1
    2d36:	4303      	orrs	r3, r0
    2d38:	0018      	movs	r0, r3
    2d3a:	bc3c      	pop	{r2, r3, r4, r5}
    2d3c:	4690      	mov	r8, r2
    2d3e:	4699      	mov	r9, r3
    2d40:	46a2      	mov	sl, r4
    2d42:	46ab      	mov	fp, r5
    2d44:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2d46:	2c00      	cmp	r4, #0
    2d48:	d016      	beq.n	2d78 <__ledf2+0x90>
    2d4a:	45cb      	cmp	fp, r9
    2d4c:	d017      	beq.n	2d7e <__ledf2+0x96>
    2d4e:	465b      	mov	r3, fp
    2d50:	4259      	negs	r1, r3
    2d52:	2301      	movs	r3, #1
    2d54:	430b      	orrs	r3, r1
    2d56:	e7ef      	b.n	2d38 <__ledf2+0x50>
    2d58:	0031      	movs	r1, r6
    2d5a:	2302      	movs	r3, #2
    2d5c:	4301      	orrs	r1, r0
    2d5e:	d1eb      	bne.n	2d38 <__ledf2+0x50>
    2d60:	e7d9      	b.n	2d16 <__ledf2+0x2e>
    2d62:	0039      	movs	r1, r7
    2d64:	2302      	movs	r3, #2
    2d66:	4311      	orrs	r1, r2
    2d68:	d1e6      	bne.n	2d38 <__ledf2+0x50>
    2d6a:	e7d7      	b.n	2d1c <__ledf2+0x34>
    2d6c:	433a      	orrs	r2, r7
    2d6e:	d1dd      	bne.n	2d2c <__ledf2+0x44>
    2d70:	2300      	movs	r3, #0
    2d72:	2800      	cmp	r0, #0
    2d74:	d0e0      	beq.n	2d38 <__ledf2+0x50>
    2d76:	e7ea      	b.n	2d4e <__ledf2+0x66>
    2d78:	433a      	orrs	r2, r7
    2d7a:	d1e6      	bne.n	2d4a <__ledf2+0x62>
    2d7c:	e7e7      	b.n	2d4e <__ledf2+0x66>
    2d7e:	42a5      	cmp	r5, r4
    2d80:	dce5      	bgt.n	2d4e <__ledf2+0x66>
    2d82:	db05      	blt.n	2d90 <__ledf2+0xa8>
    2d84:	42be      	cmp	r6, r7
    2d86:	d8e2      	bhi.n	2d4e <__ledf2+0x66>
    2d88:	d007      	beq.n	2d9a <__ledf2+0xb2>
    2d8a:	2300      	movs	r3, #0
    2d8c:	42be      	cmp	r6, r7
    2d8e:	d2d3      	bcs.n	2d38 <__ledf2+0x50>
    2d90:	4659      	mov	r1, fp
    2d92:	2301      	movs	r3, #1
    2d94:	3901      	subs	r1, #1
    2d96:	430b      	orrs	r3, r1
    2d98:	e7ce      	b.n	2d38 <__ledf2+0x50>
    2d9a:	45c4      	cmp	ip, r8
    2d9c:	d8d7      	bhi.n	2d4e <__ledf2+0x66>
    2d9e:	2300      	movs	r3, #0
    2da0:	45c4      	cmp	ip, r8
    2da2:	d3f5      	bcc.n	2d90 <__ledf2+0xa8>
    2da4:	e7c8      	b.n	2d38 <__ledf2+0x50>
    2da6:	46c0      	nop			; (mov r8, r8)
    2da8:	000007ff 	.word	0x000007ff

00002dac <__libc_init_array>:
    2dac:	b570      	push	{r4, r5, r6, lr}
    2dae:	2600      	movs	r6, #0
    2db0:	4d0c      	ldr	r5, [pc, #48]	; (2de4 <__libc_init_array+0x38>)
    2db2:	4c0d      	ldr	r4, [pc, #52]	; (2de8 <__libc_init_array+0x3c>)
    2db4:	1b64      	subs	r4, r4, r5
    2db6:	10a4      	asrs	r4, r4, #2
    2db8:	42a6      	cmp	r6, r4
    2dba:	d109      	bne.n	2dd0 <__libc_init_array+0x24>
    2dbc:	2600      	movs	r6, #0
    2dbe:	f001 f9df 	bl	4180 <_init>
    2dc2:	4d0a      	ldr	r5, [pc, #40]	; (2dec <__libc_init_array+0x40>)
    2dc4:	4c0a      	ldr	r4, [pc, #40]	; (2df0 <__libc_init_array+0x44>)
    2dc6:	1b64      	subs	r4, r4, r5
    2dc8:	10a4      	asrs	r4, r4, #2
    2dca:	42a6      	cmp	r6, r4
    2dcc:	d105      	bne.n	2dda <__libc_init_array+0x2e>
    2dce:	bd70      	pop	{r4, r5, r6, pc}
    2dd0:	00b3      	lsls	r3, r6, #2
    2dd2:	58eb      	ldr	r3, [r5, r3]
    2dd4:	4798      	blx	r3
    2dd6:	3601      	adds	r6, #1
    2dd8:	e7ee      	b.n	2db8 <__libc_init_array+0xc>
    2dda:	00b3      	lsls	r3, r6, #2
    2ddc:	58eb      	ldr	r3, [r5, r3]
    2dde:	4798      	blx	r3
    2de0:	3601      	adds	r6, #1
    2de2:	e7f2      	b.n	2dca <__libc_init_array+0x1e>
    2de4:	0000418c 	.word	0x0000418c
    2de8:	0000418c 	.word	0x0000418c
    2dec:	0000418c 	.word	0x0000418c
    2df0:	00004190 	.word	0x00004190

00002df4 <memset>:
    2df4:	0003      	movs	r3, r0
    2df6:	1882      	adds	r2, r0, r2
    2df8:	4293      	cmp	r3, r2
    2dfa:	d100      	bne.n	2dfe <memset+0xa>
    2dfc:	4770      	bx	lr
    2dfe:	7019      	strb	r1, [r3, #0]
    2e00:	3301      	adds	r3, #1
    2e02:	e7f9      	b.n	2df8 <memset+0x4>

00002e04 <__sfputc_r>:
    2e04:	6893      	ldr	r3, [r2, #8]
    2e06:	b510      	push	{r4, lr}
    2e08:	3b01      	subs	r3, #1
    2e0a:	6093      	str	r3, [r2, #8]
    2e0c:	2b00      	cmp	r3, #0
    2e0e:	da05      	bge.n	2e1c <__sfputc_r+0x18>
    2e10:	6994      	ldr	r4, [r2, #24]
    2e12:	42a3      	cmp	r3, r4
    2e14:	db08      	blt.n	2e28 <__sfputc_r+0x24>
    2e16:	b2cb      	uxtb	r3, r1
    2e18:	2b0a      	cmp	r3, #10
    2e1a:	d005      	beq.n	2e28 <__sfputc_r+0x24>
    2e1c:	6813      	ldr	r3, [r2, #0]
    2e1e:	1c58      	adds	r0, r3, #1
    2e20:	6010      	str	r0, [r2, #0]
    2e22:	7019      	strb	r1, [r3, #0]
    2e24:	b2c8      	uxtb	r0, r1
    2e26:	bd10      	pop	{r4, pc}
    2e28:	f000 fbf2 	bl	3610 <__swbuf_r>
    2e2c:	e7fb      	b.n	2e26 <__sfputc_r+0x22>

00002e2e <__sfputs_r>:
    2e2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2e30:	0006      	movs	r6, r0
    2e32:	000f      	movs	r7, r1
    2e34:	0014      	movs	r4, r2
    2e36:	18d5      	adds	r5, r2, r3
    2e38:	42ac      	cmp	r4, r5
    2e3a:	d101      	bne.n	2e40 <__sfputs_r+0x12>
    2e3c:	2000      	movs	r0, #0
    2e3e:	e007      	b.n	2e50 <__sfputs_r+0x22>
    2e40:	7821      	ldrb	r1, [r4, #0]
    2e42:	003a      	movs	r2, r7
    2e44:	0030      	movs	r0, r6
    2e46:	f7ff ffdd 	bl	2e04 <__sfputc_r>
    2e4a:	3401      	adds	r4, #1
    2e4c:	1c43      	adds	r3, r0, #1
    2e4e:	d1f3      	bne.n	2e38 <__sfputs_r+0xa>
    2e50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00002e54 <_vfiprintf_r>:
    2e54:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e56:	b09f      	sub	sp, #124	; 0x7c
    2e58:	0006      	movs	r6, r0
    2e5a:	000f      	movs	r7, r1
    2e5c:	0014      	movs	r4, r2
    2e5e:	9305      	str	r3, [sp, #20]
    2e60:	2800      	cmp	r0, #0
    2e62:	d004      	beq.n	2e6e <_vfiprintf_r+0x1a>
    2e64:	6983      	ldr	r3, [r0, #24]
    2e66:	2b00      	cmp	r3, #0
    2e68:	d101      	bne.n	2e6e <_vfiprintf_r+0x1a>
    2e6a:	f000 fd95 	bl	3998 <__sinit>
    2e6e:	4b7f      	ldr	r3, [pc, #508]	; (306c <_vfiprintf_r+0x218>)
    2e70:	429f      	cmp	r7, r3
    2e72:	d15c      	bne.n	2f2e <_vfiprintf_r+0xda>
    2e74:	6877      	ldr	r7, [r6, #4]
    2e76:	89bb      	ldrh	r3, [r7, #12]
    2e78:	071b      	lsls	r3, r3, #28
    2e7a:	d562      	bpl.n	2f42 <_vfiprintf_r+0xee>
    2e7c:	693b      	ldr	r3, [r7, #16]
    2e7e:	2b00      	cmp	r3, #0
    2e80:	d05f      	beq.n	2f42 <_vfiprintf_r+0xee>
    2e82:	2300      	movs	r3, #0
    2e84:	ad06      	add	r5, sp, #24
    2e86:	616b      	str	r3, [r5, #20]
    2e88:	3320      	adds	r3, #32
    2e8a:	766b      	strb	r3, [r5, #25]
    2e8c:	3310      	adds	r3, #16
    2e8e:	76ab      	strb	r3, [r5, #26]
    2e90:	9402      	str	r4, [sp, #8]
    2e92:	9c02      	ldr	r4, [sp, #8]
    2e94:	7823      	ldrb	r3, [r4, #0]
    2e96:	2b00      	cmp	r3, #0
    2e98:	d15d      	bne.n	2f56 <_vfiprintf_r+0x102>
    2e9a:	9b02      	ldr	r3, [sp, #8]
    2e9c:	1ae3      	subs	r3, r4, r3
    2e9e:	9304      	str	r3, [sp, #16]
    2ea0:	d00d      	beq.n	2ebe <_vfiprintf_r+0x6a>
    2ea2:	9b04      	ldr	r3, [sp, #16]
    2ea4:	9a02      	ldr	r2, [sp, #8]
    2ea6:	0039      	movs	r1, r7
    2ea8:	0030      	movs	r0, r6
    2eaa:	f7ff ffc0 	bl	2e2e <__sfputs_r>
    2eae:	1c43      	adds	r3, r0, #1
    2eb0:	d100      	bne.n	2eb4 <_vfiprintf_r+0x60>
    2eb2:	e0cc      	b.n	304e <_vfiprintf_r+0x1fa>
    2eb4:	696a      	ldr	r2, [r5, #20]
    2eb6:	9b04      	ldr	r3, [sp, #16]
    2eb8:	4694      	mov	ip, r2
    2eba:	4463      	add	r3, ip
    2ebc:	616b      	str	r3, [r5, #20]
    2ebe:	7823      	ldrb	r3, [r4, #0]
    2ec0:	2b00      	cmp	r3, #0
    2ec2:	d100      	bne.n	2ec6 <_vfiprintf_r+0x72>
    2ec4:	e0c3      	b.n	304e <_vfiprintf_r+0x1fa>
    2ec6:	2201      	movs	r2, #1
    2ec8:	2300      	movs	r3, #0
    2eca:	4252      	negs	r2, r2
    2ecc:	606a      	str	r2, [r5, #4]
    2ece:	a902      	add	r1, sp, #8
    2ed0:	3254      	adds	r2, #84	; 0x54
    2ed2:	1852      	adds	r2, r2, r1
    2ed4:	3401      	adds	r4, #1
    2ed6:	602b      	str	r3, [r5, #0]
    2ed8:	60eb      	str	r3, [r5, #12]
    2eda:	60ab      	str	r3, [r5, #8]
    2edc:	7013      	strb	r3, [r2, #0]
    2ede:	65ab      	str	r3, [r5, #88]	; 0x58
    2ee0:	7821      	ldrb	r1, [r4, #0]
    2ee2:	2205      	movs	r2, #5
    2ee4:	4862      	ldr	r0, [pc, #392]	; (3070 <_vfiprintf_r+0x21c>)
    2ee6:	f000 fe63 	bl	3bb0 <memchr>
    2eea:	1c63      	adds	r3, r4, #1
    2eec:	469c      	mov	ip, r3
    2eee:	2800      	cmp	r0, #0
    2ef0:	d135      	bne.n	2f5e <_vfiprintf_r+0x10a>
    2ef2:	6829      	ldr	r1, [r5, #0]
    2ef4:	06cb      	lsls	r3, r1, #27
    2ef6:	d504      	bpl.n	2f02 <_vfiprintf_r+0xae>
    2ef8:	2353      	movs	r3, #83	; 0x53
    2efa:	aa02      	add	r2, sp, #8
    2efc:	3020      	adds	r0, #32
    2efe:	189b      	adds	r3, r3, r2
    2f00:	7018      	strb	r0, [r3, #0]
    2f02:	070b      	lsls	r3, r1, #28
    2f04:	d504      	bpl.n	2f10 <_vfiprintf_r+0xbc>
    2f06:	2353      	movs	r3, #83	; 0x53
    2f08:	202b      	movs	r0, #43	; 0x2b
    2f0a:	aa02      	add	r2, sp, #8
    2f0c:	189b      	adds	r3, r3, r2
    2f0e:	7018      	strb	r0, [r3, #0]
    2f10:	7823      	ldrb	r3, [r4, #0]
    2f12:	2b2a      	cmp	r3, #42	; 0x2a
    2f14:	d02c      	beq.n	2f70 <_vfiprintf_r+0x11c>
    2f16:	2000      	movs	r0, #0
    2f18:	210a      	movs	r1, #10
    2f1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2f1c:	7822      	ldrb	r2, [r4, #0]
    2f1e:	3a30      	subs	r2, #48	; 0x30
    2f20:	2a09      	cmp	r2, #9
    2f22:	d800      	bhi.n	2f26 <_vfiprintf_r+0xd2>
    2f24:	e06b      	b.n	2ffe <_vfiprintf_r+0x1aa>
    2f26:	2800      	cmp	r0, #0
    2f28:	d02a      	beq.n	2f80 <_vfiprintf_r+0x12c>
    2f2a:	9309      	str	r3, [sp, #36]	; 0x24
    2f2c:	e028      	b.n	2f80 <_vfiprintf_r+0x12c>
    2f2e:	4b51      	ldr	r3, [pc, #324]	; (3074 <_vfiprintf_r+0x220>)
    2f30:	429f      	cmp	r7, r3
    2f32:	d101      	bne.n	2f38 <_vfiprintf_r+0xe4>
    2f34:	68b7      	ldr	r7, [r6, #8]
    2f36:	e79e      	b.n	2e76 <_vfiprintf_r+0x22>
    2f38:	4b4f      	ldr	r3, [pc, #316]	; (3078 <_vfiprintf_r+0x224>)
    2f3a:	429f      	cmp	r7, r3
    2f3c:	d19b      	bne.n	2e76 <_vfiprintf_r+0x22>
    2f3e:	68f7      	ldr	r7, [r6, #12]
    2f40:	e799      	b.n	2e76 <_vfiprintf_r+0x22>
    2f42:	0039      	movs	r1, r7
    2f44:	0030      	movs	r0, r6
    2f46:	f000 fbb9 	bl	36bc <__swsetup_r>
    2f4a:	2800      	cmp	r0, #0
    2f4c:	d099      	beq.n	2e82 <_vfiprintf_r+0x2e>
    2f4e:	2001      	movs	r0, #1
    2f50:	4240      	negs	r0, r0
    2f52:	b01f      	add	sp, #124	; 0x7c
    2f54:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2f56:	2b25      	cmp	r3, #37	; 0x25
    2f58:	d09f      	beq.n	2e9a <_vfiprintf_r+0x46>
    2f5a:	3401      	adds	r4, #1
    2f5c:	e79a      	b.n	2e94 <_vfiprintf_r+0x40>
    2f5e:	4b44      	ldr	r3, [pc, #272]	; (3070 <_vfiprintf_r+0x21c>)
    2f60:	6829      	ldr	r1, [r5, #0]
    2f62:	1ac0      	subs	r0, r0, r3
    2f64:	2301      	movs	r3, #1
    2f66:	4083      	lsls	r3, r0
    2f68:	430b      	orrs	r3, r1
    2f6a:	602b      	str	r3, [r5, #0]
    2f6c:	4664      	mov	r4, ip
    2f6e:	e7b7      	b.n	2ee0 <_vfiprintf_r+0x8c>
    2f70:	9b05      	ldr	r3, [sp, #20]
    2f72:	1d18      	adds	r0, r3, #4
    2f74:	681b      	ldr	r3, [r3, #0]
    2f76:	9005      	str	r0, [sp, #20]
    2f78:	2b00      	cmp	r3, #0
    2f7a:	db3a      	blt.n	2ff2 <_vfiprintf_r+0x19e>
    2f7c:	9309      	str	r3, [sp, #36]	; 0x24
    2f7e:	4664      	mov	r4, ip
    2f80:	7823      	ldrb	r3, [r4, #0]
    2f82:	2b2e      	cmp	r3, #46	; 0x2e
    2f84:	d10b      	bne.n	2f9e <_vfiprintf_r+0x14a>
    2f86:	7863      	ldrb	r3, [r4, #1]
    2f88:	1c62      	adds	r2, r4, #1
    2f8a:	2b2a      	cmp	r3, #42	; 0x2a
    2f8c:	d13f      	bne.n	300e <_vfiprintf_r+0x1ba>
    2f8e:	9b05      	ldr	r3, [sp, #20]
    2f90:	3402      	adds	r4, #2
    2f92:	1d1a      	adds	r2, r3, #4
    2f94:	681b      	ldr	r3, [r3, #0]
    2f96:	9205      	str	r2, [sp, #20]
    2f98:	2b00      	cmp	r3, #0
    2f9a:	db35      	blt.n	3008 <_vfiprintf_r+0x1b4>
    2f9c:	9307      	str	r3, [sp, #28]
    2f9e:	7821      	ldrb	r1, [r4, #0]
    2fa0:	2203      	movs	r2, #3
    2fa2:	4836      	ldr	r0, [pc, #216]	; (307c <_vfiprintf_r+0x228>)
    2fa4:	f000 fe04 	bl	3bb0 <memchr>
    2fa8:	2800      	cmp	r0, #0
    2faa:	d007      	beq.n	2fbc <_vfiprintf_r+0x168>
    2fac:	4b33      	ldr	r3, [pc, #204]	; (307c <_vfiprintf_r+0x228>)
    2fae:	682a      	ldr	r2, [r5, #0]
    2fb0:	1ac0      	subs	r0, r0, r3
    2fb2:	2340      	movs	r3, #64	; 0x40
    2fb4:	4083      	lsls	r3, r0
    2fb6:	4313      	orrs	r3, r2
    2fb8:	602b      	str	r3, [r5, #0]
    2fba:	3401      	adds	r4, #1
    2fbc:	7821      	ldrb	r1, [r4, #0]
    2fbe:	1c63      	adds	r3, r4, #1
    2fc0:	2206      	movs	r2, #6
    2fc2:	482f      	ldr	r0, [pc, #188]	; (3080 <_vfiprintf_r+0x22c>)
    2fc4:	9302      	str	r3, [sp, #8]
    2fc6:	7629      	strb	r1, [r5, #24]
    2fc8:	f000 fdf2 	bl	3bb0 <memchr>
    2fcc:	2800      	cmp	r0, #0
    2fce:	d044      	beq.n	305a <_vfiprintf_r+0x206>
    2fd0:	4b2c      	ldr	r3, [pc, #176]	; (3084 <_vfiprintf_r+0x230>)
    2fd2:	2b00      	cmp	r3, #0
    2fd4:	d12f      	bne.n	3036 <_vfiprintf_r+0x1e2>
    2fd6:	6829      	ldr	r1, [r5, #0]
    2fd8:	9b05      	ldr	r3, [sp, #20]
    2fda:	2207      	movs	r2, #7
    2fdc:	05c9      	lsls	r1, r1, #23
    2fde:	d528      	bpl.n	3032 <_vfiprintf_r+0x1de>
    2fe0:	189b      	adds	r3, r3, r2
    2fe2:	4393      	bics	r3, r2
    2fe4:	3308      	adds	r3, #8
    2fe6:	9305      	str	r3, [sp, #20]
    2fe8:	696b      	ldr	r3, [r5, #20]
    2fea:	9a03      	ldr	r2, [sp, #12]
    2fec:	189b      	adds	r3, r3, r2
    2fee:	616b      	str	r3, [r5, #20]
    2ff0:	e74f      	b.n	2e92 <_vfiprintf_r+0x3e>
    2ff2:	425b      	negs	r3, r3
    2ff4:	60eb      	str	r3, [r5, #12]
    2ff6:	2302      	movs	r3, #2
    2ff8:	430b      	orrs	r3, r1
    2ffa:	602b      	str	r3, [r5, #0]
    2ffc:	e7bf      	b.n	2f7e <_vfiprintf_r+0x12a>
    2ffe:	434b      	muls	r3, r1
    3000:	3401      	adds	r4, #1
    3002:	189b      	adds	r3, r3, r2
    3004:	2001      	movs	r0, #1
    3006:	e789      	b.n	2f1c <_vfiprintf_r+0xc8>
    3008:	2301      	movs	r3, #1
    300a:	425b      	negs	r3, r3
    300c:	e7c6      	b.n	2f9c <_vfiprintf_r+0x148>
    300e:	2300      	movs	r3, #0
    3010:	0014      	movs	r4, r2
    3012:	200a      	movs	r0, #10
    3014:	001a      	movs	r2, r3
    3016:	606b      	str	r3, [r5, #4]
    3018:	7821      	ldrb	r1, [r4, #0]
    301a:	3930      	subs	r1, #48	; 0x30
    301c:	2909      	cmp	r1, #9
    301e:	d903      	bls.n	3028 <_vfiprintf_r+0x1d4>
    3020:	2b00      	cmp	r3, #0
    3022:	d0bc      	beq.n	2f9e <_vfiprintf_r+0x14a>
    3024:	9207      	str	r2, [sp, #28]
    3026:	e7ba      	b.n	2f9e <_vfiprintf_r+0x14a>
    3028:	4342      	muls	r2, r0
    302a:	3401      	adds	r4, #1
    302c:	1852      	adds	r2, r2, r1
    302e:	2301      	movs	r3, #1
    3030:	e7f2      	b.n	3018 <_vfiprintf_r+0x1c4>
    3032:	3307      	adds	r3, #7
    3034:	e7d5      	b.n	2fe2 <_vfiprintf_r+0x18e>
    3036:	ab05      	add	r3, sp, #20
    3038:	9300      	str	r3, [sp, #0]
    303a:	003a      	movs	r2, r7
    303c:	4b12      	ldr	r3, [pc, #72]	; (3088 <_vfiprintf_r+0x234>)
    303e:	0029      	movs	r1, r5
    3040:	0030      	movs	r0, r6
    3042:	e000      	b.n	3046 <_vfiprintf_r+0x1f2>
    3044:	bf00      	nop
    3046:	9003      	str	r0, [sp, #12]
    3048:	9b03      	ldr	r3, [sp, #12]
    304a:	3301      	adds	r3, #1
    304c:	d1cc      	bne.n	2fe8 <_vfiprintf_r+0x194>
    304e:	89bb      	ldrh	r3, [r7, #12]
    3050:	065b      	lsls	r3, r3, #25
    3052:	d500      	bpl.n	3056 <_vfiprintf_r+0x202>
    3054:	e77b      	b.n	2f4e <_vfiprintf_r+0xfa>
    3056:	980b      	ldr	r0, [sp, #44]	; 0x2c
    3058:	e77b      	b.n	2f52 <_vfiprintf_r+0xfe>
    305a:	ab05      	add	r3, sp, #20
    305c:	9300      	str	r3, [sp, #0]
    305e:	003a      	movs	r2, r7
    3060:	4b09      	ldr	r3, [pc, #36]	; (3088 <_vfiprintf_r+0x234>)
    3062:	0029      	movs	r1, r5
    3064:	0030      	movs	r0, r6
    3066:	f000 f87f 	bl	3168 <_printf_i>
    306a:	e7ec      	b.n	3046 <_vfiprintf_r+0x1f2>
    306c:	00004140 	.word	0x00004140
    3070:	000040ec 	.word	0x000040ec
    3074:	00004160 	.word	0x00004160
    3078:	00004120 	.word	0x00004120
    307c:	000040f2 	.word	0x000040f2
    3080:	000040f6 	.word	0x000040f6
    3084:	00000000 	.word	0x00000000
    3088:	00002e2f 	.word	0x00002e2f

0000308c <_printf_common>:
    308c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    308e:	0015      	movs	r5, r2
    3090:	9301      	str	r3, [sp, #4]
    3092:	688a      	ldr	r2, [r1, #8]
    3094:	690b      	ldr	r3, [r1, #16]
    3096:	9000      	str	r0, [sp, #0]
    3098:	000c      	movs	r4, r1
    309a:	4293      	cmp	r3, r2
    309c:	da00      	bge.n	30a0 <_printf_common+0x14>
    309e:	0013      	movs	r3, r2
    30a0:	0022      	movs	r2, r4
    30a2:	602b      	str	r3, [r5, #0]
    30a4:	3243      	adds	r2, #67	; 0x43
    30a6:	7812      	ldrb	r2, [r2, #0]
    30a8:	2a00      	cmp	r2, #0
    30aa:	d001      	beq.n	30b0 <_printf_common+0x24>
    30ac:	3301      	adds	r3, #1
    30ae:	602b      	str	r3, [r5, #0]
    30b0:	6823      	ldr	r3, [r4, #0]
    30b2:	069b      	lsls	r3, r3, #26
    30b4:	d502      	bpl.n	30bc <_printf_common+0x30>
    30b6:	682b      	ldr	r3, [r5, #0]
    30b8:	3302      	adds	r3, #2
    30ba:	602b      	str	r3, [r5, #0]
    30bc:	2706      	movs	r7, #6
    30be:	6823      	ldr	r3, [r4, #0]
    30c0:	401f      	ands	r7, r3
    30c2:	d027      	beq.n	3114 <_printf_common+0x88>
    30c4:	0023      	movs	r3, r4
    30c6:	3343      	adds	r3, #67	; 0x43
    30c8:	781b      	ldrb	r3, [r3, #0]
    30ca:	1e5a      	subs	r2, r3, #1
    30cc:	4193      	sbcs	r3, r2
    30ce:	6822      	ldr	r2, [r4, #0]
    30d0:	0692      	lsls	r2, r2, #26
    30d2:	d430      	bmi.n	3136 <_printf_common+0xaa>
    30d4:	0022      	movs	r2, r4
    30d6:	9901      	ldr	r1, [sp, #4]
    30d8:	3243      	adds	r2, #67	; 0x43
    30da:	9800      	ldr	r0, [sp, #0]
    30dc:	9e08      	ldr	r6, [sp, #32]
    30de:	47b0      	blx	r6
    30e0:	1c43      	adds	r3, r0, #1
    30e2:	d025      	beq.n	3130 <_printf_common+0xa4>
    30e4:	2306      	movs	r3, #6
    30e6:	6820      	ldr	r0, [r4, #0]
    30e8:	682a      	ldr	r2, [r5, #0]
    30ea:	68e1      	ldr	r1, [r4, #12]
    30ec:	4003      	ands	r3, r0
    30ee:	2500      	movs	r5, #0
    30f0:	2b04      	cmp	r3, #4
    30f2:	d103      	bne.n	30fc <_printf_common+0x70>
    30f4:	1a8d      	subs	r5, r1, r2
    30f6:	43eb      	mvns	r3, r5
    30f8:	17db      	asrs	r3, r3, #31
    30fa:	401d      	ands	r5, r3
    30fc:	68a3      	ldr	r3, [r4, #8]
    30fe:	6922      	ldr	r2, [r4, #16]
    3100:	4293      	cmp	r3, r2
    3102:	dd01      	ble.n	3108 <_printf_common+0x7c>
    3104:	1a9b      	subs	r3, r3, r2
    3106:	18ed      	adds	r5, r5, r3
    3108:	2700      	movs	r7, #0
    310a:	42bd      	cmp	r5, r7
    310c:	d120      	bne.n	3150 <_printf_common+0xc4>
    310e:	2000      	movs	r0, #0
    3110:	e010      	b.n	3134 <_printf_common+0xa8>
    3112:	3701      	adds	r7, #1
    3114:	68e3      	ldr	r3, [r4, #12]
    3116:	682a      	ldr	r2, [r5, #0]
    3118:	1a9b      	subs	r3, r3, r2
    311a:	429f      	cmp	r7, r3
    311c:	dad2      	bge.n	30c4 <_printf_common+0x38>
    311e:	0022      	movs	r2, r4
    3120:	2301      	movs	r3, #1
    3122:	3219      	adds	r2, #25
    3124:	9901      	ldr	r1, [sp, #4]
    3126:	9800      	ldr	r0, [sp, #0]
    3128:	9e08      	ldr	r6, [sp, #32]
    312a:	47b0      	blx	r6
    312c:	1c43      	adds	r3, r0, #1
    312e:	d1f0      	bne.n	3112 <_printf_common+0x86>
    3130:	2001      	movs	r0, #1
    3132:	4240      	negs	r0, r0
    3134:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3136:	2030      	movs	r0, #48	; 0x30
    3138:	18e1      	adds	r1, r4, r3
    313a:	3143      	adds	r1, #67	; 0x43
    313c:	7008      	strb	r0, [r1, #0]
    313e:	0021      	movs	r1, r4
    3140:	1c5a      	adds	r2, r3, #1
    3142:	3145      	adds	r1, #69	; 0x45
    3144:	7809      	ldrb	r1, [r1, #0]
    3146:	18a2      	adds	r2, r4, r2
    3148:	3243      	adds	r2, #67	; 0x43
    314a:	3302      	adds	r3, #2
    314c:	7011      	strb	r1, [r2, #0]
    314e:	e7c1      	b.n	30d4 <_printf_common+0x48>
    3150:	0022      	movs	r2, r4
    3152:	2301      	movs	r3, #1
    3154:	321a      	adds	r2, #26
    3156:	9901      	ldr	r1, [sp, #4]
    3158:	9800      	ldr	r0, [sp, #0]
    315a:	9e08      	ldr	r6, [sp, #32]
    315c:	47b0      	blx	r6
    315e:	1c43      	adds	r3, r0, #1
    3160:	d0e6      	beq.n	3130 <_printf_common+0xa4>
    3162:	3701      	adds	r7, #1
    3164:	e7d1      	b.n	310a <_printf_common+0x7e>
	...

00003168 <_printf_i>:
    3168:	b5f0      	push	{r4, r5, r6, r7, lr}
    316a:	b08b      	sub	sp, #44	; 0x2c
    316c:	9206      	str	r2, [sp, #24]
    316e:	000a      	movs	r2, r1
    3170:	3243      	adds	r2, #67	; 0x43
    3172:	9307      	str	r3, [sp, #28]
    3174:	9005      	str	r0, [sp, #20]
    3176:	9204      	str	r2, [sp, #16]
    3178:	7e0a      	ldrb	r2, [r1, #24]
    317a:	000c      	movs	r4, r1
    317c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    317e:	2a6e      	cmp	r2, #110	; 0x6e
    3180:	d100      	bne.n	3184 <_printf_i+0x1c>
    3182:	e08f      	b.n	32a4 <_printf_i+0x13c>
    3184:	d817      	bhi.n	31b6 <_printf_i+0x4e>
    3186:	2a63      	cmp	r2, #99	; 0x63
    3188:	d02c      	beq.n	31e4 <_printf_i+0x7c>
    318a:	d808      	bhi.n	319e <_printf_i+0x36>
    318c:	2a00      	cmp	r2, #0
    318e:	d100      	bne.n	3192 <_printf_i+0x2a>
    3190:	e099      	b.n	32c6 <_printf_i+0x15e>
    3192:	2a58      	cmp	r2, #88	; 0x58
    3194:	d054      	beq.n	3240 <_printf_i+0xd8>
    3196:	0026      	movs	r6, r4
    3198:	3642      	adds	r6, #66	; 0x42
    319a:	7032      	strb	r2, [r6, #0]
    319c:	e029      	b.n	31f2 <_printf_i+0x8a>
    319e:	2a64      	cmp	r2, #100	; 0x64
    31a0:	d001      	beq.n	31a6 <_printf_i+0x3e>
    31a2:	2a69      	cmp	r2, #105	; 0x69
    31a4:	d1f7      	bne.n	3196 <_printf_i+0x2e>
    31a6:	6821      	ldr	r1, [r4, #0]
    31a8:	681a      	ldr	r2, [r3, #0]
    31aa:	0608      	lsls	r0, r1, #24
    31ac:	d523      	bpl.n	31f6 <_printf_i+0x8e>
    31ae:	1d11      	adds	r1, r2, #4
    31b0:	6019      	str	r1, [r3, #0]
    31b2:	6815      	ldr	r5, [r2, #0]
    31b4:	e025      	b.n	3202 <_printf_i+0x9a>
    31b6:	2a73      	cmp	r2, #115	; 0x73
    31b8:	d100      	bne.n	31bc <_printf_i+0x54>
    31ba:	e088      	b.n	32ce <_printf_i+0x166>
    31bc:	d808      	bhi.n	31d0 <_printf_i+0x68>
    31be:	2a6f      	cmp	r2, #111	; 0x6f
    31c0:	d029      	beq.n	3216 <_printf_i+0xae>
    31c2:	2a70      	cmp	r2, #112	; 0x70
    31c4:	d1e7      	bne.n	3196 <_printf_i+0x2e>
    31c6:	2220      	movs	r2, #32
    31c8:	6809      	ldr	r1, [r1, #0]
    31ca:	430a      	orrs	r2, r1
    31cc:	6022      	str	r2, [r4, #0]
    31ce:	e003      	b.n	31d8 <_printf_i+0x70>
    31d0:	2a75      	cmp	r2, #117	; 0x75
    31d2:	d020      	beq.n	3216 <_printf_i+0xae>
    31d4:	2a78      	cmp	r2, #120	; 0x78
    31d6:	d1de      	bne.n	3196 <_printf_i+0x2e>
    31d8:	0022      	movs	r2, r4
    31da:	2178      	movs	r1, #120	; 0x78
    31dc:	3245      	adds	r2, #69	; 0x45
    31de:	7011      	strb	r1, [r2, #0]
    31e0:	4a6c      	ldr	r2, [pc, #432]	; (3394 <_printf_i+0x22c>)
    31e2:	e030      	b.n	3246 <_printf_i+0xde>
    31e4:	000e      	movs	r6, r1
    31e6:	681a      	ldr	r2, [r3, #0]
    31e8:	3642      	adds	r6, #66	; 0x42
    31ea:	1d11      	adds	r1, r2, #4
    31ec:	6019      	str	r1, [r3, #0]
    31ee:	6813      	ldr	r3, [r2, #0]
    31f0:	7033      	strb	r3, [r6, #0]
    31f2:	2301      	movs	r3, #1
    31f4:	e079      	b.n	32ea <_printf_i+0x182>
    31f6:	0649      	lsls	r1, r1, #25
    31f8:	d5d9      	bpl.n	31ae <_printf_i+0x46>
    31fa:	1d11      	adds	r1, r2, #4
    31fc:	6019      	str	r1, [r3, #0]
    31fe:	2300      	movs	r3, #0
    3200:	5ed5      	ldrsh	r5, [r2, r3]
    3202:	2d00      	cmp	r5, #0
    3204:	da03      	bge.n	320e <_printf_i+0xa6>
    3206:	232d      	movs	r3, #45	; 0x2d
    3208:	9a04      	ldr	r2, [sp, #16]
    320a:	426d      	negs	r5, r5
    320c:	7013      	strb	r3, [r2, #0]
    320e:	4b62      	ldr	r3, [pc, #392]	; (3398 <_printf_i+0x230>)
    3210:	270a      	movs	r7, #10
    3212:	9303      	str	r3, [sp, #12]
    3214:	e02f      	b.n	3276 <_printf_i+0x10e>
    3216:	6820      	ldr	r0, [r4, #0]
    3218:	6819      	ldr	r1, [r3, #0]
    321a:	0605      	lsls	r5, r0, #24
    321c:	d503      	bpl.n	3226 <_printf_i+0xbe>
    321e:	1d08      	adds	r0, r1, #4
    3220:	6018      	str	r0, [r3, #0]
    3222:	680d      	ldr	r5, [r1, #0]
    3224:	e005      	b.n	3232 <_printf_i+0xca>
    3226:	0640      	lsls	r0, r0, #25
    3228:	d5f9      	bpl.n	321e <_printf_i+0xb6>
    322a:	680d      	ldr	r5, [r1, #0]
    322c:	1d08      	adds	r0, r1, #4
    322e:	6018      	str	r0, [r3, #0]
    3230:	b2ad      	uxth	r5, r5
    3232:	4b59      	ldr	r3, [pc, #356]	; (3398 <_printf_i+0x230>)
    3234:	2708      	movs	r7, #8
    3236:	9303      	str	r3, [sp, #12]
    3238:	2a6f      	cmp	r2, #111	; 0x6f
    323a:	d018      	beq.n	326e <_printf_i+0x106>
    323c:	270a      	movs	r7, #10
    323e:	e016      	b.n	326e <_printf_i+0x106>
    3240:	3145      	adds	r1, #69	; 0x45
    3242:	700a      	strb	r2, [r1, #0]
    3244:	4a54      	ldr	r2, [pc, #336]	; (3398 <_printf_i+0x230>)
    3246:	9203      	str	r2, [sp, #12]
    3248:	681a      	ldr	r2, [r3, #0]
    324a:	6821      	ldr	r1, [r4, #0]
    324c:	1d10      	adds	r0, r2, #4
    324e:	6018      	str	r0, [r3, #0]
    3250:	6815      	ldr	r5, [r2, #0]
    3252:	0608      	lsls	r0, r1, #24
    3254:	d522      	bpl.n	329c <_printf_i+0x134>
    3256:	07cb      	lsls	r3, r1, #31
    3258:	d502      	bpl.n	3260 <_printf_i+0xf8>
    325a:	2320      	movs	r3, #32
    325c:	4319      	orrs	r1, r3
    325e:	6021      	str	r1, [r4, #0]
    3260:	2710      	movs	r7, #16
    3262:	2d00      	cmp	r5, #0
    3264:	d103      	bne.n	326e <_printf_i+0x106>
    3266:	2320      	movs	r3, #32
    3268:	6822      	ldr	r2, [r4, #0]
    326a:	439a      	bics	r2, r3
    326c:	6022      	str	r2, [r4, #0]
    326e:	0023      	movs	r3, r4
    3270:	2200      	movs	r2, #0
    3272:	3343      	adds	r3, #67	; 0x43
    3274:	701a      	strb	r2, [r3, #0]
    3276:	6863      	ldr	r3, [r4, #4]
    3278:	60a3      	str	r3, [r4, #8]
    327a:	2b00      	cmp	r3, #0
    327c:	db5c      	blt.n	3338 <_printf_i+0x1d0>
    327e:	2204      	movs	r2, #4
    3280:	6821      	ldr	r1, [r4, #0]
    3282:	4391      	bics	r1, r2
    3284:	6021      	str	r1, [r4, #0]
    3286:	2d00      	cmp	r5, #0
    3288:	d158      	bne.n	333c <_printf_i+0x1d4>
    328a:	9e04      	ldr	r6, [sp, #16]
    328c:	2b00      	cmp	r3, #0
    328e:	d064      	beq.n	335a <_printf_i+0x1f2>
    3290:	0026      	movs	r6, r4
    3292:	9b03      	ldr	r3, [sp, #12]
    3294:	3642      	adds	r6, #66	; 0x42
    3296:	781b      	ldrb	r3, [r3, #0]
    3298:	7033      	strb	r3, [r6, #0]
    329a:	e05e      	b.n	335a <_printf_i+0x1f2>
    329c:	0648      	lsls	r0, r1, #25
    329e:	d5da      	bpl.n	3256 <_printf_i+0xee>
    32a0:	b2ad      	uxth	r5, r5
    32a2:	e7d8      	b.n	3256 <_printf_i+0xee>
    32a4:	6809      	ldr	r1, [r1, #0]
    32a6:	681a      	ldr	r2, [r3, #0]
    32a8:	0608      	lsls	r0, r1, #24
    32aa:	d505      	bpl.n	32b8 <_printf_i+0x150>
    32ac:	1d11      	adds	r1, r2, #4
    32ae:	6019      	str	r1, [r3, #0]
    32b0:	6813      	ldr	r3, [r2, #0]
    32b2:	6962      	ldr	r2, [r4, #20]
    32b4:	601a      	str	r2, [r3, #0]
    32b6:	e006      	b.n	32c6 <_printf_i+0x15e>
    32b8:	0649      	lsls	r1, r1, #25
    32ba:	d5f7      	bpl.n	32ac <_printf_i+0x144>
    32bc:	1d11      	adds	r1, r2, #4
    32be:	6019      	str	r1, [r3, #0]
    32c0:	6813      	ldr	r3, [r2, #0]
    32c2:	8aa2      	ldrh	r2, [r4, #20]
    32c4:	801a      	strh	r2, [r3, #0]
    32c6:	2300      	movs	r3, #0
    32c8:	9e04      	ldr	r6, [sp, #16]
    32ca:	6123      	str	r3, [r4, #16]
    32cc:	e054      	b.n	3378 <_printf_i+0x210>
    32ce:	681a      	ldr	r2, [r3, #0]
    32d0:	1d11      	adds	r1, r2, #4
    32d2:	6019      	str	r1, [r3, #0]
    32d4:	6816      	ldr	r6, [r2, #0]
    32d6:	2100      	movs	r1, #0
    32d8:	6862      	ldr	r2, [r4, #4]
    32da:	0030      	movs	r0, r6
    32dc:	f000 fc68 	bl	3bb0 <memchr>
    32e0:	2800      	cmp	r0, #0
    32e2:	d001      	beq.n	32e8 <_printf_i+0x180>
    32e4:	1b80      	subs	r0, r0, r6
    32e6:	6060      	str	r0, [r4, #4]
    32e8:	6863      	ldr	r3, [r4, #4]
    32ea:	6123      	str	r3, [r4, #16]
    32ec:	2300      	movs	r3, #0
    32ee:	9a04      	ldr	r2, [sp, #16]
    32f0:	7013      	strb	r3, [r2, #0]
    32f2:	e041      	b.n	3378 <_printf_i+0x210>
    32f4:	6923      	ldr	r3, [r4, #16]
    32f6:	0032      	movs	r2, r6
    32f8:	9906      	ldr	r1, [sp, #24]
    32fa:	9805      	ldr	r0, [sp, #20]
    32fc:	9d07      	ldr	r5, [sp, #28]
    32fe:	47a8      	blx	r5
    3300:	1c43      	adds	r3, r0, #1
    3302:	d043      	beq.n	338c <_printf_i+0x224>
    3304:	6823      	ldr	r3, [r4, #0]
    3306:	2500      	movs	r5, #0
    3308:	079b      	lsls	r3, r3, #30
    330a:	d40f      	bmi.n	332c <_printf_i+0x1c4>
    330c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    330e:	68e0      	ldr	r0, [r4, #12]
    3310:	4298      	cmp	r0, r3
    3312:	da3d      	bge.n	3390 <_printf_i+0x228>
    3314:	0018      	movs	r0, r3
    3316:	e03b      	b.n	3390 <_printf_i+0x228>
    3318:	0022      	movs	r2, r4
    331a:	2301      	movs	r3, #1
    331c:	3219      	adds	r2, #25
    331e:	9906      	ldr	r1, [sp, #24]
    3320:	9805      	ldr	r0, [sp, #20]
    3322:	9e07      	ldr	r6, [sp, #28]
    3324:	47b0      	blx	r6
    3326:	1c43      	adds	r3, r0, #1
    3328:	d030      	beq.n	338c <_printf_i+0x224>
    332a:	3501      	adds	r5, #1
    332c:	68e3      	ldr	r3, [r4, #12]
    332e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    3330:	1a9b      	subs	r3, r3, r2
    3332:	429d      	cmp	r5, r3
    3334:	dbf0      	blt.n	3318 <_printf_i+0x1b0>
    3336:	e7e9      	b.n	330c <_printf_i+0x1a4>
    3338:	2d00      	cmp	r5, #0
    333a:	d0a9      	beq.n	3290 <_printf_i+0x128>
    333c:	9e04      	ldr	r6, [sp, #16]
    333e:	0028      	movs	r0, r5
    3340:	0039      	movs	r1, r7
    3342:	f7fd fe77 	bl	1034 <__aeabi_uidivmod>
    3346:	9b03      	ldr	r3, [sp, #12]
    3348:	3e01      	subs	r6, #1
    334a:	5c5b      	ldrb	r3, [r3, r1]
    334c:	0028      	movs	r0, r5
    334e:	7033      	strb	r3, [r6, #0]
    3350:	0039      	movs	r1, r7
    3352:	f7fd fe38 	bl	fc6 <__aeabi_uidiv>
    3356:	1e05      	subs	r5, r0, #0
    3358:	d1f1      	bne.n	333e <_printf_i+0x1d6>
    335a:	2f08      	cmp	r7, #8
    335c:	d109      	bne.n	3372 <_printf_i+0x20a>
    335e:	6823      	ldr	r3, [r4, #0]
    3360:	07db      	lsls	r3, r3, #31
    3362:	d506      	bpl.n	3372 <_printf_i+0x20a>
    3364:	6863      	ldr	r3, [r4, #4]
    3366:	6922      	ldr	r2, [r4, #16]
    3368:	4293      	cmp	r3, r2
    336a:	dc02      	bgt.n	3372 <_printf_i+0x20a>
    336c:	2330      	movs	r3, #48	; 0x30
    336e:	3e01      	subs	r6, #1
    3370:	7033      	strb	r3, [r6, #0]
    3372:	9b04      	ldr	r3, [sp, #16]
    3374:	1b9b      	subs	r3, r3, r6
    3376:	6123      	str	r3, [r4, #16]
    3378:	9b07      	ldr	r3, [sp, #28]
    337a:	aa09      	add	r2, sp, #36	; 0x24
    337c:	9300      	str	r3, [sp, #0]
    337e:	0021      	movs	r1, r4
    3380:	9b06      	ldr	r3, [sp, #24]
    3382:	9805      	ldr	r0, [sp, #20]
    3384:	f7ff fe82 	bl	308c <_printf_common>
    3388:	1c43      	adds	r3, r0, #1
    338a:	d1b3      	bne.n	32f4 <_printf_i+0x18c>
    338c:	2001      	movs	r0, #1
    338e:	4240      	negs	r0, r0
    3390:	b00b      	add	sp, #44	; 0x2c
    3392:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3394:	0000410e 	.word	0x0000410e
    3398:	000040fd 	.word	0x000040fd

0000339c <iprintf>:
    339c:	b40f      	push	{r0, r1, r2, r3}
    339e:	4b0b      	ldr	r3, [pc, #44]	; (33cc <iprintf+0x30>)
    33a0:	b513      	push	{r0, r1, r4, lr}
    33a2:	681c      	ldr	r4, [r3, #0]
    33a4:	2c00      	cmp	r4, #0
    33a6:	d005      	beq.n	33b4 <iprintf+0x18>
    33a8:	69a3      	ldr	r3, [r4, #24]
    33aa:	2b00      	cmp	r3, #0
    33ac:	d102      	bne.n	33b4 <iprintf+0x18>
    33ae:	0020      	movs	r0, r4
    33b0:	f000 faf2 	bl	3998 <__sinit>
    33b4:	ab05      	add	r3, sp, #20
    33b6:	9a04      	ldr	r2, [sp, #16]
    33b8:	68a1      	ldr	r1, [r4, #8]
    33ba:	0020      	movs	r0, r4
    33bc:	9301      	str	r3, [sp, #4]
    33be:	f7ff fd49 	bl	2e54 <_vfiprintf_r>
    33c2:	bc16      	pop	{r1, r2, r4}
    33c4:	bc08      	pop	{r3}
    33c6:	b004      	add	sp, #16
    33c8:	4718      	bx	r3
    33ca:	46c0      	nop			; (mov r8, r8)
    33cc:	20000014 	.word	0x20000014

000033d0 <_puts_r>:
    33d0:	b570      	push	{r4, r5, r6, lr}
    33d2:	0005      	movs	r5, r0
    33d4:	000e      	movs	r6, r1
    33d6:	2800      	cmp	r0, #0
    33d8:	d004      	beq.n	33e4 <_puts_r+0x14>
    33da:	6983      	ldr	r3, [r0, #24]
    33dc:	2b00      	cmp	r3, #0
    33de:	d101      	bne.n	33e4 <_puts_r+0x14>
    33e0:	f000 fada 	bl	3998 <__sinit>
    33e4:	69ab      	ldr	r3, [r5, #24]
    33e6:	68ac      	ldr	r4, [r5, #8]
    33e8:	2b00      	cmp	r3, #0
    33ea:	d102      	bne.n	33f2 <_puts_r+0x22>
    33ec:	0028      	movs	r0, r5
    33ee:	f000 fad3 	bl	3998 <__sinit>
    33f2:	4b24      	ldr	r3, [pc, #144]	; (3484 <_puts_r+0xb4>)
    33f4:	429c      	cmp	r4, r3
    33f6:	d10f      	bne.n	3418 <_puts_r+0x48>
    33f8:	686c      	ldr	r4, [r5, #4]
    33fa:	89a3      	ldrh	r3, [r4, #12]
    33fc:	071b      	lsls	r3, r3, #28
    33fe:	d502      	bpl.n	3406 <_puts_r+0x36>
    3400:	6923      	ldr	r3, [r4, #16]
    3402:	2b00      	cmp	r3, #0
    3404:	d120      	bne.n	3448 <_puts_r+0x78>
    3406:	0021      	movs	r1, r4
    3408:	0028      	movs	r0, r5
    340a:	f000 f957 	bl	36bc <__swsetup_r>
    340e:	2800      	cmp	r0, #0
    3410:	d01a      	beq.n	3448 <_puts_r+0x78>
    3412:	2001      	movs	r0, #1
    3414:	4240      	negs	r0, r0
    3416:	bd70      	pop	{r4, r5, r6, pc}
    3418:	4b1b      	ldr	r3, [pc, #108]	; (3488 <_puts_r+0xb8>)
    341a:	429c      	cmp	r4, r3
    341c:	d101      	bne.n	3422 <_puts_r+0x52>
    341e:	68ac      	ldr	r4, [r5, #8]
    3420:	e7eb      	b.n	33fa <_puts_r+0x2a>
    3422:	4b1a      	ldr	r3, [pc, #104]	; (348c <_puts_r+0xbc>)
    3424:	429c      	cmp	r4, r3
    3426:	d1e8      	bne.n	33fa <_puts_r+0x2a>
    3428:	68ec      	ldr	r4, [r5, #12]
    342a:	e7e6      	b.n	33fa <_puts_r+0x2a>
    342c:	3b01      	subs	r3, #1
    342e:	3601      	adds	r6, #1
    3430:	60a3      	str	r3, [r4, #8]
    3432:	2b00      	cmp	r3, #0
    3434:	da04      	bge.n	3440 <_puts_r+0x70>
    3436:	69a2      	ldr	r2, [r4, #24]
    3438:	4293      	cmp	r3, r2
    343a:	db16      	blt.n	346a <_puts_r+0x9a>
    343c:	290a      	cmp	r1, #10
    343e:	d014      	beq.n	346a <_puts_r+0x9a>
    3440:	6823      	ldr	r3, [r4, #0]
    3442:	1c5a      	adds	r2, r3, #1
    3444:	6022      	str	r2, [r4, #0]
    3446:	7019      	strb	r1, [r3, #0]
    3448:	7831      	ldrb	r1, [r6, #0]
    344a:	68a3      	ldr	r3, [r4, #8]
    344c:	2900      	cmp	r1, #0
    344e:	d1ed      	bne.n	342c <_puts_r+0x5c>
    3450:	3b01      	subs	r3, #1
    3452:	60a3      	str	r3, [r4, #8]
    3454:	2b00      	cmp	r3, #0
    3456:	da0f      	bge.n	3478 <_puts_r+0xa8>
    3458:	0022      	movs	r2, r4
    345a:	310a      	adds	r1, #10
    345c:	0028      	movs	r0, r5
    345e:	f000 f8d7 	bl	3610 <__swbuf_r>
    3462:	1c43      	adds	r3, r0, #1
    3464:	d0d5      	beq.n	3412 <_puts_r+0x42>
    3466:	200a      	movs	r0, #10
    3468:	e7d5      	b.n	3416 <_puts_r+0x46>
    346a:	0022      	movs	r2, r4
    346c:	0028      	movs	r0, r5
    346e:	f000 f8cf 	bl	3610 <__swbuf_r>
    3472:	1c43      	adds	r3, r0, #1
    3474:	d1e8      	bne.n	3448 <_puts_r+0x78>
    3476:	e7cc      	b.n	3412 <_puts_r+0x42>
    3478:	200a      	movs	r0, #10
    347a:	6823      	ldr	r3, [r4, #0]
    347c:	1c5a      	adds	r2, r3, #1
    347e:	6022      	str	r2, [r4, #0]
    3480:	7018      	strb	r0, [r3, #0]
    3482:	e7c8      	b.n	3416 <_puts_r+0x46>
    3484:	00004140 	.word	0x00004140
    3488:	00004160 	.word	0x00004160
    348c:	00004120 	.word	0x00004120

00003490 <puts>:
    3490:	b510      	push	{r4, lr}
    3492:	4b03      	ldr	r3, [pc, #12]	; (34a0 <puts+0x10>)
    3494:	0001      	movs	r1, r0
    3496:	6818      	ldr	r0, [r3, #0]
    3498:	f7ff ff9a 	bl	33d0 <_puts_r>
    349c:	bd10      	pop	{r4, pc}
    349e:	46c0      	nop			; (mov r8, r8)
    34a0:	20000014 	.word	0x20000014

000034a4 <setbuf>:
    34a4:	424a      	negs	r2, r1
    34a6:	414a      	adcs	r2, r1
    34a8:	2380      	movs	r3, #128	; 0x80
    34aa:	b510      	push	{r4, lr}
    34ac:	0052      	lsls	r2, r2, #1
    34ae:	00db      	lsls	r3, r3, #3
    34b0:	f000 f802 	bl	34b8 <setvbuf>
    34b4:	bd10      	pop	{r4, pc}
	...

000034b8 <setvbuf>:
    34b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    34ba:	001d      	movs	r5, r3
    34bc:	4b4f      	ldr	r3, [pc, #316]	; (35fc <setvbuf+0x144>)
    34be:	b085      	sub	sp, #20
    34c0:	681e      	ldr	r6, [r3, #0]
    34c2:	0004      	movs	r4, r0
    34c4:	000f      	movs	r7, r1
    34c6:	9200      	str	r2, [sp, #0]
    34c8:	2e00      	cmp	r6, #0
    34ca:	d005      	beq.n	34d8 <setvbuf+0x20>
    34cc:	69b3      	ldr	r3, [r6, #24]
    34ce:	2b00      	cmp	r3, #0
    34d0:	d102      	bne.n	34d8 <setvbuf+0x20>
    34d2:	0030      	movs	r0, r6
    34d4:	f000 fa60 	bl	3998 <__sinit>
    34d8:	4b49      	ldr	r3, [pc, #292]	; (3600 <setvbuf+0x148>)
    34da:	429c      	cmp	r4, r3
    34dc:	d150      	bne.n	3580 <setvbuf+0xc8>
    34de:	6874      	ldr	r4, [r6, #4]
    34e0:	9b00      	ldr	r3, [sp, #0]
    34e2:	2b02      	cmp	r3, #2
    34e4:	d005      	beq.n	34f2 <setvbuf+0x3a>
    34e6:	2b01      	cmp	r3, #1
    34e8:	d900      	bls.n	34ec <setvbuf+0x34>
    34ea:	e084      	b.n	35f6 <setvbuf+0x13e>
    34ec:	2d00      	cmp	r5, #0
    34ee:	da00      	bge.n	34f2 <setvbuf+0x3a>
    34f0:	e081      	b.n	35f6 <setvbuf+0x13e>
    34f2:	0021      	movs	r1, r4
    34f4:	0030      	movs	r0, r6
    34f6:	f000 f9e1 	bl	38bc <_fflush_r>
    34fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
    34fc:	2900      	cmp	r1, #0
    34fe:	d008      	beq.n	3512 <setvbuf+0x5a>
    3500:	0023      	movs	r3, r4
    3502:	3344      	adds	r3, #68	; 0x44
    3504:	4299      	cmp	r1, r3
    3506:	d002      	beq.n	350e <setvbuf+0x56>
    3508:	0030      	movs	r0, r6
    350a:	f000 fb5d 	bl	3bc8 <_free_r>
    350e:	2300      	movs	r3, #0
    3510:	6363      	str	r3, [r4, #52]	; 0x34
    3512:	2300      	movs	r3, #0
    3514:	61a3      	str	r3, [r4, #24]
    3516:	6063      	str	r3, [r4, #4]
    3518:	89a3      	ldrh	r3, [r4, #12]
    351a:	061b      	lsls	r3, r3, #24
    351c:	d503      	bpl.n	3526 <setvbuf+0x6e>
    351e:	6921      	ldr	r1, [r4, #16]
    3520:	0030      	movs	r0, r6
    3522:	f000 fb51 	bl	3bc8 <_free_r>
    3526:	89a3      	ldrh	r3, [r4, #12]
    3528:	4a36      	ldr	r2, [pc, #216]	; (3604 <setvbuf+0x14c>)
    352a:	4013      	ands	r3, r2
    352c:	81a3      	strh	r3, [r4, #12]
    352e:	9b00      	ldr	r3, [sp, #0]
    3530:	2b02      	cmp	r3, #2
    3532:	d05a      	beq.n	35ea <setvbuf+0x132>
    3534:	ab03      	add	r3, sp, #12
    3536:	aa02      	add	r2, sp, #8
    3538:	0021      	movs	r1, r4
    353a:	0030      	movs	r0, r6
    353c:	f000 fac2 	bl	3ac4 <__swhatbuf_r>
    3540:	89a3      	ldrh	r3, [r4, #12]
    3542:	4318      	orrs	r0, r3
    3544:	81a0      	strh	r0, [r4, #12]
    3546:	2d00      	cmp	r5, #0
    3548:	d124      	bne.n	3594 <setvbuf+0xdc>
    354a:	9d02      	ldr	r5, [sp, #8]
    354c:	0028      	movs	r0, r5
    354e:	f000 fb25 	bl	3b9c <malloc>
    3552:	9501      	str	r5, [sp, #4]
    3554:	1e07      	subs	r7, r0, #0
    3556:	d142      	bne.n	35de <setvbuf+0x126>
    3558:	9b02      	ldr	r3, [sp, #8]
    355a:	9301      	str	r3, [sp, #4]
    355c:	42ab      	cmp	r3, r5
    355e:	d139      	bne.n	35d4 <setvbuf+0x11c>
    3560:	2001      	movs	r0, #1
    3562:	4240      	negs	r0, r0
    3564:	2302      	movs	r3, #2
    3566:	89a2      	ldrh	r2, [r4, #12]
    3568:	4313      	orrs	r3, r2
    356a:	81a3      	strh	r3, [r4, #12]
    356c:	2300      	movs	r3, #0
    356e:	60a3      	str	r3, [r4, #8]
    3570:	0023      	movs	r3, r4
    3572:	3347      	adds	r3, #71	; 0x47
    3574:	6023      	str	r3, [r4, #0]
    3576:	6123      	str	r3, [r4, #16]
    3578:	2301      	movs	r3, #1
    357a:	6163      	str	r3, [r4, #20]
    357c:	b005      	add	sp, #20
    357e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3580:	4b21      	ldr	r3, [pc, #132]	; (3608 <setvbuf+0x150>)
    3582:	429c      	cmp	r4, r3
    3584:	d101      	bne.n	358a <setvbuf+0xd2>
    3586:	68b4      	ldr	r4, [r6, #8]
    3588:	e7aa      	b.n	34e0 <setvbuf+0x28>
    358a:	4b20      	ldr	r3, [pc, #128]	; (360c <setvbuf+0x154>)
    358c:	429c      	cmp	r4, r3
    358e:	d1a7      	bne.n	34e0 <setvbuf+0x28>
    3590:	68f4      	ldr	r4, [r6, #12]
    3592:	e7a5      	b.n	34e0 <setvbuf+0x28>
    3594:	2f00      	cmp	r7, #0
    3596:	d0d9      	beq.n	354c <setvbuf+0x94>
    3598:	69b3      	ldr	r3, [r6, #24]
    359a:	2b00      	cmp	r3, #0
    359c:	d102      	bne.n	35a4 <setvbuf+0xec>
    359e:	0030      	movs	r0, r6
    35a0:	f000 f9fa 	bl	3998 <__sinit>
    35a4:	9b00      	ldr	r3, [sp, #0]
    35a6:	2b01      	cmp	r3, #1
    35a8:	d103      	bne.n	35b2 <setvbuf+0xfa>
    35aa:	89a3      	ldrh	r3, [r4, #12]
    35ac:	9a00      	ldr	r2, [sp, #0]
    35ae:	431a      	orrs	r2, r3
    35b0:	81a2      	strh	r2, [r4, #12]
    35b2:	2008      	movs	r0, #8
    35b4:	89a3      	ldrh	r3, [r4, #12]
    35b6:	6027      	str	r7, [r4, #0]
    35b8:	6127      	str	r7, [r4, #16]
    35ba:	6165      	str	r5, [r4, #20]
    35bc:	4018      	ands	r0, r3
    35be:	d018      	beq.n	35f2 <setvbuf+0x13a>
    35c0:	2001      	movs	r0, #1
    35c2:	4018      	ands	r0, r3
    35c4:	2300      	movs	r3, #0
    35c6:	4298      	cmp	r0, r3
    35c8:	d011      	beq.n	35ee <setvbuf+0x136>
    35ca:	426d      	negs	r5, r5
    35cc:	60a3      	str	r3, [r4, #8]
    35ce:	61a5      	str	r5, [r4, #24]
    35d0:	0018      	movs	r0, r3
    35d2:	e7d3      	b.n	357c <setvbuf+0xc4>
    35d4:	9801      	ldr	r0, [sp, #4]
    35d6:	f000 fae1 	bl	3b9c <malloc>
    35da:	1e07      	subs	r7, r0, #0
    35dc:	d0c0      	beq.n	3560 <setvbuf+0xa8>
    35de:	2380      	movs	r3, #128	; 0x80
    35e0:	89a2      	ldrh	r2, [r4, #12]
    35e2:	9d01      	ldr	r5, [sp, #4]
    35e4:	4313      	orrs	r3, r2
    35e6:	81a3      	strh	r3, [r4, #12]
    35e8:	e7d6      	b.n	3598 <setvbuf+0xe0>
    35ea:	2000      	movs	r0, #0
    35ec:	e7ba      	b.n	3564 <setvbuf+0xac>
    35ee:	60a5      	str	r5, [r4, #8]
    35f0:	e7c4      	b.n	357c <setvbuf+0xc4>
    35f2:	60a0      	str	r0, [r4, #8]
    35f4:	e7c2      	b.n	357c <setvbuf+0xc4>
    35f6:	2001      	movs	r0, #1
    35f8:	4240      	negs	r0, r0
    35fa:	e7bf      	b.n	357c <setvbuf+0xc4>
    35fc:	20000014 	.word	0x20000014
    3600:	00004140 	.word	0x00004140
    3604:	fffff35c 	.word	0xfffff35c
    3608:	00004160 	.word	0x00004160
    360c:	00004120 	.word	0x00004120

00003610 <__swbuf_r>:
    3610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3612:	0005      	movs	r5, r0
    3614:	000e      	movs	r6, r1
    3616:	0014      	movs	r4, r2
    3618:	2800      	cmp	r0, #0
    361a:	d004      	beq.n	3626 <__swbuf_r+0x16>
    361c:	6983      	ldr	r3, [r0, #24]
    361e:	2b00      	cmp	r3, #0
    3620:	d101      	bne.n	3626 <__swbuf_r+0x16>
    3622:	f000 f9b9 	bl	3998 <__sinit>
    3626:	4b22      	ldr	r3, [pc, #136]	; (36b0 <__swbuf_r+0xa0>)
    3628:	429c      	cmp	r4, r3
    362a:	d12d      	bne.n	3688 <__swbuf_r+0x78>
    362c:	686c      	ldr	r4, [r5, #4]
    362e:	69a3      	ldr	r3, [r4, #24]
    3630:	60a3      	str	r3, [r4, #8]
    3632:	89a3      	ldrh	r3, [r4, #12]
    3634:	071b      	lsls	r3, r3, #28
    3636:	d531      	bpl.n	369c <__swbuf_r+0x8c>
    3638:	6923      	ldr	r3, [r4, #16]
    363a:	2b00      	cmp	r3, #0
    363c:	d02e      	beq.n	369c <__swbuf_r+0x8c>
    363e:	6823      	ldr	r3, [r4, #0]
    3640:	6922      	ldr	r2, [r4, #16]
    3642:	b2f7      	uxtb	r7, r6
    3644:	1a98      	subs	r0, r3, r2
    3646:	6963      	ldr	r3, [r4, #20]
    3648:	b2f6      	uxtb	r6, r6
    364a:	4298      	cmp	r0, r3
    364c:	db05      	blt.n	365a <__swbuf_r+0x4a>
    364e:	0021      	movs	r1, r4
    3650:	0028      	movs	r0, r5
    3652:	f000 f933 	bl	38bc <_fflush_r>
    3656:	2800      	cmp	r0, #0
    3658:	d126      	bne.n	36a8 <__swbuf_r+0x98>
    365a:	68a3      	ldr	r3, [r4, #8]
    365c:	3001      	adds	r0, #1
    365e:	3b01      	subs	r3, #1
    3660:	60a3      	str	r3, [r4, #8]
    3662:	6823      	ldr	r3, [r4, #0]
    3664:	1c5a      	adds	r2, r3, #1
    3666:	6022      	str	r2, [r4, #0]
    3668:	701f      	strb	r7, [r3, #0]
    366a:	6963      	ldr	r3, [r4, #20]
    366c:	4298      	cmp	r0, r3
    366e:	d004      	beq.n	367a <__swbuf_r+0x6a>
    3670:	89a3      	ldrh	r3, [r4, #12]
    3672:	07db      	lsls	r3, r3, #31
    3674:	d51a      	bpl.n	36ac <__swbuf_r+0x9c>
    3676:	2e0a      	cmp	r6, #10
    3678:	d118      	bne.n	36ac <__swbuf_r+0x9c>
    367a:	0021      	movs	r1, r4
    367c:	0028      	movs	r0, r5
    367e:	f000 f91d 	bl	38bc <_fflush_r>
    3682:	2800      	cmp	r0, #0
    3684:	d012      	beq.n	36ac <__swbuf_r+0x9c>
    3686:	e00f      	b.n	36a8 <__swbuf_r+0x98>
    3688:	4b0a      	ldr	r3, [pc, #40]	; (36b4 <__swbuf_r+0xa4>)
    368a:	429c      	cmp	r4, r3
    368c:	d101      	bne.n	3692 <__swbuf_r+0x82>
    368e:	68ac      	ldr	r4, [r5, #8]
    3690:	e7cd      	b.n	362e <__swbuf_r+0x1e>
    3692:	4b09      	ldr	r3, [pc, #36]	; (36b8 <__swbuf_r+0xa8>)
    3694:	429c      	cmp	r4, r3
    3696:	d1ca      	bne.n	362e <__swbuf_r+0x1e>
    3698:	68ec      	ldr	r4, [r5, #12]
    369a:	e7c8      	b.n	362e <__swbuf_r+0x1e>
    369c:	0021      	movs	r1, r4
    369e:	0028      	movs	r0, r5
    36a0:	f000 f80c 	bl	36bc <__swsetup_r>
    36a4:	2800      	cmp	r0, #0
    36a6:	d0ca      	beq.n	363e <__swbuf_r+0x2e>
    36a8:	2601      	movs	r6, #1
    36aa:	4276      	negs	r6, r6
    36ac:	0030      	movs	r0, r6
    36ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    36b0:	00004140 	.word	0x00004140
    36b4:	00004160 	.word	0x00004160
    36b8:	00004120 	.word	0x00004120

000036bc <__swsetup_r>:
    36bc:	4b36      	ldr	r3, [pc, #216]	; (3798 <__swsetup_r+0xdc>)
    36be:	b570      	push	{r4, r5, r6, lr}
    36c0:	681d      	ldr	r5, [r3, #0]
    36c2:	0006      	movs	r6, r0
    36c4:	000c      	movs	r4, r1
    36c6:	2d00      	cmp	r5, #0
    36c8:	d005      	beq.n	36d6 <__swsetup_r+0x1a>
    36ca:	69ab      	ldr	r3, [r5, #24]
    36cc:	2b00      	cmp	r3, #0
    36ce:	d102      	bne.n	36d6 <__swsetup_r+0x1a>
    36d0:	0028      	movs	r0, r5
    36d2:	f000 f961 	bl	3998 <__sinit>
    36d6:	4b31      	ldr	r3, [pc, #196]	; (379c <__swsetup_r+0xe0>)
    36d8:	429c      	cmp	r4, r3
    36da:	d10f      	bne.n	36fc <__swsetup_r+0x40>
    36dc:	686c      	ldr	r4, [r5, #4]
    36de:	230c      	movs	r3, #12
    36e0:	5ee2      	ldrsh	r2, [r4, r3]
    36e2:	b293      	uxth	r3, r2
    36e4:	0719      	lsls	r1, r3, #28
    36e6:	d42d      	bmi.n	3744 <__swsetup_r+0x88>
    36e8:	06d9      	lsls	r1, r3, #27
    36ea:	d411      	bmi.n	3710 <__swsetup_r+0x54>
    36ec:	2309      	movs	r3, #9
    36ee:	2001      	movs	r0, #1
    36f0:	6033      	str	r3, [r6, #0]
    36f2:	3337      	adds	r3, #55	; 0x37
    36f4:	4313      	orrs	r3, r2
    36f6:	81a3      	strh	r3, [r4, #12]
    36f8:	4240      	negs	r0, r0
    36fa:	bd70      	pop	{r4, r5, r6, pc}
    36fc:	4b28      	ldr	r3, [pc, #160]	; (37a0 <__swsetup_r+0xe4>)
    36fe:	429c      	cmp	r4, r3
    3700:	d101      	bne.n	3706 <__swsetup_r+0x4a>
    3702:	68ac      	ldr	r4, [r5, #8]
    3704:	e7eb      	b.n	36de <__swsetup_r+0x22>
    3706:	4b27      	ldr	r3, [pc, #156]	; (37a4 <__swsetup_r+0xe8>)
    3708:	429c      	cmp	r4, r3
    370a:	d1e8      	bne.n	36de <__swsetup_r+0x22>
    370c:	68ec      	ldr	r4, [r5, #12]
    370e:	e7e6      	b.n	36de <__swsetup_r+0x22>
    3710:	075b      	lsls	r3, r3, #29
    3712:	d513      	bpl.n	373c <__swsetup_r+0x80>
    3714:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3716:	2900      	cmp	r1, #0
    3718:	d008      	beq.n	372c <__swsetup_r+0x70>
    371a:	0023      	movs	r3, r4
    371c:	3344      	adds	r3, #68	; 0x44
    371e:	4299      	cmp	r1, r3
    3720:	d002      	beq.n	3728 <__swsetup_r+0x6c>
    3722:	0030      	movs	r0, r6
    3724:	f000 fa50 	bl	3bc8 <_free_r>
    3728:	2300      	movs	r3, #0
    372a:	6363      	str	r3, [r4, #52]	; 0x34
    372c:	2224      	movs	r2, #36	; 0x24
    372e:	89a3      	ldrh	r3, [r4, #12]
    3730:	4393      	bics	r3, r2
    3732:	81a3      	strh	r3, [r4, #12]
    3734:	2300      	movs	r3, #0
    3736:	6063      	str	r3, [r4, #4]
    3738:	6923      	ldr	r3, [r4, #16]
    373a:	6023      	str	r3, [r4, #0]
    373c:	2308      	movs	r3, #8
    373e:	89a2      	ldrh	r2, [r4, #12]
    3740:	4313      	orrs	r3, r2
    3742:	81a3      	strh	r3, [r4, #12]
    3744:	6923      	ldr	r3, [r4, #16]
    3746:	2b00      	cmp	r3, #0
    3748:	d10b      	bne.n	3762 <__swsetup_r+0xa6>
    374a:	21a0      	movs	r1, #160	; 0xa0
    374c:	2280      	movs	r2, #128	; 0x80
    374e:	89a3      	ldrh	r3, [r4, #12]
    3750:	0089      	lsls	r1, r1, #2
    3752:	0092      	lsls	r2, r2, #2
    3754:	400b      	ands	r3, r1
    3756:	4293      	cmp	r3, r2
    3758:	d003      	beq.n	3762 <__swsetup_r+0xa6>
    375a:	0021      	movs	r1, r4
    375c:	0030      	movs	r0, r6
    375e:	f000 f9d9 	bl	3b14 <__smakebuf_r>
    3762:	2301      	movs	r3, #1
    3764:	89a2      	ldrh	r2, [r4, #12]
    3766:	4013      	ands	r3, r2
    3768:	d011      	beq.n	378e <__swsetup_r+0xd2>
    376a:	2300      	movs	r3, #0
    376c:	60a3      	str	r3, [r4, #8]
    376e:	6963      	ldr	r3, [r4, #20]
    3770:	425b      	negs	r3, r3
    3772:	61a3      	str	r3, [r4, #24]
    3774:	2000      	movs	r0, #0
    3776:	6923      	ldr	r3, [r4, #16]
    3778:	4283      	cmp	r3, r0
    377a:	d1be      	bne.n	36fa <__swsetup_r+0x3e>
    377c:	230c      	movs	r3, #12
    377e:	5ee2      	ldrsh	r2, [r4, r3]
    3780:	0613      	lsls	r3, r2, #24
    3782:	d5ba      	bpl.n	36fa <__swsetup_r+0x3e>
    3784:	2340      	movs	r3, #64	; 0x40
    3786:	4313      	orrs	r3, r2
    3788:	81a3      	strh	r3, [r4, #12]
    378a:	3801      	subs	r0, #1
    378c:	e7b5      	b.n	36fa <__swsetup_r+0x3e>
    378e:	0792      	lsls	r2, r2, #30
    3790:	d400      	bmi.n	3794 <__swsetup_r+0xd8>
    3792:	6963      	ldr	r3, [r4, #20]
    3794:	60a3      	str	r3, [r4, #8]
    3796:	e7ed      	b.n	3774 <__swsetup_r+0xb8>
    3798:	20000014 	.word	0x20000014
    379c:	00004140 	.word	0x00004140
    37a0:	00004160 	.word	0x00004160
    37a4:	00004120 	.word	0x00004120

000037a8 <__sflush_r>:
    37a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    37aa:	898a      	ldrh	r2, [r1, #12]
    37ac:	0005      	movs	r5, r0
    37ae:	000c      	movs	r4, r1
    37b0:	0713      	lsls	r3, r2, #28
    37b2:	d460      	bmi.n	3876 <__sflush_r+0xce>
    37b4:	684b      	ldr	r3, [r1, #4]
    37b6:	2b00      	cmp	r3, #0
    37b8:	dc04      	bgt.n	37c4 <__sflush_r+0x1c>
    37ba:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    37bc:	2b00      	cmp	r3, #0
    37be:	dc01      	bgt.n	37c4 <__sflush_r+0x1c>
    37c0:	2000      	movs	r0, #0
    37c2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    37c4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    37c6:	2f00      	cmp	r7, #0
    37c8:	d0fa      	beq.n	37c0 <__sflush_r+0x18>
    37ca:	2300      	movs	r3, #0
    37cc:	682e      	ldr	r6, [r5, #0]
    37ce:	602b      	str	r3, [r5, #0]
    37d0:	2380      	movs	r3, #128	; 0x80
    37d2:	015b      	lsls	r3, r3, #5
    37d4:	401a      	ands	r2, r3
    37d6:	d034      	beq.n	3842 <__sflush_r+0x9a>
    37d8:	6d60      	ldr	r0, [r4, #84]	; 0x54
    37da:	89a3      	ldrh	r3, [r4, #12]
    37dc:	075b      	lsls	r3, r3, #29
    37de:	d506      	bpl.n	37ee <__sflush_r+0x46>
    37e0:	6863      	ldr	r3, [r4, #4]
    37e2:	1ac0      	subs	r0, r0, r3
    37e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
    37e6:	2b00      	cmp	r3, #0
    37e8:	d001      	beq.n	37ee <__sflush_r+0x46>
    37ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
    37ec:	1ac0      	subs	r0, r0, r3
    37ee:	0002      	movs	r2, r0
    37f0:	6a21      	ldr	r1, [r4, #32]
    37f2:	2300      	movs	r3, #0
    37f4:	0028      	movs	r0, r5
    37f6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    37f8:	47b8      	blx	r7
    37fa:	89a1      	ldrh	r1, [r4, #12]
    37fc:	1c43      	adds	r3, r0, #1
    37fe:	d106      	bne.n	380e <__sflush_r+0x66>
    3800:	682b      	ldr	r3, [r5, #0]
    3802:	2b1d      	cmp	r3, #29
    3804:	d831      	bhi.n	386a <__sflush_r+0xc2>
    3806:	4a2c      	ldr	r2, [pc, #176]	; (38b8 <__sflush_r+0x110>)
    3808:	40da      	lsrs	r2, r3
    380a:	07d3      	lsls	r3, r2, #31
    380c:	d52d      	bpl.n	386a <__sflush_r+0xc2>
    380e:	2300      	movs	r3, #0
    3810:	6063      	str	r3, [r4, #4]
    3812:	6923      	ldr	r3, [r4, #16]
    3814:	6023      	str	r3, [r4, #0]
    3816:	04cb      	lsls	r3, r1, #19
    3818:	d505      	bpl.n	3826 <__sflush_r+0x7e>
    381a:	1c43      	adds	r3, r0, #1
    381c:	d102      	bne.n	3824 <__sflush_r+0x7c>
    381e:	682b      	ldr	r3, [r5, #0]
    3820:	2b00      	cmp	r3, #0
    3822:	d100      	bne.n	3826 <__sflush_r+0x7e>
    3824:	6560      	str	r0, [r4, #84]	; 0x54
    3826:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3828:	602e      	str	r6, [r5, #0]
    382a:	2900      	cmp	r1, #0
    382c:	d0c8      	beq.n	37c0 <__sflush_r+0x18>
    382e:	0023      	movs	r3, r4
    3830:	3344      	adds	r3, #68	; 0x44
    3832:	4299      	cmp	r1, r3
    3834:	d002      	beq.n	383c <__sflush_r+0x94>
    3836:	0028      	movs	r0, r5
    3838:	f000 f9c6 	bl	3bc8 <_free_r>
    383c:	2000      	movs	r0, #0
    383e:	6360      	str	r0, [r4, #52]	; 0x34
    3840:	e7bf      	b.n	37c2 <__sflush_r+0x1a>
    3842:	2301      	movs	r3, #1
    3844:	6a21      	ldr	r1, [r4, #32]
    3846:	0028      	movs	r0, r5
    3848:	47b8      	blx	r7
    384a:	1c43      	adds	r3, r0, #1
    384c:	d1c5      	bne.n	37da <__sflush_r+0x32>
    384e:	682b      	ldr	r3, [r5, #0]
    3850:	2b00      	cmp	r3, #0
    3852:	d0c2      	beq.n	37da <__sflush_r+0x32>
    3854:	2b1d      	cmp	r3, #29
    3856:	d001      	beq.n	385c <__sflush_r+0xb4>
    3858:	2b16      	cmp	r3, #22
    385a:	d101      	bne.n	3860 <__sflush_r+0xb8>
    385c:	602e      	str	r6, [r5, #0]
    385e:	e7af      	b.n	37c0 <__sflush_r+0x18>
    3860:	2340      	movs	r3, #64	; 0x40
    3862:	89a2      	ldrh	r2, [r4, #12]
    3864:	4313      	orrs	r3, r2
    3866:	81a3      	strh	r3, [r4, #12]
    3868:	e7ab      	b.n	37c2 <__sflush_r+0x1a>
    386a:	2340      	movs	r3, #64	; 0x40
    386c:	430b      	orrs	r3, r1
    386e:	2001      	movs	r0, #1
    3870:	81a3      	strh	r3, [r4, #12]
    3872:	4240      	negs	r0, r0
    3874:	e7a5      	b.n	37c2 <__sflush_r+0x1a>
    3876:	690f      	ldr	r7, [r1, #16]
    3878:	2f00      	cmp	r7, #0
    387a:	d0a1      	beq.n	37c0 <__sflush_r+0x18>
    387c:	680b      	ldr	r3, [r1, #0]
    387e:	600f      	str	r7, [r1, #0]
    3880:	1bdb      	subs	r3, r3, r7
    3882:	9301      	str	r3, [sp, #4]
    3884:	2300      	movs	r3, #0
    3886:	0792      	lsls	r2, r2, #30
    3888:	d100      	bne.n	388c <__sflush_r+0xe4>
    388a:	694b      	ldr	r3, [r1, #20]
    388c:	60a3      	str	r3, [r4, #8]
    388e:	9b01      	ldr	r3, [sp, #4]
    3890:	2b00      	cmp	r3, #0
    3892:	dc00      	bgt.n	3896 <__sflush_r+0xee>
    3894:	e794      	b.n	37c0 <__sflush_r+0x18>
    3896:	9b01      	ldr	r3, [sp, #4]
    3898:	003a      	movs	r2, r7
    389a:	6a21      	ldr	r1, [r4, #32]
    389c:	0028      	movs	r0, r5
    389e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    38a0:	47b0      	blx	r6
    38a2:	2800      	cmp	r0, #0
    38a4:	dc03      	bgt.n	38ae <__sflush_r+0x106>
    38a6:	2340      	movs	r3, #64	; 0x40
    38a8:	89a2      	ldrh	r2, [r4, #12]
    38aa:	4313      	orrs	r3, r2
    38ac:	e7df      	b.n	386e <__sflush_r+0xc6>
    38ae:	9b01      	ldr	r3, [sp, #4]
    38b0:	183f      	adds	r7, r7, r0
    38b2:	1a1b      	subs	r3, r3, r0
    38b4:	9301      	str	r3, [sp, #4]
    38b6:	e7ea      	b.n	388e <__sflush_r+0xe6>
    38b8:	20400001 	.word	0x20400001

000038bc <_fflush_r>:
    38bc:	690b      	ldr	r3, [r1, #16]
    38be:	b570      	push	{r4, r5, r6, lr}
    38c0:	0005      	movs	r5, r0
    38c2:	000c      	movs	r4, r1
    38c4:	2b00      	cmp	r3, #0
    38c6:	d101      	bne.n	38cc <_fflush_r+0x10>
    38c8:	2000      	movs	r0, #0
    38ca:	bd70      	pop	{r4, r5, r6, pc}
    38cc:	2800      	cmp	r0, #0
    38ce:	d004      	beq.n	38da <_fflush_r+0x1e>
    38d0:	6983      	ldr	r3, [r0, #24]
    38d2:	2b00      	cmp	r3, #0
    38d4:	d101      	bne.n	38da <_fflush_r+0x1e>
    38d6:	f000 f85f 	bl	3998 <__sinit>
    38da:	4b0b      	ldr	r3, [pc, #44]	; (3908 <_fflush_r+0x4c>)
    38dc:	429c      	cmp	r4, r3
    38de:	d109      	bne.n	38f4 <_fflush_r+0x38>
    38e0:	686c      	ldr	r4, [r5, #4]
    38e2:	220c      	movs	r2, #12
    38e4:	5ea3      	ldrsh	r3, [r4, r2]
    38e6:	2b00      	cmp	r3, #0
    38e8:	d0ee      	beq.n	38c8 <_fflush_r+0xc>
    38ea:	0021      	movs	r1, r4
    38ec:	0028      	movs	r0, r5
    38ee:	f7ff ff5b 	bl	37a8 <__sflush_r>
    38f2:	e7ea      	b.n	38ca <_fflush_r+0xe>
    38f4:	4b05      	ldr	r3, [pc, #20]	; (390c <_fflush_r+0x50>)
    38f6:	429c      	cmp	r4, r3
    38f8:	d101      	bne.n	38fe <_fflush_r+0x42>
    38fa:	68ac      	ldr	r4, [r5, #8]
    38fc:	e7f1      	b.n	38e2 <_fflush_r+0x26>
    38fe:	4b04      	ldr	r3, [pc, #16]	; (3910 <_fflush_r+0x54>)
    3900:	429c      	cmp	r4, r3
    3902:	d1ee      	bne.n	38e2 <_fflush_r+0x26>
    3904:	68ec      	ldr	r4, [r5, #12]
    3906:	e7ec      	b.n	38e2 <_fflush_r+0x26>
    3908:	00004140 	.word	0x00004140
    390c:	00004160 	.word	0x00004160
    3910:	00004120 	.word	0x00004120

00003914 <_cleanup_r>:
    3914:	b510      	push	{r4, lr}
    3916:	4902      	ldr	r1, [pc, #8]	; (3920 <_cleanup_r+0xc>)
    3918:	f000 f8b2 	bl	3a80 <_fwalk_reent>
    391c:	bd10      	pop	{r4, pc}
    391e:	46c0      	nop			; (mov r8, r8)
    3920:	000038bd 	.word	0x000038bd

00003924 <std.isra.0>:
    3924:	2300      	movs	r3, #0
    3926:	b510      	push	{r4, lr}
    3928:	0004      	movs	r4, r0
    392a:	6003      	str	r3, [r0, #0]
    392c:	6043      	str	r3, [r0, #4]
    392e:	6083      	str	r3, [r0, #8]
    3930:	8181      	strh	r1, [r0, #12]
    3932:	6643      	str	r3, [r0, #100]	; 0x64
    3934:	81c2      	strh	r2, [r0, #14]
    3936:	6103      	str	r3, [r0, #16]
    3938:	6143      	str	r3, [r0, #20]
    393a:	6183      	str	r3, [r0, #24]
    393c:	0019      	movs	r1, r3
    393e:	2208      	movs	r2, #8
    3940:	305c      	adds	r0, #92	; 0x5c
    3942:	f7ff fa57 	bl	2df4 <memset>
    3946:	4b05      	ldr	r3, [pc, #20]	; (395c <std.isra.0+0x38>)
    3948:	6224      	str	r4, [r4, #32]
    394a:	6263      	str	r3, [r4, #36]	; 0x24
    394c:	4b04      	ldr	r3, [pc, #16]	; (3960 <std.isra.0+0x3c>)
    394e:	62a3      	str	r3, [r4, #40]	; 0x28
    3950:	4b04      	ldr	r3, [pc, #16]	; (3964 <std.isra.0+0x40>)
    3952:	62e3      	str	r3, [r4, #44]	; 0x2c
    3954:	4b04      	ldr	r3, [pc, #16]	; (3968 <std.isra.0+0x44>)
    3956:	6323      	str	r3, [r4, #48]	; 0x30
    3958:	bd10      	pop	{r4, pc}
    395a:	46c0      	nop			; (mov r8, r8)
    395c:	00003d3d 	.word	0x00003d3d
    3960:	00003d65 	.word	0x00003d65
    3964:	00003d9d 	.word	0x00003d9d
    3968:	00003dc9 	.word	0x00003dc9

0000396c <__sfmoreglue>:
    396c:	b570      	push	{r4, r5, r6, lr}
    396e:	2568      	movs	r5, #104	; 0x68
    3970:	1e4a      	subs	r2, r1, #1
    3972:	4355      	muls	r5, r2
    3974:	000e      	movs	r6, r1
    3976:	0029      	movs	r1, r5
    3978:	3174      	adds	r1, #116	; 0x74
    397a:	f000 f96f 	bl	3c5c <_malloc_r>
    397e:	1e04      	subs	r4, r0, #0
    3980:	d008      	beq.n	3994 <__sfmoreglue+0x28>
    3982:	2100      	movs	r1, #0
    3984:	002a      	movs	r2, r5
    3986:	6001      	str	r1, [r0, #0]
    3988:	6046      	str	r6, [r0, #4]
    398a:	300c      	adds	r0, #12
    398c:	60a0      	str	r0, [r4, #8]
    398e:	3268      	adds	r2, #104	; 0x68
    3990:	f7ff fa30 	bl	2df4 <memset>
    3994:	0020      	movs	r0, r4
    3996:	bd70      	pop	{r4, r5, r6, pc}

00003998 <__sinit>:
    3998:	6983      	ldr	r3, [r0, #24]
    399a:	b513      	push	{r0, r1, r4, lr}
    399c:	0004      	movs	r4, r0
    399e:	2b00      	cmp	r3, #0
    39a0:	d128      	bne.n	39f4 <__sinit+0x5c>
    39a2:	6483      	str	r3, [r0, #72]	; 0x48
    39a4:	64c3      	str	r3, [r0, #76]	; 0x4c
    39a6:	6503      	str	r3, [r0, #80]	; 0x50
    39a8:	4b13      	ldr	r3, [pc, #76]	; (39f8 <__sinit+0x60>)
    39aa:	4a14      	ldr	r2, [pc, #80]	; (39fc <__sinit+0x64>)
    39ac:	681b      	ldr	r3, [r3, #0]
    39ae:	6282      	str	r2, [r0, #40]	; 0x28
    39b0:	9301      	str	r3, [sp, #4]
    39b2:	4298      	cmp	r0, r3
    39b4:	d101      	bne.n	39ba <__sinit+0x22>
    39b6:	2301      	movs	r3, #1
    39b8:	6183      	str	r3, [r0, #24]
    39ba:	0020      	movs	r0, r4
    39bc:	f000 f820 	bl	3a00 <__sfp>
    39c0:	6060      	str	r0, [r4, #4]
    39c2:	0020      	movs	r0, r4
    39c4:	f000 f81c 	bl	3a00 <__sfp>
    39c8:	60a0      	str	r0, [r4, #8]
    39ca:	0020      	movs	r0, r4
    39cc:	f000 f818 	bl	3a00 <__sfp>
    39d0:	2200      	movs	r2, #0
    39d2:	60e0      	str	r0, [r4, #12]
    39d4:	2104      	movs	r1, #4
    39d6:	6860      	ldr	r0, [r4, #4]
    39d8:	f7ff ffa4 	bl	3924 <std.isra.0>
    39dc:	2201      	movs	r2, #1
    39de:	2109      	movs	r1, #9
    39e0:	68a0      	ldr	r0, [r4, #8]
    39e2:	f7ff ff9f 	bl	3924 <std.isra.0>
    39e6:	2202      	movs	r2, #2
    39e8:	2112      	movs	r1, #18
    39ea:	68e0      	ldr	r0, [r4, #12]
    39ec:	f7ff ff9a 	bl	3924 <std.isra.0>
    39f0:	2301      	movs	r3, #1
    39f2:	61a3      	str	r3, [r4, #24]
    39f4:	bd13      	pop	{r0, r1, r4, pc}
    39f6:	46c0      	nop			; (mov r8, r8)
    39f8:	000040e8 	.word	0x000040e8
    39fc:	00003915 	.word	0x00003915

00003a00 <__sfp>:
    3a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3a02:	4b1e      	ldr	r3, [pc, #120]	; (3a7c <__sfp+0x7c>)
    3a04:	0007      	movs	r7, r0
    3a06:	681e      	ldr	r6, [r3, #0]
    3a08:	69b3      	ldr	r3, [r6, #24]
    3a0a:	2b00      	cmp	r3, #0
    3a0c:	d102      	bne.n	3a14 <__sfp+0x14>
    3a0e:	0030      	movs	r0, r6
    3a10:	f7ff ffc2 	bl	3998 <__sinit>
    3a14:	3648      	adds	r6, #72	; 0x48
    3a16:	68b4      	ldr	r4, [r6, #8]
    3a18:	6873      	ldr	r3, [r6, #4]
    3a1a:	3b01      	subs	r3, #1
    3a1c:	d504      	bpl.n	3a28 <__sfp+0x28>
    3a1e:	6833      	ldr	r3, [r6, #0]
    3a20:	2b00      	cmp	r3, #0
    3a22:	d007      	beq.n	3a34 <__sfp+0x34>
    3a24:	6836      	ldr	r6, [r6, #0]
    3a26:	e7f6      	b.n	3a16 <__sfp+0x16>
    3a28:	220c      	movs	r2, #12
    3a2a:	5ea5      	ldrsh	r5, [r4, r2]
    3a2c:	2d00      	cmp	r5, #0
    3a2e:	d00d      	beq.n	3a4c <__sfp+0x4c>
    3a30:	3468      	adds	r4, #104	; 0x68
    3a32:	e7f2      	b.n	3a1a <__sfp+0x1a>
    3a34:	2104      	movs	r1, #4
    3a36:	0038      	movs	r0, r7
    3a38:	f7ff ff98 	bl	396c <__sfmoreglue>
    3a3c:	6030      	str	r0, [r6, #0]
    3a3e:	2800      	cmp	r0, #0
    3a40:	d1f0      	bne.n	3a24 <__sfp+0x24>
    3a42:	230c      	movs	r3, #12
    3a44:	0004      	movs	r4, r0
    3a46:	603b      	str	r3, [r7, #0]
    3a48:	0020      	movs	r0, r4
    3a4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3a4c:	2301      	movs	r3, #1
    3a4e:	0020      	movs	r0, r4
    3a50:	425b      	negs	r3, r3
    3a52:	81e3      	strh	r3, [r4, #14]
    3a54:	3302      	adds	r3, #2
    3a56:	81a3      	strh	r3, [r4, #12]
    3a58:	6665      	str	r5, [r4, #100]	; 0x64
    3a5a:	6025      	str	r5, [r4, #0]
    3a5c:	60a5      	str	r5, [r4, #8]
    3a5e:	6065      	str	r5, [r4, #4]
    3a60:	6125      	str	r5, [r4, #16]
    3a62:	6165      	str	r5, [r4, #20]
    3a64:	61a5      	str	r5, [r4, #24]
    3a66:	2208      	movs	r2, #8
    3a68:	0029      	movs	r1, r5
    3a6a:	305c      	adds	r0, #92	; 0x5c
    3a6c:	f7ff f9c2 	bl	2df4 <memset>
    3a70:	6365      	str	r5, [r4, #52]	; 0x34
    3a72:	63a5      	str	r5, [r4, #56]	; 0x38
    3a74:	64a5      	str	r5, [r4, #72]	; 0x48
    3a76:	64e5      	str	r5, [r4, #76]	; 0x4c
    3a78:	e7e6      	b.n	3a48 <__sfp+0x48>
    3a7a:	46c0      	nop			; (mov r8, r8)
    3a7c:	000040e8 	.word	0x000040e8

00003a80 <_fwalk_reent>:
    3a80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3a82:	0004      	movs	r4, r0
    3a84:	0007      	movs	r7, r0
    3a86:	2600      	movs	r6, #0
    3a88:	9101      	str	r1, [sp, #4]
    3a8a:	3448      	adds	r4, #72	; 0x48
    3a8c:	2c00      	cmp	r4, #0
    3a8e:	d101      	bne.n	3a94 <_fwalk_reent+0x14>
    3a90:	0030      	movs	r0, r6
    3a92:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3a94:	6863      	ldr	r3, [r4, #4]
    3a96:	68a5      	ldr	r5, [r4, #8]
    3a98:	9300      	str	r3, [sp, #0]
    3a9a:	9b00      	ldr	r3, [sp, #0]
    3a9c:	3b01      	subs	r3, #1
    3a9e:	9300      	str	r3, [sp, #0]
    3aa0:	d501      	bpl.n	3aa6 <_fwalk_reent+0x26>
    3aa2:	6824      	ldr	r4, [r4, #0]
    3aa4:	e7f2      	b.n	3a8c <_fwalk_reent+0xc>
    3aa6:	89ab      	ldrh	r3, [r5, #12]
    3aa8:	2b01      	cmp	r3, #1
    3aaa:	d908      	bls.n	3abe <_fwalk_reent+0x3e>
    3aac:	220e      	movs	r2, #14
    3aae:	5eab      	ldrsh	r3, [r5, r2]
    3ab0:	3301      	adds	r3, #1
    3ab2:	d004      	beq.n	3abe <_fwalk_reent+0x3e>
    3ab4:	0029      	movs	r1, r5
    3ab6:	0038      	movs	r0, r7
    3ab8:	9b01      	ldr	r3, [sp, #4]
    3aba:	4798      	blx	r3
    3abc:	4306      	orrs	r6, r0
    3abe:	3568      	adds	r5, #104	; 0x68
    3ac0:	e7eb      	b.n	3a9a <_fwalk_reent+0x1a>
	...

00003ac4 <__swhatbuf_r>:
    3ac4:	b570      	push	{r4, r5, r6, lr}
    3ac6:	000e      	movs	r6, r1
    3ac8:	001d      	movs	r5, r3
    3aca:	230e      	movs	r3, #14
    3acc:	5ec9      	ldrsh	r1, [r1, r3]
    3ace:	b090      	sub	sp, #64	; 0x40
    3ad0:	0014      	movs	r4, r2
    3ad2:	2900      	cmp	r1, #0
    3ad4:	da07      	bge.n	3ae6 <__swhatbuf_r+0x22>
    3ad6:	2300      	movs	r3, #0
    3ad8:	602b      	str	r3, [r5, #0]
    3ada:	89b3      	ldrh	r3, [r6, #12]
    3adc:	061b      	lsls	r3, r3, #24
    3ade:	d411      	bmi.n	3b04 <__swhatbuf_r+0x40>
    3ae0:	2380      	movs	r3, #128	; 0x80
    3ae2:	00db      	lsls	r3, r3, #3
    3ae4:	e00f      	b.n	3b06 <__swhatbuf_r+0x42>
    3ae6:	aa01      	add	r2, sp, #4
    3ae8:	f000 f99a 	bl	3e20 <_fstat_r>
    3aec:	2800      	cmp	r0, #0
    3aee:	dbf2      	blt.n	3ad6 <__swhatbuf_r+0x12>
    3af0:	22f0      	movs	r2, #240	; 0xf0
    3af2:	9b02      	ldr	r3, [sp, #8]
    3af4:	0212      	lsls	r2, r2, #8
    3af6:	4013      	ands	r3, r2
    3af8:	4a05      	ldr	r2, [pc, #20]	; (3b10 <__swhatbuf_r+0x4c>)
    3afa:	189b      	adds	r3, r3, r2
    3afc:	425a      	negs	r2, r3
    3afe:	4153      	adcs	r3, r2
    3b00:	602b      	str	r3, [r5, #0]
    3b02:	e7ed      	b.n	3ae0 <__swhatbuf_r+0x1c>
    3b04:	2340      	movs	r3, #64	; 0x40
    3b06:	2000      	movs	r0, #0
    3b08:	6023      	str	r3, [r4, #0]
    3b0a:	b010      	add	sp, #64	; 0x40
    3b0c:	bd70      	pop	{r4, r5, r6, pc}
    3b0e:	46c0      	nop			; (mov r8, r8)
    3b10:	ffffe000 	.word	0xffffe000

00003b14 <__smakebuf_r>:
    3b14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3b16:	2602      	movs	r6, #2
    3b18:	898b      	ldrh	r3, [r1, #12]
    3b1a:	0005      	movs	r5, r0
    3b1c:	000c      	movs	r4, r1
    3b1e:	4233      	tst	r3, r6
    3b20:	d006      	beq.n	3b30 <__smakebuf_r+0x1c>
    3b22:	0023      	movs	r3, r4
    3b24:	3347      	adds	r3, #71	; 0x47
    3b26:	6023      	str	r3, [r4, #0]
    3b28:	6123      	str	r3, [r4, #16]
    3b2a:	2301      	movs	r3, #1
    3b2c:	6163      	str	r3, [r4, #20]
    3b2e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    3b30:	ab01      	add	r3, sp, #4
    3b32:	466a      	mov	r2, sp
    3b34:	f7ff ffc6 	bl	3ac4 <__swhatbuf_r>
    3b38:	9900      	ldr	r1, [sp, #0]
    3b3a:	0007      	movs	r7, r0
    3b3c:	0028      	movs	r0, r5
    3b3e:	f000 f88d 	bl	3c5c <_malloc_r>
    3b42:	2800      	cmp	r0, #0
    3b44:	d108      	bne.n	3b58 <__smakebuf_r+0x44>
    3b46:	220c      	movs	r2, #12
    3b48:	5ea3      	ldrsh	r3, [r4, r2]
    3b4a:	059a      	lsls	r2, r3, #22
    3b4c:	d4ef      	bmi.n	3b2e <__smakebuf_r+0x1a>
    3b4e:	2203      	movs	r2, #3
    3b50:	4393      	bics	r3, r2
    3b52:	431e      	orrs	r6, r3
    3b54:	81a6      	strh	r6, [r4, #12]
    3b56:	e7e4      	b.n	3b22 <__smakebuf_r+0xe>
    3b58:	4b0f      	ldr	r3, [pc, #60]	; (3b98 <__smakebuf_r+0x84>)
    3b5a:	62ab      	str	r3, [r5, #40]	; 0x28
    3b5c:	2380      	movs	r3, #128	; 0x80
    3b5e:	89a2      	ldrh	r2, [r4, #12]
    3b60:	6020      	str	r0, [r4, #0]
    3b62:	4313      	orrs	r3, r2
    3b64:	81a3      	strh	r3, [r4, #12]
    3b66:	9b00      	ldr	r3, [sp, #0]
    3b68:	6120      	str	r0, [r4, #16]
    3b6a:	6163      	str	r3, [r4, #20]
    3b6c:	9b01      	ldr	r3, [sp, #4]
    3b6e:	2b00      	cmp	r3, #0
    3b70:	d00d      	beq.n	3b8e <__smakebuf_r+0x7a>
    3b72:	230e      	movs	r3, #14
    3b74:	5ee1      	ldrsh	r1, [r4, r3]
    3b76:	0028      	movs	r0, r5
    3b78:	f000 f964 	bl	3e44 <_isatty_r>
    3b7c:	2800      	cmp	r0, #0
    3b7e:	d006      	beq.n	3b8e <__smakebuf_r+0x7a>
    3b80:	2203      	movs	r2, #3
    3b82:	89a3      	ldrh	r3, [r4, #12]
    3b84:	4393      	bics	r3, r2
    3b86:	001a      	movs	r2, r3
    3b88:	2301      	movs	r3, #1
    3b8a:	4313      	orrs	r3, r2
    3b8c:	81a3      	strh	r3, [r4, #12]
    3b8e:	89a0      	ldrh	r0, [r4, #12]
    3b90:	4338      	orrs	r0, r7
    3b92:	81a0      	strh	r0, [r4, #12]
    3b94:	e7cb      	b.n	3b2e <__smakebuf_r+0x1a>
    3b96:	46c0      	nop			; (mov r8, r8)
    3b98:	00003915 	.word	0x00003915

00003b9c <malloc>:
    3b9c:	b510      	push	{r4, lr}
    3b9e:	4b03      	ldr	r3, [pc, #12]	; (3bac <malloc+0x10>)
    3ba0:	0001      	movs	r1, r0
    3ba2:	6818      	ldr	r0, [r3, #0]
    3ba4:	f000 f85a 	bl	3c5c <_malloc_r>
    3ba8:	bd10      	pop	{r4, pc}
    3baa:	46c0      	nop			; (mov r8, r8)
    3bac:	20000014 	.word	0x20000014

00003bb0 <memchr>:
    3bb0:	b2c9      	uxtb	r1, r1
    3bb2:	1882      	adds	r2, r0, r2
    3bb4:	4290      	cmp	r0, r2
    3bb6:	d101      	bne.n	3bbc <memchr+0xc>
    3bb8:	2000      	movs	r0, #0
    3bba:	4770      	bx	lr
    3bbc:	7803      	ldrb	r3, [r0, #0]
    3bbe:	428b      	cmp	r3, r1
    3bc0:	d0fb      	beq.n	3bba <memchr+0xa>
    3bc2:	3001      	adds	r0, #1
    3bc4:	e7f6      	b.n	3bb4 <memchr+0x4>
	...

00003bc8 <_free_r>:
    3bc8:	b570      	push	{r4, r5, r6, lr}
    3bca:	0005      	movs	r5, r0
    3bcc:	2900      	cmp	r1, #0
    3bce:	d010      	beq.n	3bf2 <_free_r+0x2a>
    3bd0:	1f0c      	subs	r4, r1, #4
    3bd2:	6823      	ldr	r3, [r4, #0]
    3bd4:	2b00      	cmp	r3, #0
    3bd6:	da00      	bge.n	3bda <_free_r+0x12>
    3bd8:	18e4      	adds	r4, r4, r3
    3bda:	0028      	movs	r0, r5
    3bdc:	f000 f958 	bl	3e90 <__malloc_lock>
    3be0:	4a1d      	ldr	r2, [pc, #116]	; (3c58 <_free_r+0x90>)
    3be2:	6813      	ldr	r3, [r2, #0]
    3be4:	2b00      	cmp	r3, #0
    3be6:	d105      	bne.n	3bf4 <_free_r+0x2c>
    3be8:	6063      	str	r3, [r4, #4]
    3bea:	6014      	str	r4, [r2, #0]
    3bec:	0028      	movs	r0, r5
    3bee:	f000 f950 	bl	3e92 <__malloc_unlock>
    3bf2:	bd70      	pop	{r4, r5, r6, pc}
    3bf4:	42a3      	cmp	r3, r4
    3bf6:	d909      	bls.n	3c0c <_free_r+0x44>
    3bf8:	6821      	ldr	r1, [r4, #0]
    3bfa:	1860      	adds	r0, r4, r1
    3bfc:	4283      	cmp	r3, r0
    3bfe:	d1f3      	bne.n	3be8 <_free_r+0x20>
    3c00:	6818      	ldr	r0, [r3, #0]
    3c02:	685b      	ldr	r3, [r3, #4]
    3c04:	1841      	adds	r1, r0, r1
    3c06:	6021      	str	r1, [r4, #0]
    3c08:	e7ee      	b.n	3be8 <_free_r+0x20>
    3c0a:	0013      	movs	r3, r2
    3c0c:	685a      	ldr	r2, [r3, #4]
    3c0e:	2a00      	cmp	r2, #0
    3c10:	d001      	beq.n	3c16 <_free_r+0x4e>
    3c12:	42a2      	cmp	r2, r4
    3c14:	d9f9      	bls.n	3c0a <_free_r+0x42>
    3c16:	6819      	ldr	r1, [r3, #0]
    3c18:	1858      	adds	r0, r3, r1
    3c1a:	42a0      	cmp	r0, r4
    3c1c:	d10b      	bne.n	3c36 <_free_r+0x6e>
    3c1e:	6820      	ldr	r0, [r4, #0]
    3c20:	1809      	adds	r1, r1, r0
    3c22:	1858      	adds	r0, r3, r1
    3c24:	6019      	str	r1, [r3, #0]
    3c26:	4282      	cmp	r2, r0
    3c28:	d1e0      	bne.n	3bec <_free_r+0x24>
    3c2a:	6810      	ldr	r0, [r2, #0]
    3c2c:	6852      	ldr	r2, [r2, #4]
    3c2e:	1841      	adds	r1, r0, r1
    3c30:	6019      	str	r1, [r3, #0]
    3c32:	605a      	str	r2, [r3, #4]
    3c34:	e7da      	b.n	3bec <_free_r+0x24>
    3c36:	42a0      	cmp	r0, r4
    3c38:	d902      	bls.n	3c40 <_free_r+0x78>
    3c3a:	230c      	movs	r3, #12
    3c3c:	602b      	str	r3, [r5, #0]
    3c3e:	e7d5      	b.n	3bec <_free_r+0x24>
    3c40:	6821      	ldr	r1, [r4, #0]
    3c42:	1860      	adds	r0, r4, r1
    3c44:	4282      	cmp	r2, r0
    3c46:	d103      	bne.n	3c50 <_free_r+0x88>
    3c48:	6810      	ldr	r0, [r2, #0]
    3c4a:	6852      	ldr	r2, [r2, #4]
    3c4c:	1841      	adds	r1, r0, r1
    3c4e:	6021      	str	r1, [r4, #0]
    3c50:	6062      	str	r2, [r4, #4]
    3c52:	605c      	str	r4, [r3, #4]
    3c54:	e7ca      	b.n	3bec <_free_r+0x24>
    3c56:	46c0      	nop			; (mov r8, r8)
    3c58:	200000cc 	.word	0x200000cc

00003c5c <_malloc_r>:
    3c5c:	2303      	movs	r3, #3
    3c5e:	b570      	push	{r4, r5, r6, lr}
    3c60:	1ccd      	adds	r5, r1, #3
    3c62:	439d      	bics	r5, r3
    3c64:	3508      	adds	r5, #8
    3c66:	0006      	movs	r6, r0
    3c68:	2d0c      	cmp	r5, #12
    3c6a:	d21e      	bcs.n	3caa <_malloc_r+0x4e>
    3c6c:	250c      	movs	r5, #12
    3c6e:	42a9      	cmp	r1, r5
    3c70:	d81d      	bhi.n	3cae <_malloc_r+0x52>
    3c72:	0030      	movs	r0, r6
    3c74:	f000 f90c 	bl	3e90 <__malloc_lock>
    3c78:	4a25      	ldr	r2, [pc, #148]	; (3d10 <_malloc_r+0xb4>)
    3c7a:	6814      	ldr	r4, [r2, #0]
    3c7c:	0021      	movs	r1, r4
    3c7e:	2900      	cmp	r1, #0
    3c80:	d119      	bne.n	3cb6 <_malloc_r+0x5a>
    3c82:	4c24      	ldr	r4, [pc, #144]	; (3d14 <_malloc_r+0xb8>)
    3c84:	6823      	ldr	r3, [r4, #0]
    3c86:	2b00      	cmp	r3, #0
    3c88:	d103      	bne.n	3c92 <_malloc_r+0x36>
    3c8a:	0030      	movs	r0, r6
    3c8c:	f000 f844 	bl	3d18 <_sbrk_r>
    3c90:	6020      	str	r0, [r4, #0]
    3c92:	0029      	movs	r1, r5
    3c94:	0030      	movs	r0, r6
    3c96:	f000 f83f 	bl	3d18 <_sbrk_r>
    3c9a:	1c43      	adds	r3, r0, #1
    3c9c:	d12c      	bne.n	3cf8 <_malloc_r+0x9c>
    3c9e:	230c      	movs	r3, #12
    3ca0:	0030      	movs	r0, r6
    3ca2:	6033      	str	r3, [r6, #0]
    3ca4:	f000 f8f5 	bl	3e92 <__malloc_unlock>
    3ca8:	e003      	b.n	3cb2 <_malloc_r+0x56>
    3caa:	2d00      	cmp	r5, #0
    3cac:	dadf      	bge.n	3c6e <_malloc_r+0x12>
    3cae:	230c      	movs	r3, #12
    3cb0:	6033      	str	r3, [r6, #0]
    3cb2:	2000      	movs	r0, #0
    3cb4:	bd70      	pop	{r4, r5, r6, pc}
    3cb6:	680b      	ldr	r3, [r1, #0]
    3cb8:	1b5b      	subs	r3, r3, r5
    3cba:	d41a      	bmi.n	3cf2 <_malloc_r+0x96>
    3cbc:	2b0b      	cmp	r3, #11
    3cbe:	d903      	bls.n	3cc8 <_malloc_r+0x6c>
    3cc0:	600b      	str	r3, [r1, #0]
    3cc2:	18cc      	adds	r4, r1, r3
    3cc4:	6025      	str	r5, [r4, #0]
    3cc6:	e003      	b.n	3cd0 <_malloc_r+0x74>
    3cc8:	428c      	cmp	r4, r1
    3cca:	d10e      	bne.n	3cea <_malloc_r+0x8e>
    3ccc:	6863      	ldr	r3, [r4, #4]
    3cce:	6013      	str	r3, [r2, #0]
    3cd0:	0030      	movs	r0, r6
    3cd2:	f000 f8de 	bl	3e92 <__malloc_unlock>
    3cd6:	0020      	movs	r0, r4
    3cd8:	2207      	movs	r2, #7
    3cda:	300b      	adds	r0, #11
    3cdc:	1d23      	adds	r3, r4, #4
    3cde:	4390      	bics	r0, r2
    3ce0:	1ac3      	subs	r3, r0, r3
    3ce2:	d0e7      	beq.n	3cb4 <_malloc_r+0x58>
    3ce4:	425a      	negs	r2, r3
    3ce6:	50e2      	str	r2, [r4, r3]
    3ce8:	e7e4      	b.n	3cb4 <_malloc_r+0x58>
    3cea:	684b      	ldr	r3, [r1, #4]
    3cec:	6063      	str	r3, [r4, #4]
    3cee:	000c      	movs	r4, r1
    3cf0:	e7ee      	b.n	3cd0 <_malloc_r+0x74>
    3cf2:	000c      	movs	r4, r1
    3cf4:	6849      	ldr	r1, [r1, #4]
    3cf6:	e7c2      	b.n	3c7e <_malloc_r+0x22>
    3cf8:	2303      	movs	r3, #3
    3cfa:	1cc4      	adds	r4, r0, #3
    3cfc:	439c      	bics	r4, r3
    3cfe:	42a0      	cmp	r0, r4
    3d00:	d0e0      	beq.n	3cc4 <_malloc_r+0x68>
    3d02:	1a21      	subs	r1, r4, r0
    3d04:	0030      	movs	r0, r6
    3d06:	f000 f807 	bl	3d18 <_sbrk_r>
    3d0a:	1c43      	adds	r3, r0, #1
    3d0c:	d1da      	bne.n	3cc4 <_malloc_r+0x68>
    3d0e:	e7c6      	b.n	3c9e <_malloc_r+0x42>
    3d10:	200000cc 	.word	0x200000cc
    3d14:	200000d0 	.word	0x200000d0

00003d18 <_sbrk_r>:
    3d18:	2300      	movs	r3, #0
    3d1a:	b570      	push	{r4, r5, r6, lr}
    3d1c:	4c06      	ldr	r4, [pc, #24]	; (3d38 <_sbrk_r+0x20>)
    3d1e:	0005      	movs	r5, r0
    3d20:	0008      	movs	r0, r1
    3d22:	6023      	str	r3, [r4, #0]
    3d24:	f7fc ff14 	bl	b50 <_sbrk>
    3d28:	1c43      	adds	r3, r0, #1
    3d2a:	d103      	bne.n	3d34 <_sbrk_r+0x1c>
    3d2c:	6823      	ldr	r3, [r4, #0]
    3d2e:	2b00      	cmp	r3, #0
    3d30:	d000      	beq.n	3d34 <_sbrk_r+0x1c>
    3d32:	602b      	str	r3, [r5, #0]
    3d34:	bd70      	pop	{r4, r5, r6, pc}
    3d36:	46c0      	nop			; (mov r8, r8)
    3d38:	200004d0 	.word	0x200004d0

00003d3c <__sread>:
    3d3c:	b570      	push	{r4, r5, r6, lr}
    3d3e:	000c      	movs	r4, r1
    3d40:	250e      	movs	r5, #14
    3d42:	5f49      	ldrsh	r1, [r1, r5]
    3d44:	f000 f8a6 	bl	3e94 <_read_r>
    3d48:	2800      	cmp	r0, #0
    3d4a:	db03      	blt.n	3d54 <__sread+0x18>
    3d4c:	6d63      	ldr	r3, [r4, #84]	; 0x54
    3d4e:	181b      	adds	r3, r3, r0
    3d50:	6563      	str	r3, [r4, #84]	; 0x54
    3d52:	bd70      	pop	{r4, r5, r6, pc}
    3d54:	89a3      	ldrh	r3, [r4, #12]
    3d56:	4a02      	ldr	r2, [pc, #8]	; (3d60 <__sread+0x24>)
    3d58:	4013      	ands	r3, r2
    3d5a:	81a3      	strh	r3, [r4, #12]
    3d5c:	e7f9      	b.n	3d52 <__sread+0x16>
    3d5e:	46c0      	nop			; (mov r8, r8)
    3d60:	ffffefff 	.word	0xffffefff

00003d64 <__swrite>:
    3d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3d66:	001f      	movs	r7, r3
    3d68:	898b      	ldrh	r3, [r1, #12]
    3d6a:	0005      	movs	r5, r0
    3d6c:	000c      	movs	r4, r1
    3d6e:	0016      	movs	r6, r2
    3d70:	05db      	lsls	r3, r3, #23
    3d72:	d505      	bpl.n	3d80 <__swrite+0x1c>
    3d74:	230e      	movs	r3, #14
    3d76:	5ec9      	ldrsh	r1, [r1, r3]
    3d78:	2200      	movs	r2, #0
    3d7a:	2302      	movs	r3, #2
    3d7c:	f000 f874 	bl	3e68 <_lseek_r>
    3d80:	89a3      	ldrh	r3, [r4, #12]
    3d82:	4a05      	ldr	r2, [pc, #20]	; (3d98 <__swrite+0x34>)
    3d84:	0028      	movs	r0, r5
    3d86:	4013      	ands	r3, r2
    3d88:	81a3      	strh	r3, [r4, #12]
    3d8a:	0032      	movs	r2, r6
    3d8c:	230e      	movs	r3, #14
    3d8e:	5ee1      	ldrsh	r1, [r4, r3]
    3d90:	003b      	movs	r3, r7
    3d92:	f000 f81f 	bl	3dd4 <_write_r>
    3d96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3d98:	ffffefff 	.word	0xffffefff

00003d9c <__sseek>:
    3d9c:	b570      	push	{r4, r5, r6, lr}
    3d9e:	000c      	movs	r4, r1
    3da0:	250e      	movs	r5, #14
    3da2:	5f49      	ldrsh	r1, [r1, r5]
    3da4:	f000 f860 	bl	3e68 <_lseek_r>
    3da8:	89a3      	ldrh	r3, [r4, #12]
    3daa:	1c42      	adds	r2, r0, #1
    3dac:	d103      	bne.n	3db6 <__sseek+0x1a>
    3dae:	4a05      	ldr	r2, [pc, #20]	; (3dc4 <__sseek+0x28>)
    3db0:	4013      	ands	r3, r2
    3db2:	81a3      	strh	r3, [r4, #12]
    3db4:	bd70      	pop	{r4, r5, r6, pc}
    3db6:	2280      	movs	r2, #128	; 0x80
    3db8:	0152      	lsls	r2, r2, #5
    3dba:	4313      	orrs	r3, r2
    3dbc:	81a3      	strh	r3, [r4, #12]
    3dbe:	6560      	str	r0, [r4, #84]	; 0x54
    3dc0:	e7f8      	b.n	3db4 <__sseek+0x18>
    3dc2:	46c0      	nop			; (mov r8, r8)
    3dc4:	ffffefff 	.word	0xffffefff

00003dc8 <__sclose>:
    3dc8:	b510      	push	{r4, lr}
    3dca:	230e      	movs	r3, #14
    3dcc:	5ec9      	ldrsh	r1, [r1, r3]
    3dce:	f000 f815 	bl	3dfc <_close_r>
    3dd2:	bd10      	pop	{r4, pc}

00003dd4 <_write_r>:
    3dd4:	b570      	push	{r4, r5, r6, lr}
    3dd6:	0005      	movs	r5, r0
    3dd8:	0008      	movs	r0, r1
    3dda:	0011      	movs	r1, r2
    3ddc:	2200      	movs	r2, #0
    3dde:	4c06      	ldr	r4, [pc, #24]	; (3df8 <_write_r+0x24>)
    3de0:	6022      	str	r2, [r4, #0]
    3de2:	001a      	movs	r2, r3
    3de4:	f7fd fbec 	bl	15c0 <_write>
    3de8:	1c43      	adds	r3, r0, #1
    3dea:	d103      	bne.n	3df4 <_write_r+0x20>
    3dec:	6823      	ldr	r3, [r4, #0]
    3dee:	2b00      	cmp	r3, #0
    3df0:	d000      	beq.n	3df4 <_write_r+0x20>
    3df2:	602b      	str	r3, [r5, #0]
    3df4:	bd70      	pop	{r4, r5, r6, pc}
    3df6:	46c0      	nop			; (mov r8, r8)
    3df8:	200004d0 	.word	0x200004d0

00003dfc <_close_r>:
    3dfc:	2300      	movs	r3, #0
    3dfe:	b570      	push	{r4, r5, r6, lr}
    3e00:	4c06      	ldr	r4, [pc, #24]	; (3e1c <_close_r+0x20>)
    3e02:	0005      	movs	r5, r0
    3e04:	0008      	movs	r0, r1
    3e06:	6023      	str	r3, [r4, #0]
    3e08:	f7fc feb4 	bl	b74 <_close>
    3e0c:	1c43      	adds	r3, r0, #1
    3e0e:	d103      	bne.n	3e18 <_close_r+0x1c>
    3e10:	6823      	ldr	r3, [r4, #0]
    3e12:	2b00      	cmp	r3, #0
    3e14:	d000      	beq.n	3e18 <_close_r+0x1c>
    3e16:	602b      	str	r3, [r5, #0]
    3e18:	bd70      	pop	{r4, r5, r6, pc}
    3e1a:	46c0      	nop			; (mov r8, r8)
    3e1c:	200004d0 	.word	0x200004d0

00003e20 <_fstat_r>:
    3e20:	2300      	movs	r3, #0
    3e22:	b570      	push	{r4, r5, r6, lr}
    3e24:	4c06      	ldr	r4, [pc, #24]	; (3e40 <_fstat_r+0x20>)
    3e26:	0005      	movs	r5, r0
    3e28:	0008      	movs	r0, r1
    3e2a:	0011      	movs	r1, r2
    3e2c:	6023      	str	r3, [r4, #0]
    3e2e:	f7fc fea4 	bl	b7a <_fstat>
    3e32:	1c43      	adds	r3, r0, #1
    3e34:	d103      	bne.n	3e3e <_fstat_r+0x1e>
    3e36:	6823      	ldr	r3, [r4, #0]
    3e38:	2b00      	cmp	r3, #0
    3e3a:	d000      	beq.n	3e3e <_fstat_r+0x1e>
    3e3c:	602b      	str	r3, [r5, #0]
    3e3e:	bd70      	pop	{r4, r5, r6, pc}
    3e40:	200004d0 	.word	0x200004d0

00003e44 <_isatty_r>:
    3e44:	2300      	movs	r3, #0
    3e46:	b570      	push	{r4, r5, r6, lr}
    3e48:	4c06      	ldr	r4, [pc, #24]	; (3e64 <_isatty_r+0x20>)
    3e4a:	0005      	movs	r5, r0
    3e4c:	0008      	movs	r0, r1
    3e4e:	6023      	str	r3, [r4, #0]
    3e50:	f7fc fe98 	bl	b84 <_isatty>
    3e54:	1c43      	adds	r3, r0, #1
    3e56:	d103      	bne.n	3e60 <_isatty_r+0x1c>
    3e58:	6823      	ldr	r3, [r4, #0]
    3e5a:	2b00      	cmp	r3, #0
    3e5c:	d000      	beq.n	3e60 <_isatty_r+0x1c>
    3e5e:	602b      	str	r3, [r5, #0]
    3e60:	bd70      	pop	{r4, r5, r6, pc}
    3e62:	46c0      	nop			; (mov r8, r8)
    3e64:	200004d0 	.word	0x200004d0

00003e68 <_lseek_r>:
    3e68:	b570      	push	{r4, r5, r6, lr}
    3e6a:	0005      	movs	r5, r0
    3e6c:	0008      	movs	r0, r1
    3e6e:	0011      	movs	r1, r2
    3e70:	2200      	movs	r2, #0
    3e72:	4c06      	ldr	r4, [pc, #24]	; (3e8c <_lseek_r+0x24>)
    3e74:	6022      	str	r2, [r4, #0]
    3e76:	001a      	movs	r2, r3
    3e78:	f7fc fe86 	bl	b88 <_lseek>
    3e7c:	1c43      	adds	r3, r0, #1
    3e7e:	d103      	bne.n	3e88 <_lseek_r+0x20>
    3e80:	6823      	ldr	r3, [r4, #0]
    3e82:	2b00      	cmp	r3, #0
    3e84:	d000      	beq.n	3e88 <_lseek_r+0x20>
    3e86:	602b      	str	r3, [r5, #0]
    3e88:	bd70      	pop	{r4, r5, r6, pc}
    3e8a:	46c0      	nop			; (mov r8, r8)
    3e8c:	200004d0 	.word	0x200004d0

00003e90 <__malloc_lock>:
    3e90:	4770      	bx	lr

00003e92 <__malloc_unlock>:
    3e92:	4770      	bx	lr

00003e94 <_read_r>:
    3e94:	b570      	push	{r4, r5, r6, lr}
    3e96:	0005      	movs	r5, r0
    3e98:	0008      	movs	r0, r1
    3e9a:	0011      	movs	r1, r2
    3e9c:	2200      	movs	r2, #0
    3e9e:	4c06      	ldr	r4, [pc, #24]	; (3eb8 <_read_r+0x24>)
    3ea0:	6022      	str	r2, [r4, #0]
    3ea2:	001a      	movs	r2, r3
    3ea4:	f7fd fb78 	bl	1598 <_read>
    3ea8:	1c43      	adds	r3, r0, #1
    3eaa:	d103      	bne.n	3eb4 <_read_r+0x20>
    3eac:	6823      	ldr	r3, [r4, #0]
    3eae:	2b00      	cmp	r3, #0
    3eb0:	d000      	beq.n	3eb4 <_read_r+0x20>
    3eb2:	602b      	str	r3, [r5, #0]
    3eb4:	bd70      	pop	{r4, r5, r6, pc}
    3eb6:	46c0      	nop			; (mov r8, r8)
    3eb8:	200004d0 	.word	0x200004d0
    3ebc:	682f2e2e 	.word	0x682f2e2e
    3ec0:	732f6c61 	.word	0x732f6c61
    3ec4:	682f6372 	.word	0x682f6372
    3ec8:	615f6c61 	.word	0x615f6c61
    3ecc:	735f6364 	.word	0x735f6364
    3ed0:	2e636e79 	.word	0x2e636e79
    3ed4:	00000063 	.word	0x00000063
    3ed8:	682f2e2e 	.word	0x682f2e2e
    3edc:	732f6c61 	.word	0x732f6c61
    3ee0:	682f6372 	.word	0x682f6372
    3ee4:	635f6c61 	.word	0x635f6c61
    3ee8:	615f6e61 	.word	0x615f6e61
    3eec:	636e7973 	.word	0x636e7973
    3ef0:	0000632e 	.word	0x0000632e
    3ef4:	682f2e2e 	.word	0x682f2e2e
    3ef8:	732f6c61 	.word	0x732f6c61
    3efc:	682f6372 	.word	0x682f6372
    3f00:	695f6c61 	.word	0x695f6c61
    3f04:	00632e6f 	.word	0x00632e6f
    3f08:	682f2e2e 	.word	0x682f2e2e
    3f0c:	732f6c61 	.word	0x732f6c61
    3f10:	682f6372 	.word	0x682f6372
    3f14:	745f6c61 	.word	0x745f6c61
    3f18:	5f706d65 	.word	0x5f706d65
    3f1c:	636e7973 	.word	0x636e7973
    3f20:	0000632e 	.word	0x0000632e
    3f24:	682f2e2e 	.word	0x682f2e2e
    3f28:	732f6c61 	.word	0x732f6c61
    3f2c:	682f6372 	.word	0x682f6372
    3f30:	755f6c61 	.word	0x755f6c61
    3f34:	74726173 	.word	0x74726173
    3f38:	6e79735f 	.word	0x6e79735f
    3f3c:	00632e63 	.word	0x00632e63

00003f40 <_adcs>:
    3f40:	03060000 18000000 3f080010 00000000     ...........?....
	...
    3f5c:	682f2e2e 612f6c70 682f6364 615f6c70     ../hpl/adc/hpl_a
    3f6c:	632e6364 00000000 682f2e2e 732f6c70     dc.c....../hpl/s
    3f7c:	6f637265 70682f6d 65735f6c 6d6f6372     ercom/hpl_sercom
    3f8c:	0000632e 20434441 25204843 25203a75     .c..ADC CH %u: %
    3f9c:	25202c75 25202c75 75252e75 0d632520     u, %u, %u.%u %c.
    3fac:	0000000a 74696e69 6e6f6420 00000d65     ....init done...
    3fbc:	20636461 3a736572 2c692520 0d692520     adc res: %i, %i.
    3fcc:	0000000a 6548314f 61207061 636f6c6c     ....O1Heap alloc
    3fdc:	6e697461 656d2067 79726f6d 3a746120     ating memory at:
    3fec:	25783020 69732078 203a657a 78257830      0x%x size: 0x%x
    3ffc:	74796220 2e2e7365 000a0d2e 6548314f      bytes......O1He
    400c:	6d207061 726f6d65 6c612079 61636f6c     ap memory alloca
    401c:	6e6f6974 49414620 0d44454c 00000000     tion FAILED.....
    402c:	6548314f 6d207061 726f6d65 6c612079     O1Heap memory al
    403c:	61636f6c 6e6f6974 6e6f6420 00000d65     location done...
    404c:	706d6574 7525203a 000a0d6c 20646e65     temp: %ul...end 
    405c:	706f6f6c 0d752520 0000000a 000019d8     loop %u.........
    406c:	00001928 00001928 00001926 000019ca     (...(...&.......
    407c:	000019ca 000019c0 00001926 000019ca     ........&.......
    408c:	000019c0 000019ca 00001926 000019d0     ........&.......
    409c:	000019d0 000019d0 00001a60 000020e0     ........`.... ..
    40ac:	00001fa0 00001fa0 00001f9c 000020b8     ............. ..
    40bc:	000020b8 000020aa 00001f9c 000020b8     . ... ....... ..
    40cc:	000020aa 000020b8 00001f9c 000020c0     . ... ....... ..
    40dc:	000020c0 000020c0 000022c4              . ... ..."..

000040e8 <_global_impure_ptr>:
    40e8:	20000018 2b302d23 6c680020 6665004c     ... #-0+ .hlL.ef
    40f8:	47464567 32313000 36353433 41393837     gEFG.0123456789A
    4108:	45444342 31300046 35343332 39383736     BCDEF.0123456789
    4118:	64636261 00006665                       abcdef..

00004120 <__sf_fake_stderr>:
	...

00004140 <__sf_fake_stdin>:
	...

00004160 <__sf_fake_stdout>:
	...

00004180 <_init>:
    4180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4182:	46c0      	nop			; (mov r8, r8)
    4184:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4186:	bc08      	pop	{r3}
    4188:	469e      	mov	lr, r3
    418a:	4770      	bx	lr

0000418c <__init_array_start>:
    418c:	000000e5 	.word	0x000000e5

00004190 <_fini>:
    4190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4192:	46c0      	nop			; (mov r8, r8)
    4194:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4196:	bc08      	pop	{r3}
    4198:	469e      	mov	lr, r3
    419a:	4770      	bx	lr

0000419c <__fini_array_start>:
    419c:	000000bd 	.word	0x000000bd
